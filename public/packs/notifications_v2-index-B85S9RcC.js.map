{"version":3,"file":"notifications_v2-index-B85S9RcC.js","sources":["../../app/javascript/material-icons/400-24px/done_all.svg?react","../../app/javascript/mastodon/features/notifications/components/filtered_notifications_banner.tsx","../../app/javascript/material-icons/400-20px/settings.svg?react","../../app/javascript/mastodon/features/notifications/components/notifications_permission_banner.jsx","../../app/javascript/material-icons/400-24px/delete_forever.svg?react","../../app/javascript/mastodon/features/notifications/components/clear_column_button.jsx","../../app/javascript/mastodon/features/notifications/components/grant_permission_button.jsx","../../app/javascript/mastodon/features/notifications/components/column_settings.jsx","../../app/javascript/mastodon/features/notifications/containers/column_settings_container.js","../../app/javascript/mastodon/features/notifications_v2/components/notification_admin_report.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_group_with_status.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_admin_sign_up.tsx","../../app/javascript/material-icons/400-24px/celebration.svg?react","../../app/javascript/mastodon/features/notifications_v2/components/notification_annual_report.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_favourite.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_follow.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_follow_request.tsx","../../app/javascript/material-icons/400-24px/reply-fill.svg?react","../../app/javascript/mastodon/features/notifications_v2/components/notification_with_status.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_mention.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_moderation_warning.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_poll.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_reblog.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_severed_relationships.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_status.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_update.tsx","../../app/javascript/mastodon/features/notifications_v2/components/notification_group.tsx","../../app/javascript/mastodon/features/notifications_v2/filter_bar.tsx","../../app/javascript/mastodon/features/notifications_v2/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgDoneAll = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M268-240 42-466l57-56 170 170 56 56-57 56Zm226 0L268-466l56-57 170 170 368-368 56 57-424 424Zm0-226-57-56 198-198 57 56-198 198Z\" }));\nexport default SvgDoneAll;\n","import { useCallback, useEffect } from 'react';\n\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport { Link, useHistory } from 'react-router-dom';\n\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport { fetchNotificationPolicy } from 'mastodon/actions/notification_policies';\nimport { Icon } from 'mastodon/components/icon';\nimport { selectSettingsNotificationsMinimizeFilteredBanner } from 'mastodon/selectors/settings';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nconst messages = defineMessages({\n  filteredNotifications: {\n    id: 'notification_requests.title',\n    defaultMessage: 'Filtered notifications',\n  },\n});\n\nexport const FilteredNotificationsIconButton: React.FC<{\n  className?: string;\n}> = ({ className }) => {\n  const intl = useIntl();\n  const history = useHistory();\n  const policy = useAppSelector((state) => state.notificationPolicy);\n  const minimizeSetting = useAppSelector(\n    selectSettingsNotificationsMinimizeFilteredBanner,\n  );\n\n  const handleClick = useCallback(() => {\n    history.push('/notifications/requests');\n  }, [history]);\n\n  if (policy === null || policy.summary.pending_requests_count <= 0) {\n    return null;\n  }\n\n  if (!minimizeSetting) {\n    return null;\n  }\n\n  return (\n    <button\n      aria-label={intl.formatMessage(messages.filteredNotifications)}\n      title={intl.formatMessage(messages.filteredNotifications)}\n      onClick={handleClick}\n      className={className}\n    >\n      <Icon id='filtered-notifications' icon={InventoryIcon} />\n    </button>\n  );\n};\n\nexport const FilteredNotificationsBanner: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const policy = useAppSelector((state) => state.notificationPolicy);\n  const minimizeSetting = useAppSelector(\n    selectSettingsNotificationsMinimizeFilteredBanner,\n  );\n\n  useEffect(() => {\n    void dispatch(fetchNotificationPolicy());\n\n    const interval = setInterval(() => {\n      void dispatch(fetchNotificationPolicy());\n    }, 120000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [dispatch]);\n\n  if (policy === null || policy.summary.pending_requests_count <= 0) {\n    return null;\n  }\n\n  if (minimizeSetting) {\n    return null;\n  }\n\n  return (\n    <Link\n      className='filtered-notifications-banner'\n      to='/notifications/requests'\n    >\n      <div className='notification-group__icon'>\n        <Icon icon={InventoryIcon} id='filtered-notifications' />\n      </div>\n\n      <div className='filtered-notifications-banner__text'>\n        <strong>\n          <FormattedMessage\n            id='filtered_notifications_banner.title'\n            defaultMessage='Filtered notifications'\n          />\n        </strong>\n        <span>\n          <FormattedMessage\n            id='filtered_notifications_banner.pending_requests'\n            defaultMessage='From {count, plural, =0 {no one} one {one person} other {# people}} you may know'\n            values={{ count: policy.summary.pending_requests_count }}\n          />\n        </span>\n      </div>\n    </Link>\n  );\n};\n","import * as React from \"react\";\nconst SvgSettings = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 20, viewBox: \"0 -960 960 960\", width: 20, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"m403-96-22-114q-23-9-44.5-21T296-259l-110 37-77-133 87-76q-2-12-3-24t-1-25q0-13 1-25t3-24l-87-76 77-133 110 37q19-16 40.5-28t44.5-21l22-114h154l22 114q23 9 44.5 21t40.5 28l110-37 77 133-87 76q2 12 3 24t1 25q0 13-1 25t-3 24l87 76-77 133-110-37q-19 16-40.5 28T579-210L557-96H403Zm59-72h36l19-99q38-7 71-26t57-48l96 32 18-30-76-67q6-17 9.5-35.5T696-480q0-20-3.5-38.5T683-554l76-67-18-30-96 32q-24-29-57-48t-71-26l-19-99h-36l-19 99q-38 7-71 26t-57 48l-96-32-18 30 76 67q-6 17-9.5 35.5T264-480q0 20 3.5 38.5T277-406l-76 67 18 30 96-32q24 29 57 48t71 26l19 99Zm18-168q60 0 102-42t42-102q0-60-42-102t-102-42q-60 0-102 42t-42 102q0 60 42 102t102 42Zm0-144Z\" }));\nexport default SvgSettings;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport SettingsIcon from '@/material-icons/400-20px/settings.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { requestBrowserPermission } from 'mastodon/actions/notifications';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { Button } from 'mastodon/components/button';\nimport { Icon }  from 'mastodon/components/icon';\nimport { IconButton } from 'mastodon/components/icon_button';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nclass NotificationsPermissionBanner extends PureComponent {\n\n  static propTypes = {\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleClick = () => {\n    this.props.dispatch(requestBrowserPermission());\n  };\n\n  handleClose = () => {\n    this.props.dispatch(changeSetting(['notifications', 'dismissPermissionBanner'], true));\n  };\n\n  render () {\n    const { intl } = this.props;\n\n    return (\n      <div className='notifications-permission-banner'>\n        <div className='notifications-permission-banner__close'>\n          <IconButton icon='times' iconComponent={CloseIcon} onClick={this.handleClose} title={intl.formatMessage(messages.close)} />\n        </div>\n\n        <h2><FormattedMessage id='notifications_permission_banner.title' defaultMessage='Never miss a thing' /></h2>\n        <p><FormattedMessage id='notifications_permission_banner.how_to_control' defaultMessage=\"To receive notifications when Mastodon isn't open, enable desktop notifications. You can control precisely which types of interactions generate desktop notifications through the {icon} button above once they're enabled.\" values={{ icon: <Icon id='sliders' icon={SettingsIcon} /> }} /></p>\n        <Button onClick={this.handleClick}><FormattedMessage id='notifications_permission_banner.enable' defaultMessage='Enable desktop notifications' /></Button>\n      </div>\n    );\n  }\n\n}\n\nexport default connect()(injectIntl(NotificationsPermissionBanner));\n","import * as React from \"react\";\nconst SvgDeleteForever = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"m376-300 104-104 104 104 56-56-104-104 104-104-56-56-104 104-104-104-56 56 104 104-104 104 56 56Zm-96 180q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm400-600H280v520h400v-520Zm-400 0v520-520Z\" }));\nexport default SvgDeleteForever;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport DeleteForeverIcon from '@/material-icons/400-24px/delete_forever.svg?react';\nimport { Icon }  from 'mastodon/components/icon';\n\nexport default class ClearColumnButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__setting-btn' tabIndex={0} onClick={this.props.onClick}><Icon id='eraser' icon={DeleteForeverIcon} /> <FormattedMessage id='notifications.clear' defaultMessage='Clear notifications' /></button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nexport default class GrantPermissionButton extends PureComponent {\n\n  static propTypes = {\n    onClick: PropTypes.func.isRequired,\n  };\n\n  render () {\n    return (\n      <button className='text-btn column-header__permission-btn' tabIndex={0} onClick={this.props.onClick}>\n        <FormattedMessage id='notifications.grant_permission' defaultMessage='Grant permission.' />\n      </button>\n    );\n  }\n\n}\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { PERMISSION_MANAGE_USERS, PERMISSION_MANAGE_REPORTS } from 'mastodon/permissions';\n\nimport ClearColumnButton from './clear_column_button';\nimport GrantPermissionButton from './grant_permission_button';\nimport { PolicyControls } from './policy_controls';\nimport SettingToggle from './setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n  static propTypes = {\n    identity: identityContextPropShape,\n    settings: ImmutablePropTypes.map.isRequired,\n    pushSettings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    onClear: PropTypes.func.isRequired,\n    onRequestNotificationPermission: PropTypes.func,\n    alertsEnabled: PropTypes.bool,\n    browserSupport: PropTypes.bool,\n    browserPermission: PropTypes.string,\n  };\n\n  onPushChange = (path, checked) => {\n    this.props.onChange(['push', ...path], checked);\n  };\n\n  render () {\n    const { settings, pushSettings, onChange, onClear, alertsEnabled, browserSupport, browserPermission, onRequestNotificationPermission } = this.props;\n\n    const filterAdvancedStr = <FormattedMessage id='notifications.column_settings.filter_bar.advanced' defaultMessage='Display all categories' />;\n    const unreadMarkersShowStr = <FormattedMessage id='notifications.column_settings.unread_notifications.highlight' defaultMessage='Highlight unread notifications' />;\n    const alertStr = <FormattedMessage id='notifications.column_settings.alert' defaultMessage='Desktop notifications' />;\n    const showStr = <FormattedMessage id='notifications.column_settings.show' defaultMessage='Show in column' />;\n    const soundStr = <FormattedMessage id='notifications.column_settings.sound' defaultMessage='Play sound' />;\n    const groupStr = <FormattedMessage id='notifications.column_settings.group' defaultMessage='Group' />;\n\n    const showPushSettings = pushSettings.get('browserSupport') && pushSettings.get('isSubscribed');\n    const pushStr = showPushSettings && <FormattedMessage id='notifications.column_settings.push' defaultMessage='Push notifications' />;\n\n    return (\n      <div className='column-settings'>\n        <section>\n          <ClearColumnButton onClick={onClear} />\n        </section>\n\n        {alertsEnabled && browserSupport && browserPermission === 'denied' && (\n          <section>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_denied' defaultMessage='Desktop notifications are unavailable due to previously denied browser permissions request' />\n            </span>\n          </section>\n        )}\n\n        {alertsEnabled && browserSupport && browserPermission === 'default' && (\n          <section>\n            <span className='warning-hint'>\n              <FormattedMessage id='notifications.permission_required' defaultMessage='Desktop notifications are unavailable because the required permission has not been granted.' /> <GrantPermissionButton onClick={onRequestNotificationPermission} />\n            </span>\n          </section>\n        )}\n\n        <PolicyControls />\n\n        <section role='group' aria-labelledby='notifications-unread-markers'>\n          <h3 id='notifications-unread-markers'>\n            <FormattedMessage id='notifications.column_settings.unread_notifications.category' defaultMessage='Unread notifications' />\n          </h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='unread-notification-markers' prefix='notifications' settings={settings} settingPath={['showUnread']} onChange={onChange} label={unreadMarkersShowStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-filter-bar'>\n          <h3 id='notifications-filter-bar'>\n            <FormattedMessage id='notifications.column_settings.filter_bar.category' defaultMessage='Quick filter bar' />\n          </h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle id='advanced-filter-bar' prefix='notifications' settings={settings} settingPath={['quickFilter', 'advanced']} onChange={onChange} label={filterAdvancedStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow'>\n          <h3 id='notifications-follow'><FormattedMessage id='notifications.column_settings.follow' defaultMessage='New followers:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow']} onChange={onChange} label={soundStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['group', 'follow']} onChange={onChange} label={groupStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-follow-request'>\n          <h3 id='notifications-follow-request'><FormattedMessage id='notifications.column_settings.follow_request' defaultMessage='New follow requests:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'follow_request']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'follow_request']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'follow_request']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'follow_request']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-favourite'>\n          <h3 id='notifications-favourite'><FormattedMessage id='notifications.column_settings.favourite' defaultMessage='Favorites:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'favourite']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'favourite']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'favourite']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'favourite']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-mention'>\n          <h3 id='notifications-mention'><FormattedMessage id='notifications.column_settings.mention' defaultMessage='Mentions:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'mention']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'mention']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'mention']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'mention']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-reblog'>\n          <h3 id='notifications-reblog'><FormattedMessage id='notifications.column_settings.reblog' defaultMessage='Boosts:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'reblog']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'reblog']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'reblog']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'reblog']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-poll'>\n          <h3 id='notifications-poll'><FormattedMessage id='notifications.column_settings.poll' defaultMessage='Poll results:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'poll']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'poll']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'poll']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'poll']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-status'>\n          <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.status' defaultMessage='New posts:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'status']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'status']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'status']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'status']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        <section role='group' aria-labelledby='notifications-update'>\n          <h3 id='notifications-update'><FormattedMessage id='notifications.column_settings.update' defaultMessage='Edits:' /></h3>\n\n          <div className='column-settings__row'>\n            <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'update']} onChange={onChange} label={alertStr} />\n            {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'update']} onChange={this.onPushChange} label={pushStr} />}\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'update']} onChange={onChange} label={showStr} />\n            <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'update']} onChange={onChange} label={soundStr} />\n          </div>\n        </section>\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) && (\n          <section role='group' aria-labelledby='notifications-admin-sign-up'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.sign_up' defaultMessage='New sign-ups:' /></h3>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.sign_up']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.sign_up']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.sign_up']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.sign_up']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n\n        {((this.props.identity.permissions & PERMISSION_MANAGE_REPORTS) === PERMISSION_MANAGE_REPORTS) && (\n          <section role='group' aria-labelledby='notifications-admin-report'>\n            <h3 id='notifications-status'><FormattedMessage id='notifications.column_settings.admin.report' defaultMessage='New reports:' /></h3>\n\n            <div className='column-settings__row'>\n              <SettingToggle disabled={browserPermission === 'denied'} prefix='notifications_desktop' settings={settings} settingPath={['alerts', 'admin.report']} onChange={onChange} label={alertStr} />\n              {showPushSettings && <SettingToggle prefix='notifications_push' settings={pushSettings} settingPath={['alerts', 'admin.report']} onChange={this.onPushChange} label={pushStr} />}\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['shows', 'admin.report']} onChange={onChange} label={showStr} />\n              <SettingToggle prefix='notifications' settings={settings} settingPath={['sounds', 'admin.report']} onChange={onChange} label={soundStr} />\n            </div>\n          </section>\n        )}\n      </div>\n    );\n  }\n\n}\n\nexport default withIdentity(ColumnSettings);\n","import { defineMessages, injectIntl } from 'react-intl';\n\nimport { connect } from 'react-redux';\n\nimport { openModal } from 'mastodon/actions/modal';\nimport { fetchNotifications , setNotificationsFilter } from 'mastodon/actions/notification_groups';\n\nimport { showAlert } from '../../../actions/alerts';\nimport { requestBrowserPermission } from '../../../actions/notifications';\nimport { changeAlerts as changePushNotifications } from '../../../actions/push_notifications';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst messages = defineMessages({\n  permissionDenied: { id: 'notifications.permission_denied_alert', defaultMessage: 'Desktop notifications can\\'t be enabled, as browser permission has been denied before' },\n});\n\n/**\n * @param {import('mastodon/store').RootState} state\n */\nconst mapStateToProps = state => ({\n  settings: state.getIn(['settings', 'notifications']),\n  pushSettings: state.get('push_notifications'),\n  alertsEnabled: state.getIn(['settings', 'notifications', 'alerts']).includes(true),\n  browserSupport: state.getIn(['notifications', 'browserSupport']),\n  browserPermission: state.getIn(['notifications', 'browserPermission']),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n\n  onChange (path, checked) {\n    if (path[0] === 'push') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changePushNotifications(path.slice(1), checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changePushNotifications(path.slice(1), checked));\n      }\n    } else if (path[0] === 'quickFilter') {\n      dispatch(changeSetting(['notifications', ...path], checked));\n      dispatch(setNotificationsFilter('all'));\n    } else if (path[0] === 'alerts' && checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n      if (checked && typeof window.Notification !== 'undefined' && Notification.permission !== 'granted') {\n        dispatch(requestBrowserPermission((permission) => {\n          if (permission === 'granted') {\n            dispatch(changeSetting(['notifications', ...path], checked));\n          } else {\n            dispatch(showAlert({ message: messages.permissionDenied }));\n          }\n        }));\n      } else {\n        dispatch(changeSetting(['notifications', ...path], checked));\n      }\n    } else {\n      dispatch(changeSetting(['notifications', ...path], checked));\n\n      if(path[0] === 'group' && path[1] === 'follow') {\n        dispatch(fetchNotifications());\n      }\n    }\n  },\n\n  onClear () {\n    dispatch(openModal({ modalType: 'CONFIRM_CLEAR_NOTIFICATIONS' }));\n  },\n\n  onRequestNotificationPermission () {\n    dispatch(requestBrowserPermission());\n  },\n\n});\n\nexport default injectIntl(connect(mapStateToProps, mapDispatchToProps)(ColumnSettings));\n","import { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport FlagIcon from '@/material-icons/400-24px/flag-fill.svg?react';\nimport { Icon } from 'mastodon/components/icon';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport type { NotificationGroupAdminReport } from 'mastodon/models/notification_group';\nimport { useAppSelector } from 'mastodon/store';\n\n// This needs to be kept in sync with app/models/report.rb\nconst messages = defineMessages({\n  other: {\n    id: 'report_notification.categories.other_sentence',\n    defaultMessage: 'other',\n  },\n  spam: {\n    id: 'report_notification.categories.spam_sentence',\n    defaultMessage: 'spam',\n  },\n  legal: {\n    id: 'report_notification.categories.legal_sentence',\n    defaultMessage: 'illegal content',\n  },\n  violation: {\n    id: 'report_notification.categories.violation_sentence',\n    defaultMessage: 'rule violation',\n  },\n});\n\nexport const NotificationAdminReport: React.FC<{\n  notification: NotificationGroupAdminReport;\n  unread?: boolean;\n}> = ({ notification, notification: { report }, unread }) => {\n  const intl = useIntl();\n  const targetAccount = useAppSelector((state) =>\n    state.accounts.get(report.targetAccountId),\n  );\n  const account = useAppSelector((state) =>\n    state.accounts.get(notification.sampleAccountIds[0] ?? '0'),\n  );\n\n  if (!account || !targetAccount) return null;\n\n  const domain = account.acct.split('@')[1];\n\n  const values = {\n    name: <bdi>{domain ?? `@${account.acct}`}</bdi>,\n    target: <bdi>@{targetAccount.acct}</bdi>,\n    category: intl.formatMessage(messages[report.category]),\n    count: report.status_ids.length,\n  };\n\n  let message;\n\n  if (report.status_ids.length > 0) {\n    if (report.category === 'other') {\n      message = (\n        <FormattedMessage\n          id='notification.admin.report_account_other'\n          defaultMessage='{name} reported {count, plural, one {one post} other {# posts}} from {target}'\n          values={values}\n        />\n      );\n    } else {\n      message = (\n        <FormattedMessage\n          id='notification.admin.report_account'\n          defaultMessage='{name} reported {count, plural, one {one post} other {# posts}} from {target} for {category}'\n          values={values}\n        />\n      );\n    }\n  } else {\n    if (report.category === 'other') {\n      message = (\n        <FormattedMessage\n          id='notification.admin.report_statuses_other'\n          defaultMessage='{name} reported {target}'\n          values={values}\n        />\n      );\n    } else {\n      message = (\n        <FormattedMessage\n          id='notification.admin.report_statuses'\n          defaultMessage='{name} reported {target} for {category}'\n          values={values}\n        />\n      );\n    }\n  }\n\n  return (\n    <a\n      href={`/admin/reports/${report.id}`}\n      target='_blank'\n      rel='noopener noreferrer'\n      className={classNames(\n        'notification-group notification-group--link notification-group--admin-report focusable',\n        { 'notification-group--unread': unread },\n      )}\n    >\n      <div className='notification-group__icon'>\n        <Icon id='flag' icon={FlagIcon} />\n      </div>\n\n      <div className='notification-group__main'>\n        <div className='notification-group__main__header'>\n          <div className='notification-group__main__header__label'>\n            {message}\n            <RelativeTimestamp timestamp={report.created_at} />\n          </div>\n        </div>\n\n        {report.comment.length > 0 && (\n          <div className='notification-group__embedded-status__content'>\n            “{report.comment}”\n          </div>\n        )}\n      </div>\n    </a>\n  );\n};\n","import { useMemo } from 'react';\nimport type { JSX } from 'react';\n\nimport classNames from 'classnames';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport { replyComposeById } from 'mastodon/actions/compose';\nimport { navigateToStatus } from 'mastodon/actions/statuses';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { AvatarGroup } from 'mastodon/components/avatar_group';\nimport type { IconProp } from 'mastodon/components/icon';\nimport { Icon } from 'mastodon/components/icon';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { NOTIFICATIONS_GROUP_MAX_AVATARS } from 'mastodon/models/notification_group';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { DisplayedName } from './displayed_name';\nimport { EmbeddedStatus } from './embedded_status';\n\nconst AVATAR_SIZE = 28;\n\nexport const AvatarById: React.FC<{ accountId: string }> = ({ accountId }) => {\n  const account = useAppSelector((state) => state.accounts.get(accountId));\n\n  if (!account) return null;\n\n  return <Avatar withLink account={account} size={AVATAR_SIZE} />;\n};\n\nexport type LabelRenderer = (\n  displayedName: JSX.Element,\n  total: number,\n  seeMoreHref?: string,\n) => JSX.Element;\n\nexport const NotificationGroupWithStatus: React.FC<{\n  icon: IconProp;\n  iconId: string;\n  statusId?: string;\n  actions?: JSX.Element;\n  count: number;\n  accountIds: string[];\n  timestamp: string;\n  labelRenderer: LabelRenderer;\n  labelSeeMoreHref?: string;\n  type: string;\n  unread: boolean;\n  additionalContent?: JSX.Element;\n}> = ({\n  icon,\n  iconId,\n  timestamp,\n  accountIds,\n  actions,\n  count,\n  statusId,\n  labelRenderer,\n  labelSeeMoreHref,\n  type,\n  unread,\n  additionalContent,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const label = useMemo(\n    () =>\n      labelRenderer(\n        <DisplayedName accountIds={accountIds} />,\n        count,\n        labelSeeMoreHref,\n      ),\n    [labelRenderer, accountIds, count, labelSeeMoreHref],\n  );\n\n  const isPrivateMention = useAppSelector(\n    (state) => state.statuses.getIn([statusId, 'visibility']) === 'direct',\n  );\n\n  const handlers = useMemo(\n    () => ({\n      open: () => {\n        dispatch(navigateToStatus(statusId));\n      },\n\n      reply: () => {\n        dispatch(replyComposeById(statusId));\n      },\n    }),\n    [dispatch, statusId],\n  );\n\n  return (\n    <HotKeys handlers={handlers}>\n      <div\n        role='button'\n        className={classNames(\n          `notification-group focusable notification-group--${type}`,\n          {\n            'notification-group--unread': unread,\n            'notification-group--direct': isPrivateMention,\n          },\n        )}\n        tabIndex={0}\n      >\n        <div className='notification-group__icon'>\n          <Icon icon={icon} id={iconId} />\n        </div>\n\n        <div className='notification-group__main'>\n          <div className='notification-group__main__header'>\n            <div className='notification-group__main__header__wrapper'>\n              <AvatarGroup avatarHeight={AVATAR_SIZE}>\n                {accountIds\n                  .slice(0, NOTIFICATIONS_GROUP_MAX_AVATARS)\n                  .map((id) => (\n                    <AvatarById key={id} accountId={id} />\n                  ))}\n              </AvatarGroup>\n\n              {actions && (\n                <div className='notification-group__actions'>{actions}</div>\n              )}\n            </div>\n\n            <div className='notification-group__main__header__label'>\n              {label}\n              {timestamp && (\n                <>\n                  <span className='notification-group__main__header__label-separator'>\n                    &middot;\n                  </span>\n                  <RelativeTimestamp timestamp={timestamp} />\n                </>\n              )}\n            </div>\n          </div>\n\n          {statusId && (\n            <div className='notification-group__main__status'>\n              <EmbeddedStatus statusId={statusId} />\n            </div>\n          )}\n\n          {additionalContent && (\n            <div className='notification-group__main__additional-content'>\n              {additionalContent}\n            </div>\n          )}\n        </div>\n      </div>\n    </HotKeys>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport PersonAddIcon from '@/material-icons/400-24px/person_add-fill.svg?react';\nimport type { NotificationGroupAdminSignUp } from 'mastodon/models/notification_group';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationGroupWithStatus } from './notification_group_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName, total) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.admin.sign_up'\n        defaultMessage='{name} signed up'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.admin.sign_up.name_and_others'\n      defaultMessage='{name} and {count, plural, one {# other} other {# others}} signed up'\n      values={{\n        name: displayedName,\n        count: total - 1,\n      }}\n    />\n  );\n};\n\nexport const NotificationAdminSignUp: React.FC<{\n  notification: NotificationGroupAdminSignUp;\n  unread: boolean;\n}> = ({ notification, unread }) => (\n  <NotificationGroupWithStatus\n    type='admin-sign-up'\n    icon={PersonAddIcon}\n    iconId='person-add'\n    accountIds={notification.sampleAccountIds}\n    timestamp={notification.latest_page_notification_at}\n    count={notification.notifications_count}\n    labelRenderer={labelRenderer}\n    unread={unread}\n  />\n);\n","import * as React from \"react\";\nconst SvgCelebration = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"m80-80 200-560 360 360L80-80Zm132-132 282-100-182-182-100 282Zm370-246-42-42 224-224q32-32 77-32t77 32l24 24-42 42-24-24q-14-14-35-14t-35 14L582-458ZM422-618l-42-42 24-24q14-14 14-34t-14-34l-26-26 42-42 26 26q32 32 32 76t-32 76l-24 24Zm80 80-42-42 144-144q14-14 14-35t-14-35l-64-64 42-42 64 64q32 32 32 77t-32 77L502-538Zm160 160-42-42 64-64q32-32 77-32t77 32l64 64-42 42-64-64q-14-14-35-14t-35 14l-64 64ZM212-212Z\" }));\nexport default SvgCelebration;\n","import { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport CelebrationIcon from '@/material-icons/400-24px/celebration.svg?react';\nimport { openModal } from 'mastodon/actions/modal';\nimport { Icon } from 'mastodon/components/icon';\nimport type { NotificationGroupAnnualReport } from 'mastodon/models/notification_group';\nimport { useAppDispatch } from 'mastodon/store';\n\nexport const NotificationAnnualReport: React.FC<{\n  notification: NotificationGroupAnnualReport;\n  unread: boolean;\n}> = ({ notification: { annualReport }, unread }) => {\n  const dispatch = useAppDispatch();\n  const year = annualReport.year;\n\n  const handleClick = useCallback(() => {\n    dispatch(\n      openModal({\n        modalType: 'ANNUAL_REPORT',\n        modalProps: { year },\n      }),\n    );\n  }, [dispatch, year]);\n\n  return (\n    <div\n      role='button'\n      className={classNames(\n        'notification-group notification-group--link notification-group--annual-report focusable',\n        { 'notification-group--unread': unread },\n      )}\n      tabIndex={0}\n    >\n      <div className='notification-group__icon'>\n        <Icon id='celebration' icon={CelebrationIcon} />\n      </div>\n\n      <div className='notification-group__main'>\n        <p>\n          <FormattedMessage\n            id='notification.annual_report.message'\n            defaultMessage=\"Your {year} #Wrapstodon awaits! Unveil your year's highlights and memorable moments on Mastodon!\"\n            values={{ year }}\n          />\n        </p>\n        <button onClick={handleClick} className='link-button'>\n          <FormattedMessage\n            id='notification.annual_report.view'\n            defaultMessage='View #Wrapstodon'\n          />\n        </button>\n      </div>\n    </div>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport StarIcon from '@/material-icons/400-24px/star-fill.svg?react';\nimport type { NotificationGroupFavourite } from 'mastodon/models/notification_group';\nimport { useAppSelector } from 'mastodon/store';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationGroupWithStatus } from './notification_group_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName, total, seeMoreHref) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.favourite'\n        defaultMessage='{name} favorited your post'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.favourite.name_and_others_with_link'\n      defaultMessage='{name} and <a>{count, plural, one {# other} other {# others}}</a> favorited your post'\n      values={{\n        name: displayedName,\n        count: total - 1,\n        a: (chunks) =>\n          seeMoreHref ? <Link to={seeMoreHref}>{chunks}</Link> : chunks,\n      }}\n    />\n  );\n};\n\nconst privateLabelRenderer: LabelRenderer = (\n  displayedName,\n  total,\n  seeMoreHref,\n) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.favourite_pm'\n        defaultMessage='{name} favorited your private mention'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.favourite_pm.name_and_others_with_link'\n      defaultMessage='{name} and <a>{count, plural, one {# other} other {# others}}</a> favorited your private mention'\n      values={{\n        name: displayedName,\n        count: total - 1,\n        a: (chunks) =>\n          seeMoreHref ? <Link to={seeMoreHref}>{chunks}</Link> : chunks,\n      }}\n    />\n  );\n};\n\nexport const NotificationFavourite: React.FC<{\n  notification: NotificationGroupFavourite;\n  unread: boolean;\n}> = ({ notification, unread }) => {\n  const { statusId } = notification;\n  const statusAccount = useAppSelector(\n    (state) =>\n      state.accounts.get(state.statuses.getIn([statusId, 'account']) as string)\n        ?.acct,\n  );\n\n  const isPrivateMention = useAppSelector(\n    (state) => state.statuses.getIn([statusId, 'visibility']) === 'direct',\n  );\n\n  return (\n    <NotificationGroupWithStatus\n      type='favourite'\n      icon={StarIcon}\n      iconId='star'\n      accountIds={notification.sampleAccountIds}\n      statusId={notification.statusId}\n      timestamp={notification.latest_page_notification_at}\n      count={notification.notifications_count}\n      labelRenderer={isPrivateMention ? privateLabelRenderer : labelRenderer}\n      labelSeeMoreHref={\n        statusAccount ? `/@${statusAccount}/${statusId}/favourites` : undefined\n      }\n      unread={unread}\n    />\n  );\n};\n","import type { JSX } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport PersonAddIcon from '@/material-icons/400-24px/person_add-fill.svg?react';\nimport { FollowersCounter } from 'mastodon/components/counters';\nimport { FollowButton } from 'mastodon/components/follow_button';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { me } from 'mastodon/initial_state';\nimport type { NotificationGroupFollow } from 'mastodon/models/notification_group';\nimport { useAppSelector } from 'mastodon/store';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationGroupWithStatus } from './notification_group_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName, total, seeMoreHref) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.follow'\n        defaultMessage='{name} followed you'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.follow.name_and_others'\n      defaultMessage='{name} and <a>{count, plural, one {# other} other {# others}}</a> followed you'\n      values={{\n        name: displayedName,\n        count: total - 1,\n        a: (chunks) =>\n          seeMoreHref ? <Link to={seeMoreHref}>{chunks}</Link> : chunks,\n      }}\n    />\n  );\n};\n\nconst FollowerCount: React.FC<{ accountId: string }> = ({ accountId }) => {\n  const account = useAppSelector((s) => s.accounts.get(accountId));\n\n  if (!account) return null;\n\n  return (\n    <ShortNumber value={account.followers_count} renderer={FollowersCounter} />\n  );\n};\n\nexport const NotificationFollow: React.FC<{\n  notification: NotificationGroupFollow;\n  unread: boolean;\n}> = ({ notification, unread }) => {\n  const username = useAppSelector(\n    (state) => state.accounts.getIn([me, 'username']) as string,\n  );\n\n  let actions: JSX.Element | undefined;\n  let additionalContent: JSX.Element | undefined;\n\n  if (notification.sampleAccountIds.length === 1) {\n    // only display those if the group contains 1 account, otherwise it does not makes sense\n    const account = notification.sampleAccountIds[0];\n\n    if (account) {\n      actions = (\n        <FollowButton compact accountId={notification.sampleAccountIds[0]} />\n      );\n      additionalContent = <FollowerCount accountId={account} />;\n    }\n  }\n\n  return (\n    <NotificationGroupWithStatus\n      type='follow'\n      icon={PersonAddIcon}\n      iconId='person-add'\n      accountIds={notification.sampleAccountIds}\n      timestamp={notification.latest_page_notification_at}\n      count={notification.notifications_count}\n      labelRenderer={labelRenderer}\n      labelSeeMoreHref={`/@${username}/followers`}\n      unread={unread}\n      actions={actions}\n      additionalContent={additionalContent}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport CheckIcon from '@/material-icons/400-24px/check.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport PersonAddIcon from '@/material-icons/400-24px/person_add-fill.svg?react';\nimport {\n  authorizeFollowRequest,\n  rejectFollowRequest,\n} from 'mastodon/actions/accounts';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport type { NotificationGroupFollowRequest } from 'mastodon/models/notification_group';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationGroupWithStatus } from './notification_group_with_status';\n\nconst messages = defineMessages({\n  authorize: { id: 'follow_request.authorize', defaultMessage: 'Authorize' },\n  reject: { id: 'follow_request.reject', defaultMessage: 'Reject' },\n});\n\nconst labelRenderer: LabelRenderer = (displayedName, total) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.follow_request'\n        defaultMessage='{name} has requested to follow you'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.follow_request.name_and_others'\n      defaultMessage='{name} and {count, plural, one {# other} other {# others}} has requested to follow you'\n      values={{\n        name: displayedName,\n        count: total - 1,\n      }}\n    />\n  );\n};\n\nexport const NotificationFollowRequest: React.FC<{\n  notification: NotificationGroupFollowRequest;\n  unread: boolean;\n}> = ({ notification, unread }) => {\n  const intl = useIntl();\n\n  const dispatch = useAppDispatch();\n\n  const onAuthorize = useCallback(() => {\n    dispatch(authorizeFollowRequest(notification.sampleAccountIds[0]));\n  }, [dispatch, notification.sampleAccountIds]);\n\n  const onReject = useCallback(() => {\n    dispatch(rejectFollowRequest(notification.sampleAccountIds[0]));\n  }, [dispatch, notification.sampleAccountIds]);\n\n  const actions = (\n    <>\n      <IconButton\n        title={intl.formatMessage(messages.reject)}\n        icon='times'\n        iconComponent={CloseIcon}\n        onClick={onReject}\n      />\n      <IconButton\n        title={intl.formatMessage(messages.authorize)}\n        icon='check'\n        iconComponent={CheckIcon}\n        onClick={onAuthorize}\n      />\n    </>\n  );\n\n  return (\n    <NotificationGroupWithStatus\n      type='follow-request'\n      icon={PersonAddIcon}\n      iconId='person-add'\n      accountIds={notification.sampleAccountIds}\n      timestamp={notification.latest_page_notification_at}\n      count={notification.notifications_count}\n      labelRenderer={labelRenderer}\n      actions={actions}\n      unread={unread}\n    />\n  );\n};\n","import * as React from \"react\";\nconst SvgReplyFill = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M760-200v-160q0-50-35-85t-85-35H273l144 144-57 56-240-240 240-240 57 56-144 144h367q83 0 141.5 58.5T840-360v160h-80Z\" }));\nexport default SvgReplyFill;\n","import { useMemo } from 'react';\n\nimport classNames from 'classnames';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport { replyComposeById } from 'mastodon/actions/compose';\nimport { toggleReblog, toggleFavourite } from 'mastodon/actions/interactions';\nimport {\n  navigateToStatus,\n  toggleStatusSpoilers,\n} from 'mastodon/actions/statuses';\nimport type { IconProp } from 'mastodon/components/icon';\nimport { Icon } from 'mastodon/components/icon';\nimport { StatusQuoteManager } from 'mastodon/components/status_quoted';\nimport { getStatusHidden } from 'mastodon/selectors/filters';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { DisplayedName } from './displayed_name';\nimport type { LabelRenderer } from './notification_group_with_status';\n\nexport const NotificationWithStatus: React.FC<{\n  type: string;\n  icon: IconProp;\n  iconId: string;\n  accountIds: string[];\n  statusId: string | undefined;\n  count: number;\n  labelRenderer: LabelRenderer;\n  unread: boolean;\n}> = ({\n  icon,\n  iconId,\n  accountIds,\n  statusId,\n  count,\n  labelRenderer,\n  type,\n  unread,\n}) => {\n  const dispatch = useAppDispatch();\n\n  const label = useMemo(\n    () => labelRenderer(<DisplayedName accountIds={accountIds} />, count),\n    [labelRenderer, accountIds, count],\n  );\n\n  const isPrivateMention = useAppSelector(\n    (state) => state.statuses.getIn([statusId, 'visibility']) === 'direct',\n  );\n\n  const isFiltered = useAppSelector(\n    (state) =>\n      statusId &&\n      getStatusHidden(state, { id: statusId, contextType: 'notifications' }),\n  );\n\n  const handlers = useMemo(\n    () => ({\n      open: () => {\n        dispatch(navigateToStatus(statusId));\n      },\n\n      reply: () => {\n        dispatch(replyComposeById(statusId));\n      },\n\n      boost: () => {\n        dispatch(toggleReblog(statusId));\n      },\n\n      favourite: () => {\n        dispatch(toggleFavourite(statusId));\n      },\n\n      toggleHidden: () => {\n        dispatch(toggleStatusSpoilers(statusId));\n      },\n    }),\n    [dispatch, statusId],\n  );\n\n  if (!statusId || isFiltered) return null;\n\n  return (\n    <HotKeys handlers={handlers}>\n      <div\n        role='button'\n        className={classNames(\n          `notification-ungrouped focusable notification-ungrouped--${type}`,\n          {\n            'notification-ungrouped--unread': unread,\n            'notification-ungrouped--direct': isPrivateMention,\n          },\n        )}\n        tabIndex={0}\n      >\n        <div className='notification-ungrouped__header'>\n          <div className='notification-ungrouped__header__icon'>\n            <Icon icon={icon} id={iconId} />\n          </div>\n          {label}\n        </div>\n\n        <StatusQuoteManager\n          id={statusId}\n          contextType='notifications'\n          withDismiss\n          skipPrepend\n          avatarSize={40}\n          unfocusable\n        />\n      </div>\n    </HotKeys>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport { isEqual } from 'lodash';\n\nimport AlternateEmailIcon from '@/material-icons/400-24px/alternate_email.svg?react';\nimport ReplyIcon from '@/material-icons/400-24px/reply-fill.svg?react';\nimport { me } from 'mastodon/initial_state';\nimport type { NotificationGroupMention } from 'mastodon/models/notification_group';\nimport { useAppSelector } from 'mastodon/store';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationWithStatus } from './notification_with_status';\n\nconst mentionLabelRenderer: LabelRenderer = () => (\n  <FormattedMessage id='notification.label.mention' defaultMessage='Mention' />\n);\n\nconst privateMentionLabelRenderer: LabelRenderer = () => (\n  <FormattedMessage\n    id='notification.label.private_mention'\n    defaultMessage='Private mention'\n  />\n);\n\nconst replyLabelRenderer: LabelRenderer = () => (\n  <FormattedMessage id='notification.label.reply' defaultMessage='Reply' />\n);\n\nconst privateReplyLabelRenderer: LabelRenderer = () => (\n  <FormattedMessage\n    id='notification.label.private_reply'\n    defaultMessage='Private reply'\n  />\n);\n\nexport const NotificationMention: React.FC<{\n  notification: NotificationGroupMention;\n  unread: boolean;\n}> = ({ notification, unread }) => {\n  const [isDirect, isReply] = useAppSelector((state) => {\n    const status = notification.statusId\n      ? state.statuses.get(notification.statusId)\n      : undefined;\n\n    if (!status) return [false, false] as const;\n\n    return [\n      status.get('visibility') === 'direct',\n      status.get('in_reply_to_account_id') === me,\n    ] as const;\n  }, isEqual);\n\n  let labelRenderer = mentionLabelRenderer;\n\n  if (isReply && isDirect) labelRenderer = privateReplyLabelRenderer;\n  else if (isReply) labelRenderer = replyLabelRenderer;\n  else if (isDirect) labelRenderer = privateMentionLabelRenderer;\n\n  return (\n    <NotificationWithStatus\n      type='mention'\n      icon={isReply ? ReplyIcon : AlternateEmailIcon}\n      iconId='reply'\n      accountIds={notification.sampleAccountIds}\n      count={notification.notifications_count}\n      statusId={notification.statusId}\n      labelRenderer={labelRenderer}\n      unread={unread}\n    />\n  );\n};\n","import { ModerationWarning } from 'mastodon/features/notifications/components/moderation_warning';\nimport type { NotificationGroupModerationWarning } from 'mastodon/models/notification_group';\n\nexport const NotificationModerationWarning: React.FC<{\n  notification: NotificationGroupModerationWarning;\n  unread: boolean;\n}> = ({ notification: { moderationWarning }, unread }) => (\n  <ModerationWarning\n    action={moderationWarning.action}\n    id={moderationWarning.id}\n    unread={unread}\n  />\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport BarChart4BarsIcon from '@/material-icons/400-20px/bar_chart_4_bars.svg?react';\nimport { me } from 'mastodon/initial_state';\nimport type { NotificationGroupPoll } from 'mastodon/models/notification_group';\n\nimport { NotificationWithStatus } from './notification_with_status';\n\nconst labelRendererOther = () => (\n  <FormattedMessage\n    id='notification.poll'\n    defaultMessage='A poll you voted in has ended'\n  />\n);\n\nconst labelRendererOwn = () => (\n  <FormattedMessage\n    id='notification.own_poll'\n    defaultMessage='Your poll has ended'\n  />\n);\n\nexport const NotificationPoll: React.FC<{\n  notification: NotificationGroupPoll;\n  unread: boolean;\n}> = ({ notification, unread }) => (\n  <NotificationWithStatus\n    type='poll'\n    icon={BarChart4BarsIcon}\n    iconId='bar-chart-4-bars'\n    accountIds={notification.sampleAccountIds}\n    count={notification.notifications_count}\n    statusId={notification.statusId}\n    labelRenderer={\n      notification.sampleAccountIds[0] === me\n        ? labelRendererOwn\n        : labelRendererOther\n    }\n    unread={unread}\n  />\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\nimport type { NotificationGroupReblog } from 'mastodon/models/notification_group';\nimport { useAppSelector } from 'mastodon/store';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationGroupWithStatus } from './notification_group_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName, total, seeMoreHref) => {\n  if (total === 1)\n    return (\n      <FormattedMessage\n        id='notification.reblog'\n        defaultMessage='{name} boosted your post'\n        values={{ name: displayedName }}\n      />\n    );\n\n  return (\n    <FormattedMessage\n      id='notification.reblog.name_and_others_with_link'\n      defaultMessage='{name} and <a>{count, plural, one {# other} other {# others}}</a> boosted your post'\n      values={{\n        name: displayedName,\n        count: total - 1,\n        a: (chunks) =>\n          seeMoreHref ? <Link to={seeMoreHref}>{chunks}</Link> : chunks,\n      }}\n    />\n  );\n};\n\nexport const NotificationReblog: React.FC<{\n  notification: NotificationGroupReblog;\n  unread: boolean;\n}> = ({ notification, unread }) => {\n  const { statusId } = notification;\n  const statusAccount = useAppSelector(\n    (state) =>\n      state.accounts.get(state.statuses.getIn([statusId, 'account']) as string)\n        ?.acct,\n  );\n\n  return (\n    <NotificationGroupWithStatus\n      type='reblog'\n      icon={RepeatIcon}\n      iconId='repeat'\n      accountIds={notification.sampleAccountIds}\n      statusId={notification.statusId}\n      timestamp={notification.latest_page_notification_at}\n      count={notification.notifications_count}\n      labelRenderer={labelRenderer}\n      labelSeeMoreHref={\n        statusAccount ? `/@${statusAccount}/${statusId}/reblogs` : undefined\n      }\n      unread={unread}\n    />\n  );\n};\n","import { RelationshipsSeveranceEvent } from 'mastodon/features/notifications/components/relationships_severance_event';\nimport type { NotificationGroupSeveredRelationships } from 'mastodon/models/notification_group';\n\nexport const NotificationSeveredRelationships: React.FC<{\n  notification: NotificationGroupSeveredRelationships;\n  unread: boolean;\n}> = ({ notification: { event }, unread }) => (\n  <RelationshipsSeveranceEvent\n    type={event.type}\n    target={event.target_name}\n    followersCount={event.followers_count}\n    followingCount={event.following_count}\n    unread={unread}\n  />\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport NotificationsActiveIcon from '@/material-icons/400-24px/notifications_active-fill.svg?react';\nimport type { NotificationGroupStatus } from 'mastodon/models/notification_group';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationWithStatus } from './notification_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName) => (\n  <FormattedMessage\n    id='notification.status'\n    defaultMessage='{name} just posted'\n    values={{ name: displayedName }}\n  />\n);\n\nexport const NotificationStatus: React.FC<{\n  notification: NotificationGroupStatus;\n  unread: boolean;\n}> = ({ notification, unread }) => (\n  <NotificationWithStatus\n    type='status'\n    icon={NotificationsActiveIcon}\n    iconId='notifications-active'\n    accountIds={notification.sampleAccountIds}\n    count={notification.notifications_count}\n    statusId={notification.statusId}\n    labelRenderer={labelRenderer}\n    unread={unread}\n  />\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport EditIcon from '@/material-icons/400-24px/edit.svg?react';\nimport type { NotificationGroupUpdate } from 'mastodon/models/notification_group';\n\nimport type { LabelRenderer } from './notification_group_with_status';\nimport { NotificationWithStatus } from './notification_with_status';\n\nconst labelRenderer: LabelRenderer = (displayedName) => (\n  <FormattedMessage\n    id='notification.update'\n    defaultMessage='{name} edited a post'\n    values={{ name: displayedName }}\n  />\n);\n\nexport const NotificationUpdate: React.FC<{\n  notification: NotificationGroupUpdate;\n  unread: boolean;\n}> = ({ notification, unread }) => (\n  <NotificationWithStatus\n    type='update'\n    icon={EditIcon}\n    iconId='edit'\n    accountIds={notification.sampleAccountIds}\n    count={notification.notifications_count}\n    statusId={notification.statusId}\n    labelRenderer={labelRenderer}\n    unread={unread}\n  />\n);\n","import { useMemo } from 'react';\n\nimport { HotKeys } from 'react-hotkeys';\n\nimport { navigateToProfile } from 'mastodon/actions/accounts';\nimport { mentionComposeById } from 'mastodon/actions/compose';\nimport type { NotificationGroup as NotificationGroupModel } from 'mastodon/models/notification_group';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { NotificationAdminReport } from './notification_admin_report';\nimport { NotificationAdminSignUp } from './notification_admin_sign_up';\nimport { NotificationAnnualReport } from './notification_annual_report';\nimport { NotificationFavourite } from './notification_favourite';\nimport { NotificationFollow } from './notification_follow';\nimport { NotificationFollowRequest } from './notification_follow_request';\nimport { NotificationMention } from './notification_mention';\nimport { NotificationModerationWarning } from './notification_moderation_warning';\nimport { NotificationPoll } from './notification_poll';\nimport { NotificationReblog } from './notification_reblog';\nimport { NotificationSeveredRelationships } from './notification_severed_relationships';\nimport { NotificationStatus } from './notification_status';\nimport { NotificationUpdate } from './notification_update';\n\nexport const NotificationGroup: React.FC<{\n  notificationGroupId: NotificationGroupModel['group_key'];\n  unread: boolean;\n  onMoveUp: (groupId: string) => void;\n  onMoveDown: (groupId: string) => void;\n}> = ({ notificationGroupId, unread, onMoveUp, onMoveDown }) => {\n  const notificationGroup = useAppSelector((state) =>\n    state.notificationGroups.groups.find(\n      (item) => item.type !== 'gap' && item.group_key === notificationGroupId,\n    ),\n  );\n\n  const dispatch = useAppDispatch();\n\n  const accountId =\n    notificationGroup?.type === 'gap'\n      ? undefined\n      : notificationGroup?.sampleAccountIds[0];\n\n  const handlers = useMemo(\n    () => ({\n      moveUp: () => {\n        onMoveUp(notificationGroupId);\n      },\n\n      moveDown: () => {\n        onMoveDown(notificationGroupId);\n      },\n\n      openProfile: () => {\n        if (accountId) dispatch(navigateToProfile(accountId));\n      },\n\n      mention: () => {\n        if (accountId) dispatch(mentionComposeById(accountId));\n      },\n    }),\n    [dispatch, notificationGroupId, accountId, onMoveUp, onMoveDown],\n  );\n\n  if (!notificationGroup || notificationGroup.type === 'gap') return null;\n\n  let content;\n\n  switch (notificationGroup.type) {\n    case 'reblog':\n      content = (\n        <NotificationReblog unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'favourite':\n      content = (\n        <NotificationFavourite\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'severed_relationships':\n      content = (\n        <NotificationSeveredRelationships\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'mention':\n      content = (\n        <NotificationMention unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'follow':\n      content = (\n        <NotificationFollow unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'follow_request':\n      content = (\n        <NotificationFollowRequest\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'poll':\n      content = (\n        <NotificationPoll unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'status':\n      content = (\n        <NotificationStatus unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'update':\n      content = (\n        <NotificationUpdate unread={unread} notification={notificationGroup} />\n      );\n      break;\n    case 'admin.sign_up':\n      content = (\n        <NotificationAdminSignUp\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'admin.report':\n      content = (\n        <NotificationAdminReport\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'moderation_warning':\n      content = (\n        <NotificationModerationWarning\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    case 'annual_report':\n      content = (\n        <NotificationAnnualReport\n          unread={unread}\n          notification={notificationGroup}\n        />\n      );\n      break;\n    default:\n      return null;\n  }\n\n  return <HotKeys handlers={handlers}>{content}</HotKeys>;\n};\n","import type { PropsWithChildren } from 'react';\nimport { useCallback } from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport HomeIcon from '@/material-icons/400-24px/home-fill.svg?react';\nimport InsertChartIcon from '@/material-icons/400-24px/insert_chart.svg?react';\nimport PersonAddIcon from '@/material-icons/400-24px/person_add.svg?react';\nimport RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\nimport ReplyAllIcon from '@/material-icons/400-24px/reply_all.svg?react';\nimport StarIcon from '@/material-icons/400-24px/star.svg?react';\nimport { setNotificationsFilter } from 'mastodon/actions/notification_groups';\nimport { Icon } from 'mastodon/components/icon';\nimport {\n  selectSettingsNotificationsQuickFilterActive,\n  selectSettingsNotificationsQuickFilterAdvanced,\n} from 'mastodon/selectors/settings';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst tooltips = defineMessages({\n  mentions: { id: 'notifications.filter.mentions', defaultMessage: 'Mentions' },\n  favourites: {\n    id: 'notifications.filter.favourites',\n    defaultMessage: 'Favorites',\n  },\n  boosts: { id: 'notifications.filter.boosts', defaultMessage: 'Boosts' },\n  polls: { id: 'notifications.filter.polls', defaultMessage: 'Poll results' },\n  follows: { id: 'notifications.filter.follows', defaultMessage: 'Follows' },\n  statuses: {\n    id: 'notifications.filter.statuses',\n    defaultMessage: 'Updates from people you follow',\n  },\n});\n\nconst BarButton: React.FC<\n  PropsWithChildren<{\n    selectedFilter: string;\n    type: string;\n    title?: string;\n  }>\n> = ({ selectedFilter, type, title, children }) => {\n  const dispatch = useAppDispatch();\n\n  const onClick = useCallback(() => {\n    void dispatch(setNotificationsFilter({ filterType: type }));\n  }, [dispatch, type]);\n\n  return (\n    <button\n      className={selectedFilter === type ? 'active' : ''}\n      onClick={onClick}\n      title={title}\n    >\n      {children}\n    </button>\n  );\n};\n\nexport const FilterBar: React.FC = () => {\n  const intl = useIntl();\n\n  const selectedFilter = useAppSelector(\n    selectSettingsNotificationsQuickFilterActive,\n  );\n  const advancedMode = useAppSelector(\n    selectSettingsNotificationsQuickFilterAdvanced,\n  );\n\n  if (advancedMode)\n    return (\n      <div className='notification__filter-bar'>\n        <BarButton selectedFilter={selectedFilter} type='all' key='all'>\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='mention'\n          key='mention'\n          title={intl.formatMessage(tooltips.mentions)}\n        >\n          <Icon id='reply-all' icon={ReplyAllIcon} />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='favourite'\n          key='favourite'\n          title={intl.formatMessage(tooltips.favourites)}\n        >\n          <Icon id='star' icon={StarIcon} />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='reblog'\n          key='reblog'\n          title={intl.formatMessage(tooltips.boosts)}\n        >\n          <Icon id='retweet' icon={RepeatIcon} />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='poll'\n          key='poll'\n          title={intl.formatMessage(tooltips.polls)}\n        >\n          <Icon id='tasks' icon={InsertChartIcon} />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='status'\n          key='status'\n          title={intl.formatMessage(tooltips.statuses)}\n        >\n          <Icon id='home' icon={HomeIcon} />\n        </BarButton>\n        <BarButton\n          selectedFilter={selectedFilter}\n          type='follow'\n          key='follow'\n          title={intl.formatMessage(tooltips.follows)}\n        >\n          <Icon id='user-plus' icon={PersonAddIcon} />\n        </BarButton>\n      </div>\n    );\n  else\n    return (\n      <div className='notification__filter-bar'>\n        <BarButton selectedFilter={selectedFilter} type='all' key='all'>\n          <FormattedMessage\n            id='notifications.filter.all'\n            defaultMessage='All'\n          />\n        </BarButton>\n        <BarButton selectedFilter={selectedFilter} type='mention' key='mention'>\n          <FormattedMessage\n            id='notifications.filter.mentions'\n            defaultMessage='Mentions'\n          />\n        </BarButton>\n      </div>\n    );\n};\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { isEqual } from 'lodash';\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport DoneAllIcon from '@/material-icons/400-24px/done_all.svg?react';\nimport NotificationsIcon from '@/material-icons/400-24px/notifications-fill.svg?react';\nimport {\n  fetchNotificationsGap,\n  updateScrollPosition,\n  loadPending,\n  markNotificationsAsRead,\n  mountNotifications,\n  unmountNotifications,\n} from 'mastodon/actions/notification_groups';\nimport { compareId } from 'mastodon/compare_id';\nimport { Icon } from 'mastodon/components/icon';\nimport { NotSignedInIndicator } from 'mastodon/components/not_signed_in_indicator';\nimport { useIdentity } from 'mastodon/identity_context';\nimport type { NotificationGap } from 'mastodon/reducers/notification_groups';\nimport {\n  selectUnreadNotificationGroupsCount,\n  selectPendingNotificationGroupsCount,\n  selectAnyPendingNotification,\n  selectNotificationGroups,\n} from 'mastodon/selectors/notifications';\nimport {\n  selectNeedsNotificationPermission,\n  selectSettingsNotificationsShowUnread,\n} from 'mastodon/selectors/settings';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { submitMarkers } from '../../actions/markers';\nimport { Column } from '../../components/column';\nimport type { ColumnRef } from '../../components/column';\nimport { ColumnHeader } from '../../components/column_header';\nimport { LoadGap } from '../../components/load_gap';\nimport ScrollableList from '../../components/scrollable_list';\nimport {\n  FilteredNotificationsBanner,\n  FilteredNotificationsIconButton,\n} from '../notifications/components/filtered_notifications_banner';\nimport NotificationsPermissionBanner from '../notifications/components/notifications_permission_banner';\nimport ColumnSettingsContainer from '../notifications/containers/column_settings_container';\n\nimport { NotificationGroup } from './components/notification_group';\nimport { FilterBar } from './filter_bar';\n\nconst messages = defineMessages({\n  title: { id: 'column.notifications', defaultMessage: 'Notifications' },\n  markAsRead: {\n    id: 'notifications.mark_as_read',\n    defaultMessage: 'Mark every notification as read',\n  },\n});\n\nexport const Notifications: React.FC<{\n  columnId?: string;\n  multiColumn?: boolean;\n}> = ({ columnId, multiColumn }) => {\n  const intl = useIntl();\n  const notifications = useAppSelector(selectNotificationGroups, isEqual);\n  const dispatch = useAppDispatch();\n  const isLoading = useAppSelector((s) => s.notificationGroups.isLoading);\n  const hasMore = notifications.at(-1)?.type === 'gap';\n\n  const lastReadId = useAppSelector((s) =>\n    selectSettingsNotificationsShowUnread(s)\n      ? s.notificationGroups.readMarkerId\n      : '0',\n  );\n\n  const numPending = useAppSelector(selectPendingNotificationGroupsCount);\n\n  const unreadNotificationsCount = useAppSelector(\n    selectUnreadNotificationGroupsCount,\n  );\n\n  const anyPendingNotification = useAppSelector(selectAnyPendingNotification);\n\n  const needsReload = useAppSelector(\n    (state) => state.notificationGroups.mergedNotifications === 'needs-reload',\n  );\n\n  const isUnread = unreadNotificationsCount > 0 || needsReload;\n\n  const canMarkAsRead =\n    useAppSelector(selectSettingsNotificationsShowUnread) &&\n    anyPendingNotification;\n\n  const needsNotificationPermission = useAppSelector(\n    selectNeedsNotificationPermission,\n  );\n\n  const columnRef = useRef<ColumnRef>(null);\n\n  const selectChild = useCallback((index: number, alignTop: boolean) => {\n    const container = columnRef.current?.node as HTMLElement | undefined;\n\n    if (!container) return;\n\n    const element = container.querySelector<HTMLElement>(\n      `article:nth-of-type(${index + 1}) .focusable`,\n    );\n\n    if (element) {\n      if (alignTop && container.scrollTop > element.offsetTop) {\n        element.scrollIntoView(true);\n      } else if (\n        !alignTop &&\n        container.scrollTop + container.clientHeight <\n          element.offsetTop + element.offsetHeight\n      ) {\n        element.scrollIntoView(false);\n      }\n      element.focus();\n    }\n  }, []);\n\n  // Keep track of mounted components for unread notification handling\n  useEffect(() => {\n    void dispatch(mountNotifications());\n\n    return () => {\n      dispatch(unmountNotifications());\n      void dispatch(updateScrollPosition({ top: false }));\n    };\n  }, [dispatch]);\n\n  const handleLoadGap = useCallback(\n    (gap: NotificationGap) => {\n      void dispatch(fetchNotificationsGap({ gap }));\n    },\n    [dispatch],\n  );\n\n  const handleLoadOlder = useDebouncedCallback(\n    () => {\n      const gap = notifications.at(-1);\n      if (gap?.type === 'gap') void dispatch(fetchNotificationsGap({ gap }));\n    },\n    300,\n    { leading: true },\n  );\n\n  const handleLoadPending = useCallback(() => {\n    dispatch(loadPending());\n  }, [dispatch]);\n\n  const handleScrollToTop = useDebouncedCallback(() => {\n    void dispatch(updateScrollPosition({ top: true }));\n  }, 100);\n\n  const handleScroll = useDebouncedCallback(() => {\n    void dispatch(updateScrollPosition({ top: false }));\n  }, 100);\n\n  useEffect(() => {\n    return () => {\n      handleLoadOlder.cancel();\n      handleScrollToTop.cancel();\n      handleScroll.cancel();\n    };\n  }, [handleLoadOlder, handleScrollToTop, handleScroll]);\n\n  const handlePin = useCallback(() => {\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('NOTIFICATIONS', {}));\n    }\n  }, [columnId, dispatch]);\n\n  const handleMove = useCallback(\n    (dir: unknown) => {\n      dispatch(moveColumn(columnId, dir));\n    },\n    [dispatch, columnId],\n  );\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, []);\n\n  const handleMoveUp = useCallback(\n    (id: string) => {\n      const elementIndex =\n        notifications.findIndex(\n          (item) => item.type !== 'gap' && item.group_key === id,\n        ) - 1;\n      selectChild(elementIndex, true);\n    },\n    [notifications, selectChild],\n  );\n\n  const handleMoveDown = useCallback(\n    (id: string) => {\n      const elementIndex =\n        notifications.findIndex(\n          (item) => item.type !== 'gap' && item.group_key === id,\n        ) + 1;\n      selectChild(elementIndex, false);\n    },\n    [notifications, selectChild],\n  );\n\n  const handleMarkAsRead = useCallback(() => {\n    dispatch(markNotificationsAsRead());\n    void dispatch(submitMarkers({ immediate: true }));\n  }, [dispatch]);\n\n  const pinned = !!columnId;\n  const emptyMessage = (\n    <FormattedMessage\n      id='empty_column.notifications'\n      defaultMessage=\"You don't have any notifications yet. When other people interact with you, you will see it here.\"\n    />\n  );\n\n  const { signedIn } = useIdentity();\n\n  const filterBar = signedIn ? <FilterBar /> : null;\n\n  const scrollableContent = useMemo(() => {\n    if (notifications.length === 0 && !hasMore) return null;\n\n    return notifications.map((item) =>\n      item.type === 'gap' ? (\n        <LoadGap\n          key={`${item.maxId}-${item.sinceId}`}\n          disabled={isLoading}\n          param={item}\n          onClick={handleLoadGap}\n        />\n      ) : (\n        <NotificationGroup\n          key={item.group_key}\n          notificationGroupId={item.group_key}\n          onMoveUp={handleMoveUp}\n          onMoveDown={handleMoveDown}\n          unread={\n            lastReadId !== '0' &&\n            !!item.page_max_id &&\n            compareId(item.page_max_id, lastReadId) > 0\n          }\n        />\n      ),\n    );\n  }, [\n    notifications,\n    isLoading,\n    hasMore,\n    lastReadId,\n    handleLoadGap,\n    handleMoveUp,\n    handleMoveDown,\n  ]);\n\n  const prepend = (\n    <>\n      {needsNotificationPermission && <NotificationsPermissionBanner />}\n      <FilteredNotificationsBanner />\n    </>\n  );\n\n  const scrollContainer = signedIn ? (\n    <ScrollableList\n      scrollKey={`notifications-${columnId}`}\n      trackScroll={!pinned}\n      isLoading={isLoading}\n      showLoading={isLoading && notifications.length === 0}\n      hasMore={hasMore}\n      numPending={numPending}\n      prepend={prepend}\n      alwaysPrepend\n      emptyMessage={emptyMessage}\n      onLoadMore={handleLoadOlder}\n      onLoadPending={handleLoadPending}\n      onScrollToTop={handleScrollToTop}\n      onScroll={handleScroll}\n      bindToDocument={!multiColumn}\n    >\n      {scrollableContent}\n    </ScrollableList>\n  ) : (\n    <NotSignedInIndicator />\n  );\n\n  const extraButton = (\n    <>\n      <FilteredNotificationsIconButton className='column-header__button' />\n      {canMarkAsRead && (\n        <button\n          aria-label={intl.formatMessage(messages.markAsRead)}\n          title={intl.formatMessage(messages.markAsRead)}\n          onClick={handleMarkAsRead}\n          className='column-header__button'\n        >\n          <Icon id='done-all' icon={DoneAllIcon} />\n        </button>\n      )}\n    </>\n  );\n\n  return (\n    <Column\n      bindToDocument={!multiColumn}\n      ref={columnRef}\n      label={intl.formatMessage(messages.title)}\n    >\n      <ColumnHeader\n        icon='bell'\n        iconComponent={NotificationsIcon}\n        active={isUnread}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onMove={handleMove}\n        onClick={handleHeaderClick}\n        pinned={pinned}\n        multiColumn={multiColumn}\n        extraButton={extraButton}\n      >\n        <ColumnSettingsContainer />\n      </ColumnHeader>\n\n      {filterBar}\n\n      {scrollContainer}\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default Notifications;\n"],"names":["SvgDoneAll","props","React.createElement","messages","defineMessages","filteredNotifications","id","defaultMessage","FilteredNotificationsIconButton","className","intl","useIntl","history","useHistory","policy","useAppSelector","state","notificationPolicy","minimizeSetting","selectSettingsNotificationsMinimizeFilteredBanner","handleClick","useCallback","push","summary","pending_requests_count","jsx","formatMessage","Icon","InventoryIcon","FilteredNotificationsBanner","dispatch","useAppDispatch","useEffect","fetchNotificationPolicy","interval","setInterval","clearInterval","jsxs","Link","FormattedMessage","count","SvgSettings","close","NotificationsPermissionBanner","PureComponent","requestBrowserPermission","handleClose","changeSetting","render","IconButton","CloseIcon","icon","SettingsIcon","Button","NotificationsPermissionBanner$1","connect","injectIntl","SvgDeleteForever","ClearColumnButton","onClick","DeleteForeverIcon","GrantPermissionButton","ColumnSettings","onPushChange","path","checked","onChange","settings","pushSettings","onClear","alertsEnabled","browserSupport","browserPermission","onRequestNotificationPermission","filterAdvancedStr","unreadMarkersShowStr","alertStr","showStr","soundStr","groupStr","showPushSettings","get","pushStr","PolicyControls","SettingToggle","identity","permissions","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_REPORTS","ColumnSettings$1","withIdentity","permissionDenied","mapStateToProps","getIn","includes","mapDispatchToProps","window","Notification","permission","changePushNotifications","slice","showAlert","message","setNotificationsFilter","fetchNotifications","openModal","modalType","ColumnSettingsContainer","other","spam","legal","violation","NotificationAdminReport","notification","report","unread","targetAccount","accounts","targetAccountId","account","sampleAccountIds","domain","acct","split","values","name","target","category","status_ids","length","classNames","FlagIcon","RelativeTimestamp","created_at","comment","AVATAR_SIZE","AvatarById","accountId","Avatar","NotificationGroupWithStatus","iconId","timestamp","accountIds","actions","statusId","labelRenderer","labelSeeMoreHref","type","additionalContent","label","useMemo","DisplayedName","isPrivateMention","statuses","handlers","open","navigateToStatus","reply","replyComposeById","HotKeys","AvatarGroup","NOTIFICATIONS_GROUP_MAX_AVATARS","map","Fragment","EmbeddedStatus","displayedName","total","NotificationAdminSignUp","PersonAddIcon","latest_page_notification_at","notifications_count","SvgCelebration","NotificationAnnualReport","annualReport","year","modalProps","CelebrationIcon","seeMoreHref","a","chunks","privateLabelRenderer","NotificationFavourite","statusAccount","StarIcon","undefined","FollowerCount","s","ShortNumber","followers_count","FollowersCounter","NotificationFollow","username","me","FollowButton","authorize","reject","NotificationFollowRequest","onAuthorize","authorizeFollowRequest","onReject","rejectFollowRequest","CheckIcon","SvgReplyFill","NotificationWithStatus","isFiltered","getStatusHidden","contextType","boost","toggleReblog","favourite","toggleFavourite","toggleHidden","toggleStatusSpoilers","StatusQuoteManager","mentionLabelRenderer","privateMentionLabelRenderer","replyLabelRenderer","privateReplyLabelRenderer","NotificationMention","isDirect","isReply","status","isEqual","ReplyIcon","AlternateEmailIcon","NotificationModerationWarning","moderationWarning","ModerationWarning","action","labelRendererOther","labelRendererOwn","NotificationPoll","BarChart4BarsIcon","NotificationReblog","RepeatIcon","NotificationSeveredRelationships","event","RelationshipsSeveranceEvent","target_name","following_count","NotificationStatus","NotificationsActiveIcon","NotificationUpdate","EditIcon","NotificationGroup","notificationGroupId","onMoveUp","onMoveDown","notificationGroup","notificationGroups","groups","find","item","group_key","moveUp","moveDown","openProfile","navigateToProfile","mention","mentionComposeById","content","tooltips","mentions","favourites","boosts","polls","follows","BarButton","selectedFilter","title","children","filterType","FilterBar","selectSettingsNotificationsQuickFilterActive","selectSettingsNotificationsQuickFilterAdvanced","ReplyAllIcon","InsertChartIcon","HomeIcon","markAsRead","Notifications","columnId","multiColumn","notifications","selectNotificationGroups","isLoading","hasMore","at","lastReadId","selectSettingsNotificationsShowUnread","readMarkerId","numPending","selectPendingNotificationGroupsCount","unreadNotificationsCount","selectUnreadNotificationGroupsCount","anyPendingNotification","selectAnyPendingNotification","needsReload","mergedNotifications","isUnread","canMarkAsRead","needsNotificationPermission","selectNeedsNotificationPermission","columnRef","useRef","selectChild","index","alignTop","container","current","node","element","querySelector","scrollTop","offsetTop","scrollIntoView","clientHeight","offsetHeight","focus","mountNotifications","unmountNotifications","updateScrollPosition","top","handleLoadGap","gap","fetchNotificationsGap","handleLoadOlder","useDebouncedCallback","leading","handleLoadPending","loadPending","handleScrollToTop","handleScroll","cancel","handlePin","removeColumn","addColumn","handleMove","dir","moveColumn","handleHeaderClick","handleMoveUp","elementIndex","findIndex","handleMoveDown","handleMarkAsRead","markNotificationsAsRead","submitMarkers","immediate","pinned","emptyMessage","signedIn","useIdentity","filterBar","scrollableContent","LoadGap","maxId","sinceId","page_max_id","compareId","prepend","scrollContainer","ScrollableList","NotSignedInIndicator","extraButton","DoneAllIcon","Column","ColumnHeader","NotificationsIcon","Helmet"],"mappings":"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"}