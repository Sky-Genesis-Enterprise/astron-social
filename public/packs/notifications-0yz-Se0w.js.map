{"version":3,"file":"notifications-0yz-Se0w.js","sources":["../../app/javascript/mastodon/selectors/notifications.ts"],"sourcesContent":["import { createSelector } from '@reduxjs/toolkit';\n\nimport { compareId } from 'mastodon/compare_id';\nimport type { NotificationGroup } from 'mastodon/models/notification_group';\nimport type { NotificationGap } from 'mastodon/reducers/notification_groups';\nimport type { RootState } from 'mastodon/store';\n\nimport {\n  selectSettingsNotificationsExcludedTypes,\n  selectSettingsNotificationsQuickFilterActive,\n  selectSettingsNotificationsQuickFilterShow,\n} from './settings';\n\nconst filterNotificationsByAllowedTypes = (\n  showFilterBar: boolean,\n  allowedType: string,\n  excludedTypes: string[],\n  notifications: (NotificationGroup | NotificationGap)[],\n) => {\n  if (!showFilterBar || allowedType === 'all') {\n    // used if user changed the notification settings after loading the notifications from the server\n    // otherwise a list of notifications will come pre-filtered from the backend\n    // we need to turn it off for FilterBar in order not to block ourselves from seeing a specific category\n    return notifications.filter(\n      (item) => item.type === 'gap' || !excludedTypes.includes(item.type),\n    );\n  }\n  return notifications.filter(\n    (item) => item.type === 'gap' || allowedType === item.type,\n  );\n};\n\nexport const selectNotificationGroups = createSelector(\n  [\n    selectSettingsNotificationsQuickFilterShow,\n    selectSettingsNotificationsQuickFilterActive,\n    selectSettingsNotificationsExcludedTypes,\n    (state: RootState) => state.notificationGroups.groups,\n  ],\n  filterNotificationsByAllowedTypes,\n);\n\nconst selectPendingNotificationGroups = createSelector(\n  [\n    selectSettingsNotificationsQuickFilterShow,\n    selectSettingsNotificationsQuickFilterActive,\n    selectSettingsNotificationsExcludedTypes,\n    (state: RootState) => state.notificationGroups.pendingGroups,\n  ],\n  filterNotificationsByAllowedTypes,\n);\n\nexport const selectUnreadNotificationGroupsCount = createSelector(\n  [\n    (s: RootState) => s.notificationGroups.lastReadId,\n    selectNotificationGroups,\n    selectPendingNotificationGroups,\n  ],\n  (notificationMarker, groups, pendingGroups) => {\n    return (\n      groups.filter(\n        (group) =>\n          group.type !== 'gap' &&\n          group.page_max_id &&\n          compareId(group.page_max_id, notificationMarker) > 0,\n      ).length +\n      pendingGroups.filter(\n        (group) =>\n          group.type !== 'gap' &&\n          group.page_max_id &&\n          compareId(group.page_max_id, notificationMarker) > 0,\n      ).length\n    );\n  },\n);\n\n// Whether there is any unread notification according to the user-facing state\nexport const selectAnyPendingNotification = createSelector(\n  [\n    (s: RootState) => s.notificationGroups.readMarkerId,\n    selectNotificationGroups,\n  ],\n  (notificationMarker, groups) => {\n    return groups.some(\n      (group) =>\n        group.type !== 'gap' &&\n        group.page_max_id &&\n        compareId(group.page_max_id, notificationMarker) > 0,\n    );\n  },\n);\n\nexport const selectPendingNotificationGroupsCount = createSelector(\n  [selectPendingNotificationGroups],\n  (pendingGroups) =>\n    pendingGroups.filter((group) => group.type !== 'gap').length,\n);\n"],"names":["filterNotificationsByAllowedTypes","showFilterBar","allowedType","excludedTypes","notifications","filter","item","type","includes","selectNotificationGroups","createSelector","selectSettingsNotificationsQuickFilterShow","selectSettingsNotificationsQuickFilterActive","selectSettingsNotificationsExcludedTypes","state","notificationGroups","groups","selectPendingNotificationGroups","pendingGroups","selectUnreadNotificationGroupsCount","s","lastReadId","notificationMarker","group","page_max_id","compareId","length","selectAnyPendingNotification","readMarkerId","some","selectPendingNotificationGroupsCount"],"mappings":"sFAaA,MAAMA,EAAoCA,CACxCC,EACAC,EACAC,EACAC,IAEI,CAACH,GAAiBC,IAAgB,MAI7BE,EAAcC,OAClBC,GAASA,EAAKC,OAAS,OAAS,CAACJ,EAAcK,SAASF,EAAKC,IAAI,CACpE,EAEKH,EAAcC,OAClBC,GAASA,EAAKC,OAAS,OAASL,IAAgBI,EAAKC,IACxD,EAGWE,EAA2BC,EACtC,CACEC,EACAC,EACAC,EACCC,GAAqBA,EAAMC,mBAAmBC,MAAM,EAEvDhB,CACF,EAEMiB,EAAkCP,EACtC,CACEC,EACAC,EACAC,EACCC,GAAqBA,EAAMC,mBAAmBG,aAAa,EAE9DlB,CACF,EAEamB,EAAsCT,EACjD,CACGU,GAAiBA,EAAEL,mBAAmBM,WACvCZ,EACAQ,CAA+B,EAEjC,CAACK,EAAoBN,EAAQE,IAEzBF,EAAOX,OACJkB,GACCA,EAAMhB,OAAS,OACfgB,EAAMC,aACNC,EAAUF,EAAMC,YAAaF,CAAkB,EAAI,CACvD,EAAEI,OACFR,EAAcb,OACXkB,GACCA,EAAMhB,OAAS,OACfgB,EAAMC,aACNC,EAAUF,EAAMC,YAAaF,CAAkB,EAAI,CACvD,EAAEI,MAGR,EAGaC,EAA+BjB,EAC1C,CACGU,GAAiBA,EAAEL,mBAAmBa,aACvCnB,CAAwB,EAE1B,CAACa,EAAoBN,IACZA,EAAOa,KACXN,GACCA,EAAMhB,OAAS,OACfgB,EAAMC,aACNC,EAAUF,EAAMC,YAAaF,CAAkB,EAAI,CACvD,CAEJ,EAEaQ,EAAuCpB,EAClD,CAACO,CAA+B,EAC/BC,GACCA,EAAcb,OAAQkB,GAAUA,EAAMhB,OAAS,KAAK,EAAEmB,MAC1D"}