{"version":3,"file":"reblogs-index-CNfnv814.js","sources":["../../app/javascript/mastodon/features/reblogs/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { debounce } from 'lodash';\n\nimport RefreshIcon from '@/material-icons/400-24px/refresh.svg?react';\nimport { Account } from 'mastodon/components/account';\nimport { Icon }  from 'mastodon/components/icon';\n\nimport { fetchReblogs, expandReblogs } from '../../actions/interactions';\nimport ColumnHeader from '../../components/column_header';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport ScrollableList from '../../components/scrollable_list';\nimport Column from '../ui/components/column';\n\nconst messages = defineMessages({\n  refresh: { id: 'refresh', defaultMessage: 'Refresh' },\n});\n\nconst mapStateToProps = (state, props) => ({\n  accountIds: state.getIn(['user_lists', 'reblogged_by', props.params.statusId, 'items']),\n  hasMore: !!state.getIn(['user_lists', 'reblogged_by', props.params.statusId, 'next']),\n  isLoading: state.getIn(['user_lists', 'reblogged_by', props.params.statusId, 'isLoading'], true),\n});\n\nclass Reblogs extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.object.isRequired,\n    dispatch: PropTypes.func.isRequired,\n    accountIds: ImmutablePropTypes.list,\n    hasMore: PropTypes.bool,\n    isLoading: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    intl: PropTypes.object.isRequired,\n  };\n\n  UNSAFE_componentWillMount () {\n    if (!this.props.accountIds) {\n      this.props.dispatch(fetchReblogs(this.props.params.statusId));\n    }\n  }\n\n  handleRefresh = () => {\n    this.props.dispatch(fetchReblogs(this.props.params.statusId));\n  };\n\n  handleLoadMore = debounce(() => {\n    this.props.dispatch(expandReblogs(this.props.params.statusId));\n  }, 300, { leading: true });\n\n  render () {\n    const { intl, accountIds, hasMore, isLoading, multiColumn } = this.props;\n\n    if (!accountIds) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    }\n\n    const emptyMessage = <FormattedMessage id='status.reblogs.empty' defaultMessage='No one has boosted this post yet. When someone does, they will show up here.' />;\n\n    return (\n      <Column bindToDocument={!multiColumn}>\n        <ColumnHeader\n          showBackButton\n          multiColumn={multiColumn}\n          extraButton={(\n            <button type='button' className='column-header__button' title={intl.formatMessage(messages.refresh)} aria-label={intl.formatMessage(messages.refresh)} onClick={this.handleRefresh}><Icon id='refresh' icon={RefreshIcon} /></button>\n          )}\n        />\n\n        <ScrollableList\n          scrollKey='reblogs'\n          onLoadMore={this.handleLoadMore}\n          hasMore={hasMore}\n          isLoading={isLoading}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n        >\n          {accountIds.map(id =>\n            <Account key={id} id={id} />,\n          )}\n        </ScrollableList>\n\n        <Helmet>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Reblogs));\n"],"names":["messages","defineMessages","refresh","id","defaultMessage","mapStateToProps","state","props","accountIds","getIn","params","statusId","hasMore","isLoading","Reblogs","ImmutablePureComponent","handleRefresh","dispatch","fetchReblogs","handleLoadMore","debounce","expandReblogs","leading","UNSAFE_componentWillMount","render","intl","multiColumn","jsx","Column","LoadingIndicator","emptyMessage","FormattedMessage","jsxs","ColumnHeader","formatMessage","Icon","RefreshIcon","ScrollableList","map","Account","Helmet","__publicField","propTypes","PropTypes","object","isRequired","func","ImmutablePropTypes","list","bool","index","connect","injectIntl"],"mappings":"g+CAsBA,MAAMA,EAAWC,EAAe,CAC9BC,QAAS,CAAEC,GAAE,UAAaC,eAAc,SAAA,CAC1C,CAAC,EAEKC,EAAkBA,CAACC,EAAOC,KAAW,CACzCC,WAAYF,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,SAAU,OAAO,CAAC,EACtFC,QAAS,CAAC,CAACN,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,SAAU,MAAM,CAAC,EACpFE,UAAWP,EAAMG,MAAM,CAAC,aAAc,eAAgBF,EAAMG,OAAOC,SAAU,WAAW,EAAG,EAAI,CACjG,GAEA,MAAMG,UAAgBC,CAAuB,CAA7C,kCAkBEC,EAAAA,qBAAgBA,IAAM,CACpB,KAAKT,MAAMU,SAASC,EAAa,KAAKX,MAAMG,OAAOC,QAAQ,CAAC,CAAA,GAG9DQ,EAAAA,sBAAiBC,EAAS,IAAM,CAC9B,KAAKb,MAAMU,SAASI,EAAc,KAAKd,MAAMG,OAAOC,QAAQ,CAAC,CAAA,EAC5D,IAAK,CAAEW,QAAS,EAAA,CAAM,GAZzBC,2BAA6B,CACtB,KAAKhB,MAAMC,YACd,KAAKD,MAAMU,SAASC,EAAa,KAAKX,MAAMG,OAAOC,QAAQ,CAAC,CAC9D,CAWFa,QAAU,CACR,KAAM,CAAEC,KAAAA,EAAMjB,WAAAA,EAAYI,QAAAA,EAASC,UAAAA,EAAWa,YAAAA,CAAAA,EAAgB,KAAKnB,MAEnE,GAAI,CAACC,EACH,OACEmB,EAAAA,IAACC,EAAA,CACC,SAAAD,EAAAA,IAACE,EAAA,CAAA,CAAgB,EACnB,EAIJ,MAAMC,EAAeH,EAAAA,IAACI,EAAA,CAAiB,GAAE,uBAAwB,eAAe,+EAA8E,EAE9J,OACEC,EAAAA,KAACJ,EAAA,CAAO,eAAgB,CAACF,EACvB,SAAA,CAAAC,EAAAA,IAACM,EAAA,CACC,eAAc,GACd,YAAAP,EACA,YACEC,EAAAA,IAAC,SAAA,CAAO,KAAK,SAAS,UAAU,wBAAwB,MAAOF,EAAKS,cAAclC,EAASE,OAAO,EAAG,aAAYuB,EAAKS,cAAclC,EAASE,OAAO,EAAG,QAAS,KAAKc,cAAe,SAAAW,EAAAA,IAACQ,GAAK,GAAG,UAAU,KAAMC,CAAAA,CAAY,EAAG,EAC5N,EAGJT,EAAAA,IAACU,GACC,UAAU,UACV,WAAY,KAAKlB,eACjB,QAAAP,EACA,UAAAC,EACA,aAAAiB,EACA,eAAgB,CAACJ,EAEhBlB,WAAW8B,IAAInC,SACboC,EAAA,CAAiB,GAAApC,CAAA,EAAJA,CAAW,CAC3B,CAAA,CACF,EAEAwB,EAAAA,IAACa,GACC,SAAAb,MAAC,OAAA,CAAK,KAAK,SAAS,QAAQ,UAAS,CAAA,CACvC,CAAA,EACF,CAAA,CAIN,CAnEEc,EAFI3B,EAEG4B,YAAY,CACjBhC,OAAQiC,EAAUC,OAAOC,WACzB5B,SAAU0B,EAAUG,KAAKD,WACzBrC,WAAYuC,EAAmBC,KAC/BpC,QAAS+B,EAAUM,KACnBpC,UAAW8B,EAAUM,KACrBvB,YAAaiB,EAAUM,KACvBxB,KAAMkB,EAAUC,OAAOC,UAAAA,GA8D3B,MAAAK,GAAeC,EAAQ9C,CAAe,EAAE+C,EAAWtC,CAAO,CAAC"}