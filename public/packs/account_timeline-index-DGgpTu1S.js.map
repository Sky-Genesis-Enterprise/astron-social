{"version":3,"file":"account_timeline-index-DGgpTu1S.js","sources":["../../app/javascript/mastodon/hooks/usePrevious.ts","../../app/javascript/mastodon/components/featured_carousel.tsx","../../app/javascript/mastodon/features/account_timeline/index.jsx"],"sourcesContent":["import { useRef, useEffect } from 'react';\n\n/**\n * Returns the previous state of the passed in value.\n * On first render, undefined is returned.\n */\n\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n\n  return ref.current;\n}\n","import type { ComponentPropsWithRef } from 'react';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useRef,\n  useState,\n  useId,\n} from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport type { Map as ImmutableMap } from 'immutable';\nimport { List as ImmutableList } from 'immutable';\n\nimport type { AnimatedProps } from '@react-spring/web';\nimport { animated, useSpring } from '@react-spring/web';\nimport { useDrag } from '@use-gesture/react';\n\nimport { expandAccountFeaturedTimeline } from '@/mastodon/actions/timelines';\nimport { Icon } from '@/mastodon/components/icon';\nimport { IconButton } from '@/mastodon/components/icon_button';\nimport StatusContainer from '@/mastodon/containers/status_container';\nimport { usePrevious } from '@/mastodon/hooks/usePrevious';\nimport { useAppDispatch, useAppSelector } from '@/mastodon/store';\nimport ChevronLeftIcon from '@/material-icons/400-24px/chevron_left.svg?react';\nimport ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\nimport PushPinIcon from '@/material-icons/400-24px/push_pin.svg?react';\n\nconst messages = defineMessages({\n  previous: { id: 'featured_carousel.previous', defaultMessage: 'Previous' },\n  next: { id: 'featured_carousel.next', defaultMessage: 'Next' },\n  slide: {\n    id: 'featured_carousel.slide',\n    defaultMessage: '{index} of {total}',\n  },\n});\n\nexport const FeaturedCarousel: React.FC<{\n  accountId: string;\n  tagged?: string;\n}> = ({ accountId, tagged }) => {\n  const intl = useIntl();\n  const accessibilityId = useId();\n\n  // Load pinned statuses\n  const dispatch = useAppDispatch();\n  useEffect(() => {\n    if (accountId) {\n      void dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n  }, [accountId, dispatch, tagged]);\n  const pinnedStatuses = useAppSelector(\n    (state) =>\n      (state.timelines as ImmutableMap<string, unknown>).getIn(\n        [`account:${accountId}:pinned${tagged ? `:${tagged}` : ''}`, 'items'],\n        ImmutableList(),\n      ) as ImmutableList<string>,\n  );\n\n  // Handle slide change\n  const [slideIndex, setSlideIndex] = useState(0);\n  const wrapperRef = useRef<HTMLDivElement>(null);\n  const handleSlideChange = useCallback(\n    (direction: number) => {\n      setSlideIndex((prev) => {\n        const max = pinnedStatuses.size - 1;\n        let newIndex = prev + direction;\n        if (newIndex < 0) {\n          newIndex = max;\n        } else if (newIndex > max) {\n          newIndex = 0;\n        }\n        const slide = wrapperRef.current?.children[newIndex];\n        if (slide) {\n          setCurrentSlideHeight(slide.scrollHeight);\n        }\n        return newIndex;\n      });\n    },\n    [pinnedStatuses.size],\n  );\n\n  // Handle slide heights\n  const [currentSlideHeight, setCurrentSlideHeight] = useState(\n    wrapperRef.current?.scrollHeight ?? 0,\n  );\n  const previousSlideHeight = usePrevious(currentSlideHeight);\n  const observerRef = useRef<ResizeObserver>(\n    new ResizeObserver(() => {\n      handleSlideChange(0);\n    }),\n  );\n  const wrapperStyles = useSpring({\n    x: `-${slideIndex * 100}%`,\n    height: currentSlideHeight,\n    // Don't animate from zero to the height of the initial slide\n    immediate: !previousSlideHeight,\n  });\n  useLayoutEffect(() => {\n    // Update slide height when the component mounts\n    if (currentSlideHeight === 0) {\n      handleSlideChange(0);\n    }\n  }, [currentSlideHeight, handleSlideChange]);\n\n  // Handle swiping animations\n  const bind = useDrag(({ swipe: [swipeX] }) => {\n    handleSlideChange(swipeX * -1); // Invert swipe as swiping left loads the next slide.\n  });\n  const handlePrev = useCallback(() => {\n    handleSlideChange(-1);\n  }, [handleSlideChange]);\n  const handleNext = useCallback(() => {\n    handleSlideChange(1);\n  }, [handleSlideChange]);\n\n  if (!accountId || pinnedStatuses.isEmpty()) {\n    return null;\n  }\n\n  return (\n    <div\n      className='featured-carousel'\n      {...bind()}\n      aria-roledescription='carousel'\n      aria-labelledby={`${accessibilityId}-title`}\n      role='region'\n    >\n      <div className='featured-carousel__header'>\n        <h4\n          className='featured-carousel__title'\n          id={`${accessibilityId}-title`}\n        >\n          <Icon id='thumb-tack' icon={PushPinIcon} />\n          <FormattedMessage\n            id='featured_carousel.header'\n            defaultMessage='{count, plural, one {Pinned Post} other {Pinned Posts}}'\n            values={{ count: pinnedStatuses.size }}\n          />\n        </h4>\n        {pinnedStatuses.size > 1 && (\n          <>\n            <IconButton\n              title={intl.formatMessage(messages.previous)}\n              icon='chevron-left'\n              iconComponent={ChevronLeftIcon}\n              onClick={handlePrev}\n            />\n            <span aria-live='polite'>\n              <FormattedMessage\n                id='featured_carousel.post'\n                defaultMessage='Post'\n              >\n                {(text) => <span className='sr-only'>{text}</span>}\n              </FormattedMessage>\n              {slideIndex + 1} / {pinnedStatuses.size}\n            </span>\n            <IconButton\n              title={intl.formatMessage(messages.next)}\n              icon='chevron-right'\n              iconComponent={ChevronRightIcon}\n              onClick={handleNext}\n            />\n          </>\n        )}\n      </div>\n      <animated.div\n        className='featured-carousel__slides'\n        ref={wrapperRef}\n        style={wrapperStyles}\n        aria-atomic='false'\n        aria-live='polite'\n      >\n        {pinnedStatuses.map((statusId, index) => (\n          <FeaturedCarouselItem\n            key={`f-${statusId}`}\n            data-index={index}\n            aria-label={intl.formatMessage(messages.slide, {\n              index: index + 1,\n              total: pinnedStatuses.size,\n            })}\n            statusId={statusId}\n            observer={observerRef.current}\n            active={index === slideIndex}\n          />\n        ))}\n      </animated.div>\n    </div>\n  );\n};\n\ninterface FeaturedCarouselItemProps {\n  statusId: string;\n  active: boolean;\n  observer: ResizeObserver;\n}\n\nconst FeaturedCarouselItem: React.FC<\n  FeaturedCarouselItemProps & AnimatedProps<ComponentPropsWithRef<'div'>>\n> = ({ statusId, active, observer, ...props }) => {\n  const handleRef = useCallback(\n    (instance: HTMLDivElement | null) => {\n      if (instance) {\n        observer.observe(instance);\n      }\n    },\n    [observer],\n  );\n\n  return (\n    <animated.div\n      className='featured-carousel__slide'\n      // @ts-expect-error inert in not in this version of React\n      inert={!active ? 'true' : undefined}\n      aria-roledescription='slide'\n      role='group'\n      ref={handleRef}\n      {...props}\n    >\n      <StatusContainer\n        // @ts-expect-error inferred props are wrong\n        id={statusId}\n        contextType='account'\n        withCounters\n      />\n    </animated.div>\n  );\n};\n","import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport { me } from 'mastodon/initial_state';\nimport { normalizeForLookup } from 'mastodon/reducers/accounts_map';\nimport { getAccountHidden } from 'mastodon/selectors/accounts';\n\nimport { lookupAccount, fetchAccount } from '../../actions/accounts';\nimport { expandAccountFeaturedTimeline, expandAccountTimeline, connectTimeline, disconnectTimeline } from '../../actions/timelines';\nimport { ColumnBackButton } from '../../components/column_back_button';\nimport { LoadingIndicator } from '../../components/loading_indicator';\nimport StatusList from '../../components/status_list';\nimport Column from '../ui/components/column';\nimport { RemoteHint } from 'mastodon/components/remote_hint';\n\nimport { AccountHeader } from './components/account_header';\nimport { LimitedAccountHint } from './components/limited_account_hint';\nimport { FeaturedCarousel } from '@/mastodon/components/featured_carousel';\n\nconst emptyList = ImmutableList();\n\nconst mapStateToProps = (state, { params: { acct, id, tagged }, withReplies = false }) => {\n  const accountId = id || state.accounts_map[normalizeForLookup(acct)];\n\n  if (accountId === null) {\n    return {\n      isLoading: false,\n      isAccount: false,\n      statusIds: emptyList,\n    };\n  } else if (!accountId) {\n    return {\n      isLoading: true,\n      statusIds: emptyList,\n    };\n  }\n\n  const path = withReplies ? `${accountId}:with_replies` : `${accountId}${tagged ? `:${tagged}` : ''}`;\n\n  return {\n    accountId,\n    isAccount: !!state.getIn(['accounts', accountId]),\n    statusIds: state.getIn(['timelines', `account:${path}`, 'items'], emptyList),\n    isLoading: state.getIn(['timelines', `account:${path}`, 'isLoading']),\n    hasMore: state.getIn(['timelines', `account:${path}`, 'hasMore']),\n    suspended: state.getIn(['accounts', accountId, 'suspended'], false),\n    hidden: getAccountHidden(state, accountId),\n    blockedBy: state.getIn(['relationships', accountId, 'blocked_by'], false),\n  };\n};\n\nclass AccountTimeline extends ImmutablePureComponent {\n\n  static propTypes = {\n    params: PropTypes.shape({\n      acct: PropTypes.string,\n      id: PropTypes.string,\n      tagged: PropTypes.string,\n    }).isRequired,\n    accountId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    statusIds: ImmutablePropTypes.list,\n    isLoading: PropTypes.bool,\n    hasMore: PropTypes.bool,\n    withReplies: PropTypes.bool,\n    blockedBy: PropTypes.bool,\n    isAccount: PropTypes.bool,\n    suspended: PropTypes.bool,\n    hidden: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n  };\n\n  _load () {\n    const { accountId, withReplies, params: { tagged }, dispatch } = this.props;\n\n    dispatch(fetchAccount(accountId));\n\n    if (!withReplies) {\n      dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n    }\n\n    dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n\n    if (accountId === me) {\n      dispatch(connectTimeline(`account:${me}`));\n    }\n  }\n\n  componentDidMount () {\n    const { params: { acct }, accountId, dispatch } = this.props;\n\n    if (accountId) {\n      this._load();\n    } else {\n      dispatch(lookupAccount(acct));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { params: { acct, tagged }, accountId, withReplies, dispatch } = this.props;\n\n    if (prevProps.accountId !== accountId && accountId) {\n      this._load();\n    } else if (prevProps.params.acct !== acct) {\n      dispatch(lookupAccount(acct));\n    } else if (prevProps.params.tagged !== tagged) {\n      if (!withReplies) {\n        dispatch(expandAccountFeaturedTimeline(accountId, { tagged }));\n      }\n      dispatch(expandAccountTimeline(accountId, { withReplies, tagged }));\n    }\n\n    if (prevProps.accountId === me && accountId !== me) {\n      dispatch(disconnectTimeline({ timeline: `account:${me}` }));\n    }\n  }\n\n  componentWillUnmount () {\n    const { dispatch, accountId } = this.props;\n\n    if (accountId === me) {\n      dispatch(disconnectTimeline({ timeline: `account:${me}` }));\n    }\n  }\n\n  handleLoadMore = maxId => {\n    this.props.dispatch(expandAccountTimeline(this.props.accountId, { maxId, withReplies: this.props.withReplies, tagged: this.props.params.tagged }));\n  };\n\n  render () {\n    const { accountId, statusIds, isLoading, hasMore, blockedBy, suspended, isAccount, hidden, multiColumn, remote, remoteUrl, params: { tagged } } = this.props;\n\n    if (isLoading && statusIds.isEmpty()) {\n      return (\n        <Column>\n          <LoadingIndicator />\n        </Column>\n      );\n    } else if (!isLoading && !isAccount) {\n      return (\n        <BundleColumnError multiColumn={multiColumn} errorType='routing' />\n      );\n    }\n\n    let emptyMessage;\n\n    const forceEmptyState = suspended || blockedBy || hidden;\n\n    if (suspended) {\n      emptyMessage = <FormattedMessage id='empty_column.account_suspended' defaultMessage='Account suspended' />;\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = <FormattedMessage id='empty_column.account_unavailable' defaultMessage='Profile unavailable' />;\n    } else if (remote && statusIds.isEmpty()) {\n      emptyMessage = <RemoteHint accountId={accountId} url={remoteUrl} />;\n    } else {\n      emptyMessage = <FormattedMessage id='empty_column.account_timeline' defaultMessage='No posts found' />;\n    }\n\n    return (\n      <Column>\n        <ColumnBackButton />\n\n        <StatusList\n          prepend={\n            <>\n              <AccountHeader accountId={this.props.accountId} hideTabs={forceEmptyState} tagged={tagged} />\n              {!forceEmptyState && <FeaturedCarousel accountId={this.props.accountId} tagged={tagged} />}\n            </>\n        }\n          alwaysPrepend\n          append={<RemoteHint accountId={accountId} />}\n          scrollKey='account_timeline'\n          statusIds={forceEmptyState ? emptyList : statusIds}\n          isLoading={isLoading}\n          hasMore={!forceEmptyState && hasMore}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={emptyMessage}\n          bindToDocument={!multiColumn}\n          timelineId='account'\n          withCounters\n        />\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(AccountTimeline);\n"],"names":["usePrevious","value","ref","useRef","useEffect","current","messages","defineMessages","previous","id","defaultMessage","next","slide","FeaturedCarousel","accountId","tagged","intl","useIntl","accessibilityId","useId","dispatch","useAppDispatch","expandAccountFeaturedTimeline","pinnedStatuses","useAppSelector","state","timelines","getIn","ImmutableList","slideIndex","setSlideIndex","useState","wrapperRef","handleSlideChange","useCallback","direction","prev","max","size","newIndex","children","setCurrentSlideHeight","scrollHeight","currentSlideHeight","previousSlideHeight","observerRef","ResizeObserver","wrapperStyles","useSpring","x","height","immediate","useLayoutEffect","bind","useDrag","swipe","swipeX","handlePrev","handleNext","isEmpty","jsxs","jsx","Icon","PushPinIcon","FormattedMessage","count","Fragment","IconButton","formatMessage","ChevronLeftIcon","text","ChevronRightIcon","animated","map","statusId","index","FeaturedCarouselItem","total","active","observer","props","handleRef","instance","observe","undefined","StatusContainer","emptyList","mapStateToProps","params","acct","withReplies","accounts_map","normalizeForLookup","isLoading","isAccount","statusIds","path","hasMore","suspended","hidden","getAccountHidden","blockedBy","AccountTimeline","ImmutablePureComponent","handleLoadMore","maxId","expandAccountTimeline","_load","fetchAccount","me","connectTimeline","componentDidMount","lookupAccount","componentDidUpdate","prevProps","disconnectTimeline","timeline","componentWillUnmount","render","multiColumn","remote","remoteUrl","Column","LoadingIndicator","BundleColumnError","emptyMessage","forceEmptyState","LimitedAccountHint","RemoteHint","ColumnBackButton","StatusList","AccountHeader","__publicField","propTypes","PropTypes","shape","string","isRequired","func","ImmutablePropTypes","list","bool","connect"],"mappings":"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"}