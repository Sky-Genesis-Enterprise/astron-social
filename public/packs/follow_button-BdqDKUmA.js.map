{"version":3,"file":"follow_button-BdqDKUmA.js","sources":["../../app/javascript/mastodon/components/follow_button.tsx"],"sourcesContent":["import { useCallback, useEffect } from 'react';\n\nimport { useIntl, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { useIdentity } from '@/mastodon/identity_context';\nimport { fetchRelationships, followAccount } from 'mastodon/actions/accounts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { Button } from 'mastodon/components/button';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { me } from 'mastodon/initial_state';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  followBack: { id: 'account.follow_back', defaultMessage: 'Follow back' },\n  editProfile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n});\n\nexport const FollowButton: React.FC<{\n  accountId?: string;\n  compact?: boolean;\n}> = ({ accountId, compact }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n  const { signedIn } = useIdentity();\n  const account = useAppSelector((state) =>\n    accountId ? state.accounts.get(accountId) : undefined,\n  );\n  const relationship = useAppSelector((state) =>\n    accountId ? state.relationships.get(accountId) : undefined,\n  );\n  const following = relationship?.following || relationship?.requested;\n\n  useEffect(() => {\n    if (accountId && signedIn) {\n      dispatch(fetchRelationships([accountId]));\n    }\n  }, [dispatch, accountId, signedIn]);\n\n  const handleClick = useCallback(() => {\n    if (!signedIn) {\n      dispatch(\n        openModal({\n          modalType: 'INTERACTION',\n          modalProps: {\n            type: 'follow',\n            accountId: accountId,\n            url: account?.url,\n          },\n        }),\n      );\n    }\n\n    if (!relationship || !accountId) return;\n\n    if (accountId === me) {\n      return;\n    } else if (account && (relationship.following || relationship.requested)) {\n      dispatch(\n        openModal({ modalType: 'CONFIRM_UNFOLLOW', modalProps: { account } }),\n      );\n    } else {\n      dispatch(followAccount(accountId));\n    }\n  }, [dispatch, accountId, relationship, account, signedIn]);\n\n  let label;\n\n  if (!signedIn) {\n    label = intl.formatMessage(messages.follow);\n  } else if (accountId === me) {\n    label = intl.formatMessage(messages.editProfile);\n  } else if (!relationship) {\n    label = <LoadingIndicator />;\n  } else if (relationship.following || relationship.requested) {\n    label = intl.formatMessage(messages.unfollow);\n  } else if (relationship.followed_by) {\n    label = intl.formatMessage(messages.followBack);\n  } else {\n    label = intl.formatMessage(messages.follow);\n  }\n\n  if (accountId === me) {\n    return (\n      <a\n        href='/settings/profile'\n        target='_blank'\n        rel='noopener'\n        className={classNames('button button-secondary', {\n          'button--compact': compact,\n        })}\n      >\n        {label}\n      </a>\n    );\n  }\n\n  return (\n    <Button\n      onClick={handleClick}\n      disabled={\n        relationship?.blocked_by ||\n        relationship?.blocking ||\n        (!(relationship?.following || relationship?.requested) &&\n          (account?.suspended || !!account?.moved))\n      }\n      secondary={following}\n      compact={compact}\n      className={following ? 'button--destructive' : undefined}\n    >\n      {label}\n    </Button>\n  );\n};\n"],"names":["messages","defineMessages","unfollow","id","defaultMessage","follow","followBack","editProfile","FollowButton","accountId","compact","intl","useIntl","dispatch","useAppDispatch","signedIn","useIdentity","account","useAppSelector","state","accounts","get","undefined","relationship","relationships","following","requested","useEffect","fetchRelationships","handleClick","useCallback","openModal","modalType","modalProps","type","url","me","followAccount","label","formatMessage","followed_by","LoadingIndicator","jsx","classNames","Button","blocked_by","blocking","suspended","moved"],"mappings":"6WAcA,MAAMA,EAAWC,EAAe,CAC9BC,SAAU,CAAEC,GAAE,mBAAsBC,eAAc,UAAA,EAClDC,OAAQ,CAAEF,GAAE,iBAAoBC,eAAc,QAAA,EAC9CE,WAAY,CAAEH,GAAE,sBAAyBC,eAAc,aAAA,EACvDG,YAAa,CAAEJ,GAAE,uBAA0BC,eAAc,cAAA,CAC3D,CAAC,EAEYI,EAGRA,CAAC,CAAEC,UAAAA,EAAWC,QAAAA,CAAQ,IAAM,CAC/B,MAAMC,EAAOC,EAAAA,EACPC,EAAWC,EAAAA,EACX,CAAEC,SAAAA,CAAAA,EAAaC,EAAAA,EACfC,EAAUC,EAAgBC,GAC9BV,EAAYU,EAAMC,SAASC,IAAIZ,CAAS,EAAIa,MAC9C,EACMC,EAAeL,EAAgBC,GACnCV,EAAYU,EAAMK,cAAcH,IAAIZ,CAAS,EAAIa,MACnD,EACMG,GAAYF,GAAAA,YAAAA,EAAcE,aAAaF,GAAAA,YAAAA,EAAcG,WAE3DC,EAAAA,UAAU,IAAM,CACVlB,GAAaM,GACfF,EAASe,EAAmB,CAACnB,CAAS,CAAC,CAAC,CAC1C,EACC,CAACI,EAAUJ,EAAWM,CAAQ,CAAC,EAElC,MAAMc,EAAcC,EAAAA,YAAY,IAAM,CAC/Bf,GACHF,EACEkB,EAAU,CACRC,UAAW,cACXC,WAAY,CACVC,KAAM,SACNzB,UAAAA,EACA0B,IAAKlB,GAAAA,YAAAA,EAASkB,GAAAA,CAChB,CACD,CACH,EAGE,GAACZ,GAAgB,CAACd,IAElBA,IAAc2B,IAEPnB,IAAYM,EAAaE,WAAaF,EAAaG,WAC5Db,EACEkB,EAAU,CAAEC,UAAW,mBAAoBC,WAAY,CAAEhB,QAAAA,CAAAA,CAAQ,CAAG,CACtE,EAEAJ,EAASwB,EAAc5B,CAAS,CAAC,EACnC,EACC,CAACI,EAAUJ,EAAWc,EAAcN,EAASF,CAAQ,CAAC,EAEzD,IAAIuB,EAgBJ,OAdKvB,EAEMN,IAAc2B,EACvBE,EAAQ3B,EAAK4B,cAAcvC,EAASO,WAAW,EACrCgB,EAEDA,EAAaE,WAAaF,EAAaG,UAChDY,EAAQ3B,EAAK4B,cAAcvC,EAASE,QAAQ,EACnCqB,EAAaiB,YACtBF,EAAQ3B,EAAK4B,cAAcvC,EAASM,UAAU,EAE9CgC,EAAQ3B,EAAK4B,cAAcvC,EAASK,MAAM,EAN1CiC,QAASG,EAAA,EAAgB,EAJzBH,EAAQ3B,EAAK4B,cAAcvC,EAASK,MAAM,EAaxCI,IAAc2B,EAEdM,MAAC,IAAA,CACC,KAAK,oBACL,OAAO,SACP,IAAI,WACJ,UAAWC,EAAW,0BAA2B,CAC/C,kBAAmBjC,CAAAA,CACpB,EAEA4B,SAAAA,EACH,EAKFI,EAAAA,IAACE,EAAA,CACC,QAASf,EACT,UACEN,GAAAA,YAAAA,EAAcsB,cACdtB,GAAAA,YAAAA,EAAcuB,WACb,EAAEvB,GAAAA,MAAAA,EAAcE,WAAaF,GAAAA,MAAAA,EAAcG,cACzCT,GAAAA,YAAAA,EAAS8B,YAAa,CAAC,EAAC9B,GAAAA,MAAAA,EAAS+B,QAEtC,UAAWvB,EACX,QAAAf,EACA,UAAWe,EAAY,sBAAwBH,OAE9CgB,SAAAA,CAAAA,CACH,CAEJ"}