{"version":3,"file":"report_modal-qMjGoJcG.js","sources":["../../app/javascript/mastodon/features/report/category.jsx","../../app/javascript/mastodon/features/report/comment.jsx","../../app/javascript/mastodon/features/report/rules.jsx","../../app/javascript/mastodon/features/report/components/status_check_box.jsx","../../app/javascript/mastodon/features/report/containers/status_check_box_container.js","../../app/javascript/mastodon/features/report/statuses.jsx","../../app/javascript/mastodon/features/report/thanks.jsx","../../app/javascript/mastodon/features/ui/components/report_modal.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst messages = defineMessages({\n  dislike: { id: 'report.reasons.dislike', defaultMessage: 'I don\\'t like it' },\n  dislike_description: { id: 'report.reasons.dislike_description', defaultMessage: 'It is not something you want to see' },\n  spam: { id: 'report.reasons.spam', defaultMessage: 'It\\'s spam' },\n  spam_description: { id: 'report.reasons.spam_description', defaultMessage: 'Malicious links, fake engagement, or repetitive replies' },\n  legal: { id: 'report.reasons.legal', defaultMessage: 'It\\'s illegal' },\n  legal_description: { id: 'report.reasons.legal_description', defaultMessage: 'You believe it violates the law of your or the server\\'s country' },\n  violation: { id: 'report.reasons.violation', defaultMessage: 'It violates server rules' },\n  violation_description: { id: 'report.reasons.violation_description', defaultMessage: 'You are aware that it breaks specific rules' },\n  other: { id: 'report.reasons.other', defaultMessage: 'It\\'s something else' },\n  other_description: { id: 'report.reasons.other_description', defaultMessage: 'The issue does not fit into other categories' },\n  status: { id: 'report.category.title_status', defaultMessage: 'post' },\n  account: { id: 'report.category.title_account', defaultMessage: 'profile' },\n});\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules'], ImmutableList()),\n});\n\nclass Category extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    category: PropTypes.string,\n    onChangeCategory: PropTypes.func.isRequired,\n    startedFrom: PropTypes.oneOf(['status', 'account']),\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep, category } = this.props;\n\n    switch(category) {\n    case 'dislike':\n      onNextStep('thanks');\n      break;\n    case 'violation':\n      onNextStep('rules');\n      break;\n    default:\n      onNextStep('statuses');\n      break;\n    }\n  };\n\n  handleCategoryToggle = (value, checked) => {\n    const { onChangeCategory } = this.props;\n\n    if (checked) {\n      onChangeCategory(value);\n    }\n  };\n\n  render () {\n    const { category, startedFrom, rules, intl } = this.props;\n\n    const options = rules.size > 0 ? [\n      'dislike',\n      'spam',\n      'legal',\n      'violation',\n      'other',\n    ] : [\n      'dislike',\n      'spam',\n      'legal',\n      'other',\n    ];\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.category.title' defaultMessage=\"Tell us what's going on with this {type}\" values={{ type: intl.formatMessage(messages[startedFrom]) }} /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.category.subtitle' defaultMessage='Choose the best match' /></p>\n\n        <div>\n          {options.map(item => (\n            <Option\n              key={item}\n              name='category'\n              value={item}\n              checked={category === item}\n              onToggle={this.handleCategoryToggle}\n              label={intl.formatMessage(messages[item])}\n              description={intl.formatMessage(messages[`${item}_description`])}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={category === null}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(Category));\n","import PropTypes from 'prop-types';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport { OrderedSet, List as ImmutableList } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { shallowEqual } from 'react-redux';\n\nimport Toggle from 'react-toggle';\n\nimport { fetchAccount } from 'mastodon/actions/accounts';\nimport { Button } from 'mastodon/components/button';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  placeholder: { id: 'report.placeholder', defaultMessage: 'Type or paste additional comments' },\n});\n\nconst selectRepliedToAccountIds = createSelector(\n  [\n    (state) => state.get('statuses'),\n    (_, statusIds) => statusIds,\n  ],\n  (statusesMap, statusIds) => statusIds.map((statusId) => statusesMap.getIn([statusId, 'in_reply_to_account_id'])),\n  {\n    resultEqualityCheck: shallowEqual,\n  }\n);\n\nconst Comment = ({ comment, domain, statusIds, isRemote, isSubmitting, selectedDomains, onSubmit, onChangeComment, onToggleDomain }) => {\n  const intl = useIntl();\n\n  const dispatch = useAppDispatch();\n  const loadedRef = useRef(false);\n\n  const handleClick = useCallback(() => onSubmit(), [onSubmit]);\n  const handleChange = useCallback((e) => onChangeComment(e.target.value), [onChangeComment]);\n  const handleToggleDomain = useCallback(e => onToggleDomain(e.target.value, e.target.checked), [onToggleDomain]);\n\n  const handleKeyDown = useCallback((e) => {\n    if (e.keyCode === 13 && (e.ctrlKey || e.metaKey)) {\n      handleClick();\n    }\n  }, [handleClick]);\n\n  // Memoize accountIds since we don't want it to trigger `useEffect` on each render\n  const accountIds = useAppSelector((state) => domain ? selectRepliedToAccountIds(state, statusIds) : ImmutableList());\n\n  // While we could memoize `availableDomains`, it is pretty inexpensive to recompute\n  const accountsMap = useAppSelector((state) => state.get('accounts'));\n  const availableDomains = domain ? OrderedSet([domain]).union(accountIds.map((accountId) => accountsMap.getIn([accountId, 'acct'], '').split('@')[1]).filter(domain => !!domain)) : OrderedSet();\n\n  useEffect(() => {\n    if (loadedRef.current) {\n      return;\n    }\n\n    loadedRef.current = true;\n\n    // First, pre-select known domains\n    availableDomains.forEach((domain) => {\n      onToggleDomain(domain, true);\n    });\n\n    // Then, fetch missing replied-to accounts\n    const unknownAccounts = OrderedSet(accountIds.filter(accountId => accountId && !accountsMap.has(accountId)));\n    unknownAccounts.forEach((accountId) => {\n      dispatch(fetchAccount(accountId));\n    });\n  });\n\n  return (\n    <>\n      <h3 className='report-dialog-modal__title'><FormattedMessage id='report.comment.title' defaultMessage='Is there anything else you think we should know?' /></h3>\n\n      <textarea\n        className='report-dialog-modal__textarea'\n        placeholder={intl.formatMessage(messages.placeholder)}\n        value={comment}\n        onChange={handleChange}\n        onKeyDown={handleKeyDown}\n        disabled={isSubmitting}\n      />\n\n      {isRemote && (\n        <>\n          <p className='report-dialog-modal__lead'><FormattedMessage id='report.forward_hint' defaultMessage='The account is from another server. Send an anonymized copy of the report there as well?' /></p>\n\n          { availableDomains.map((domain) => (\n            <label className='report-dialog-modal__toggle' key={`toggle-${domain}`}>\n              <Toggle checked={selectedDomains.includes(domain)} disabled={isSubmitting} onChange={handleToggleDomain} value={domain} />\n              <FormattedMessage id='report.forward' defaultMessage='Forward to {target}' values={{ target: domain }} />\n            </label>\n          ))}\n        </>\n      )}\n\n      <div className='flex-spacer' />\n\n      <div className='report-dialog-modal__actions'>\n        <Button onClick={handleClick} disabled={isSubmitting}><FormattedMessage id='report.submit' defaultMessage='Submit report' /></Button>\n      </div>\n    </>\n  );\n};\n\nComment.propTypes = {\n  comment: PropTypes.string.isRequired,\n  domain: PropTypes.string,\n  statusIds: ImmutablePropTypes.list.isRequired,\n  isRemote: PropTypes.bool,\n  isSubmitting: PropTypes.bool,\n  selectedDomains: ImmutablePropTypes.set.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  onChangeComment: PropTypes.func.isRequired,\n  onToggleDomain: PropTypes.func.isRequired,\n};\n\nexport default Comment;\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\n\nimport Option from './components/option';\n\nconst mapStateToProps = state => ({\n  rules: state.getIn(['server', 'server', 'rules']),\n  locale: state.getIn(['meta', 'locale']),\n});\n\nclass Rules extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    rules: ImmutablePropTypes.list,\n    locale: PropTypes.string,\n    selectedRuleIds: ImmutablePropTypes.set.isRequired,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('statuses');\n  };\n\n  handleRulesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { rules, locale, selectedRuleIds } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.rules.title' defaultMessage='Which rules are being violated?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.rules.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div>\n          {rules.map(item => (\n            <Option\n              key={item.get('id')}\n              name='rule_ids'\n              value={item.get('id')}\n              checked={selectedRuleIds.includes(item.get('id'))}\n              onToggle={this.handleRulesToggle}\n              label={item.getIn(['translations', locale, 'text']) || item.getIn(['translations', locale.split('-')[0], 'text']) || item.get('text')}\n              multiple\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick} disabled={selectedRuleIds.size < 1}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Rules);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport { Avatar } from 'mastodon/components/avatar';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport MediaAttachments from 'mastodon/components/media_attachments';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport StatusContent from 'mastodon/components/status_content';\nimport { VisibilityIcon } from 'mastodon/components/visibility_icon';\n\nimport Option from './option';\n\nclass StatusCheckBox extends PureComponent {\n\n  static propTypes = {\n    id: PropTypes.string.isRequired,\n    status: ImmutablePropTypes.map.isRequired,\n    checked: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n  };\n\n  handleStatusesToggle = (value, checked) => {\n    const { onToggle } = this.props;\n    onToggle(value, checked);\n  };\n\n  render () {\n    const { status, checked } = this.props;\n\n    if (status.get('reblog')) {\n      return null;\n    }\n\n    const labelComponent = (\n      <div className='status-check-box__status poll__option__text'>\n        <div className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <Avatar account={status.get('account')} size={46} />\n          </div>\n\n          <div>\n            <DisplayName account={status.get('account')} /> · <span className='status__visibility-icon'><VisibilityIcon visibility={status.get('visibility')} /></span> <RelativeTimestamp timestamp={status.get('created_at')} />\n          </div>\n        </div>\n\n        <StatusContent status={status} />\n        <MediaAttachments status={status} visible={false} />\n      </div>\n    );\n\n    return (\n      <Option\n        name='status_ids'\n        value={status.get('id')}\n        checked={checked}\n        onToggle={this.handleStatusesToggle}\n        label={status.get('search_index')}\n        labelComponent={labelComponent}\n        multiple\n      />\n    );\n  }\n\n}\n\nexport default StatusCheckBox;\n","import { connect } from 'react-redux';\n\nimport { makeGetStatus } from 'mastodon/selectors';\n\nimport StatusCheckBox from '../components/status_check_box';\n\nconst makeMapStateToProps = () => {\n  const getStatus = makeGetStatus();\n\n  const mapStateToProps = (state, { id }) => ({\n    status: getStatus(state, { id }),\n  });\n\n  return mapStateToProps;\n};\n\nexport default connect(makeMapStateToProps)(StatusCheckBox);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { Button } from 'mastodon/components/button';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport StatusCheckBox from 'mastodon/features/report/containers/status_check_box_container';\n\nconst mapStateToProps = (state, { accountId }) => ({\n  availableStatusIds: OrderedSet(state.getIn(['timelines', `account:${accountId}:with_replies`, 'items'])),\n  isLoading: state.getIn(['timelines', `account:${accountId}:with_replies`, 'isLoading']),\n});\n\nclass Statuses extends PureComponent {\n\n  static propTypes = {\n    onNextStep: PropTypes.func.isRequired,\n    accountId: PropTypes.string.isRequired,\n    availableStatusIds: ImmutablePropTypes.set.isRequired,\n    selectedStatusIds: ImmutablePropTypes.set.isRequired,\n    isLoading: PropTypes.bool,\n    onToggle: PropTypes.func.isRequired,\n  };\n\n  handleNextClick = () => {\n    const { onNextStep } = this.props;\n    onNextStep('comment');\n  };\n\n  render () {\n    const { availableStatusIds, selectedStatusIds, onToggle, isLoading } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'><FormattedMessage id='report.statuses.title' defaultMessage='Are there any posts that back up this report?' /></h3>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.statuses.subtitle' defaultMessage='Select all that apply' /></p>\n\n        <div className='report-dialog-modal__statuses'>\n          {isLoading ? <LoadingIndicator /> : availableStatusIds.union(selectedStatusIds).map(statusId => (\n            <StatusCheckBox\n              id={statusId}\n              key={statusId}\n              checked={selectedStatusIds.includes(statusId)}\n              onToggle={onToggle}\n            />\n          ))}\n        </div>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleNextClick}><FormattedMessage id='report.next' defaultMessage='Next' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Statuses);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport {\n  unfollowAccount,\n  muteAccount,\n  blockAccount,\n} from 'mastodon/actions/accounts';\nimport { Button } from 'mastodon/components/button';\n\nconst mapStateToProps = () => ({});\n\nclass Thanks extends PureComponent {\n\n  static propTypes = {\n    submitted: PropTypes.bool,\n    onClose: PropTypes.func.isRequired,\n    account: ImmutablePropTypes.record.isRequired,\n    dispatch: PropTypes.func.isRequired,\n  };\n\n  handleCloseClick = () => {\n    const { onClose } = this.props;\n    onClose();\n  };\n\n  handleUnfollowClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(unfollowAccount(account.get('id')));\n    onClose();\n  };\n\n  handleMuteClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(muteAccount(account.get('id')));\n    onClose();\n  };\n\n  handleBlockClick = () => {\n    const { dispatch, account, onClose } = this.props;\n    dispatch(blockAccount(account.get('id')));\n    onClose();\n  };\n\n  render () {\n    const { account, submitted } = this.props;\n\n    return (\n      <>\n        <h3 className='report-dialog-modal__title'>{submitted ? <FormattedMessage id='report.thanks.title_actionable' defaultMessage=\"Thanks for reporting, we'll look into this.\" /> : <FormattedMessage id='report.thanks.title' defaultMessage=\"Don't want to see this?\" />}</h3>\n        <p className='report-dialog-modal__lead'>{submitted ? <FormattedMessage id='report.thanks.take_action_actionable' defaultMessage='While we review this, you can take action against @{name}:' values={{ name: account.get('username') }} /> : <FormattedMessage id='report.thanks.take_action' defaultMessage='Here are your options for controlling what you see on Mastodon:' />}</p>\n\n        {account.getIn(['relationship', 'following']) && (\n          <>\n            <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='report.unfollow' defaultMessage='Unfollow @{name}' values={{ name: account.get('username') }} /></h4>\n            <p className='report-dialog-modal__lead'><FormattedMessage id='report.unfollow_explanation' defaultMessage='You are following this account. To not see their posts in your home feed anymore, unfollow them.' /></p>\n            <Button secondary onClick={this.handleUnfollowClick}><FormattedMessage id='account.unfollow' defaultMessage='Unfollow' /></Button>\n            <hr />\n          </>\n        )}\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.mute' defaultMessage='Mute @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.mute_explanation' defaultMessage='You will not see their posts. They can still follow you and see your posts and will not know that they are muted.' /></p>\n        <Button secondary onClick={this.handleMuteClick}>{!account.getIn(['relationship', 'muting']) ? <FormattedMessage id='report.mute' defaultMessage='Mute' /> : <FormattedMessage id='account.muted' defaultMessage='Muted' />}</Button>\n\n        <hr />\n\n        <h4 className='report-dialog-modal__subtitle'><FormattedMessage id='account.block' defaultMessage='Block @{name}' values={{ name: account.get('username') }} /></h4>\n        <p className='report-dialog-modal__lead'><FormattedMessage id='report.block_explanation' defaultMessage='You will not see their posts. They will not be able to see your posts or follow you. They will be able to tell that they are blocked.' /></p>\n        <Button secondary onClick={this.handleBlockClick}>{!account.getIn(['relationship', 'blocking']) ? <FormattedMessage id='report.block' defaultMessage='Block' /> : <FormattedMessage id='account.blocked' defaultMessage='Blocked' />}</Button>\n\n        <div className='flex-spacer' />\n\n        <div className='report-dialog-modal__actions'>\n          <Button onClick={this.handleCloseClick}><FormattedMessage id='report.close' defaultMessage='Done' /></Button>\n        </div>\n      </>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(Thanks);\n","import PropTypes from 'prop-types';\n\nimport { defineMessages, FormattedMessage, injectIntl } from 'react-intl';\n\nimport { OrderedSet } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { submitReport } from 'mastodon/actions/reports';\nimport { fetchServer } from 'mastodon/actions/server';\nimport { expandAccountTimeline } from 'mastodon/actions/timelines';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport Category from 'mastodon/features/report/category';\nimport Comment from 'mastodon/features/report/comment';\nimport Rules from 'mastodon/features/report/rules';\nimport Statuses from 'mastodon/features/report/statuses';\nimport Thanks from 'mastodon/features/report/thanks';\nimport { makeGetAccount } from 'mastodon/selectors';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nconst makeMapStateToProps = () => {\n  const getAccount = makeGetAccount();\n\n  const mapStateToProps = (state, { accountId }) => ({\n    account: getAccount(state, accountId),\n  });\n\n  return mapStateToProps;\n};\n\nclass ReportModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    accountId: PropTypes.string.isRequired,\n    statusId: PropTypes.string,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    account: ImmutablePropTypes.record.isRequired,\n  };\n\n  state = {\n    step: 'category',\n    selectedStatusIds: OrderedSet(this.props.statusId ? [this.props.statusId] : []),\n    selectedDomains: OrderedSet(),\n    comment: '',\n    category: null,\n    selectedRuleIds: OrderedSet(),\n    isSubmitting: false,\n    isSubmitted: false,\n  };\n\n  handleSubmit = () => {\n    const { dispatch, accountId } = this.props;\n    const { selectedStatusIds, selectedDomains, comment, category, selectedRuleIds } = this.state;\n\n    this.setState({ isSubmitting: true });\n\n    dispatch(submitReport({\n      account_id: accountId,\n      status_ids: selectedStatusIds.toArray(),\n      forward_to_domains: selectedDomains.toArray(),\n      comment,\n      forward: selectedDomains.size > 0,\n      category,\n      rule_ids: selectedRuleIds.toArray(),\n    }, this.handleSuccess, this.handleFail));\n  };\n\n  handleSuccess = () => {\n    this.setState({ isSubmitting: false, isSubmitted: true, step: 'thanks' });\n  };\n\n  handleFail = () => {\n    this.setState({ isSubmitting: false });\n  };\n\n  handleStatusToggle = (statusId, checked) => {\n    const { selectedStatusIds } = this.state;\n\n    if (checked) {\n      this.setState({ selectedStatusIds: selectedStatusIds.add(statusId) });\n    } else {\n      this.setState({ selectedStatusIds: selectedStatusIds.remove(statusId) });\n    }\n  };\n\n  handleDomainToggle = (domain, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.add(domain) }));\n    } else {\n      this.setState((state) => ({ selectedDomains: state.selectedDomains.remove(domain) }));\n    }\n  };\n\n  handleRuleToggle = (ruleId, checked) => {\n    if (checked) {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.add(ruleId) }));\n    } else {\n      this.setState((state) => ({ selectedRuleIds: state.selectedRuleIds.remove(ruleId) }));\n    }\n  };\n\n  handleChangeCategory = category => {\n    this.setState({ category });\n  };\n\n  handleChangeComment = comment => {\n    this.setState({ comment });\n  };\n\n  handleNextStep = step => {\n    this.setState({ step });\n  };\n\n  componentDidMount () {\n    const { dispatch, accountId } = this.props;\n\n    dispatch(expandAccountTimeline(accountId, { withReplies: true }));\n    dispatch(fetchServer());\n  }\n\n  render () {\n    const {\n      accountId,\n      account,\n      intl,\n      onClose,\n    } = this.props;\n\n    if (!account) {\n      return null;\n    }\n\n    const {\n      step,\n      selectedStatusIds,\n      selectedRuleIds,\n      selectedDomains,\n      comment,\n      category,\n      isSubmitting,\n      isSubmitted,\n    } = this.state;\n\n    const domain   = account.get('acct').split('@')[1];\n    const isRemote = !!domain;\n\n    let stepComponent;\n\n    switch(step) {\n    case 'category':\n      stepComponent = (\n        <Category\n          onNextStep={this.handleNextStep}\n          startedFrom={this.props.statusId ? 'status' : 'account'}\n          category={category}\n          onChangeCategory={this.handleChangeCategory}\n        />\n      );\n      break;\n    case 'rules':\n      stepComponent = (\n        <Rules\n          onNextStep={this.handleNextStep}\n          selectedRuleIds={selectedRuleIds}\n          onToggle={this.handleRuleToggle}\n        />\n      );\n      break;\n    case 'statuses':\n      stepComponent = (\n        <Statuses\n          onNextStep={this.handleNextStep}\n          accountId={accountId}\n          selectedStatusIds={selectedStatusIds}\n          onToggle={this.handleStatusToggle}\n        />\n      );\n      break;\n    case 'comment':\n      stepComponent = (\n        <Comment\n          onSubmit={this.handleSubmit}\n          isSubmitting={isSubmitting}\n          isRemote={isRemote}\n          comment={comment}\n          domain={domain}\n          onChangeComment={this.handleChangeComment}\n          statusIds={selectedStatusIds}\n          selectedDomains={selectedDomains}\n          onToggleDomain={this.handleDomainToggle}\n        />\n      );\n      break;\n    case 'thanks':\n      stepComponent = (\n        <Thanks\n          submitted={isSubmitted}\n          account={account}\n          onClose={onClose}\n        />\n      );\n    }\n\n    return (\n      <div className='modal-root__modal report-dialog-modal'>\n        <div className='report-modal__target'>\n          <IconButton className='report-modal__close' title={intl.formatMessage(messages.close)} icon='times' iconComponent={CloseIcon} onClick={onClose} size={20} />\n          <FormattedMessage id='report.target' defaultMessage='Report {target}' values={{ target: <strong>{account.get('acct')}</strong> }} />\n        </div>\n\n        <div className='report-dialog-modal__container'>\n          {stepComponent}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(makeMapStateToProps)(injectIntl(ReportModal));\n"],"names":["messages","defineMessages","dislike","id","defaultMessage","dislike_description","spam","spam_description","legal","legal_description","violation","violation_description","other","other_description","status","account","mapStateToProps","state","rules","getIn","ImmutableList","Category","PureComponent","handleNextClick","onNextStep","category","props","handleCategoryToggle","value","checked","onChangeCategory","render","startedFrom","intl","options","size","jsxs","Fragment","jsx","FormattedMessage","type","formatMessage","map","Option","item","Button","Category$1","connect","injectIntl","placeholder","selectRepliedToAccountIds","createSelector","get","_","statusIds","statusesMap","statusId","resultEqualityCheck","shallowEqual","Comment","comment","domain","isRemote","isSubmitting","selectedDomains","onSubmit","onChangeComment","onToggleDomain","useIntl","dispatch","useAppDispatch","loadedRef","useRef","handleClick","useCallback","handleChange","e","target","handleToggleDomain","handleKeyDown","keyCode","ctrlKey","metaKey","accountIds","useAppSelector","accountsMap","availableDomains","OrderedSet","union","accountId","split","filter","useEffect","current","forEach","has","fetchAccount","Toggle","includes","locale","Rules","handleRulesToggle","onToggle","selectedRuleIds","Rules$1","handleStatusesToggle","labelComponent","Avatar","DisplayName","VisibilityIcon","RelativeTimestamp","StatusContent","MediaAttachments","makeMapStateToProps","getStatus","makeGetStatus","StatusCheckBox","availableStatusIds","isLoading","Statuses","selectedStatusIds","LoadingIndicator","Statuses$1","Thanks","handleCloseClick","onClose","handleUnfollowClick","unfollowAccount","handleMuteClick","muteAccount","handleBlockClick","blockAccount","submitted","name","Thanks$1","close","getAccount","makeGetAccount","ReportModal","ImmutablePureComponent","step","isSubmitted","handleSubmit","setState","submitReport","account_id","status_ids","toArray","forward_to_domains","forward","rule_ids","handleSuccess","handleFail","handleStatusToggle","add","remove","handleDomainToggle","handleRuleToggle","ruleId","handleChangeCategory","handleChangeComment","handleNextStep","componentDidMount","expandAccountTimeline","withReplies","fetchServer","stepComponent","IconButton","CloseIcon","__publicField","propTypes","PropTypes","string","isRequired","func","object","ImmutablePropTypes","record","report_modal"],"mappings":"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"}