{"version":3,"file":"embedded_status-CRZOb2jI.js","sources":["../../app/javascript/mastodon/features/notifications_v2/components/embedded_status.tsx"],"sourcesContent":["import { useCallback, useRef } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { useHistory } from 'react-router-dom';\n\nimport type { List as ImmutableList, RecordOf } from 'immutable';\n\nimport BarChart4BarsIcon from '@/material-icons/400-24px/bar_chart_4_bars.svg?react';\nimport PhotoLibraryIcon from '@/material-icons/400-24px/photo_library.svg?react';\nimport { toggleStatusSpoilers } from 'mastodon/actions/statuses';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { ContentWarning } from 'mastodon/components/content_warning';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { Icon } from 'mastodon/components/icon';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { EmbeddedStatusContent } from './embedded_status_content';\n\nexport type Mention = RecordOf<{ url: string; acct: string }>;\n\nexport const EmbeddedStatus: React.FC<{ statusId: string }> = ({\n  statusId,\n}) => {\n  const history = useHistory();\n  const clickCoordinatesRef = useRef<[number, number] | null>();\n  const dispatch = useAppDispatch();\n\n  const status = useAppSelector((state) => state.statuses.get(statusId));\n\n  const account = useAppSelector((state) =>\n    state.accounts.get(status?.get('account') as string),\n  );\n\n  const handleMouseDown = useCallback<React.MouseEventHandler<HTMLDivElement>>(\n    ({ clientX, clientY }) => {\n      clickCoordinatesRef.current = [clientX, clientY];\n    },\n    [clickCoordinatesRef],\n  );\n\n  const handleMouseUp = useCallback<React.MouseEventHandler<HTMLDivElement>>(\n    ({ clientX, clientY, target, button, ctrlKey, metaKey }) => {\n      const [startX, startY] = clickCoordinatesRef.current ?? [0, 0];\n      const [deltaX, deltaY] = [\n        Math.abs(clientX - startX),\n        Math.abs(clientY - startY),\n      ];\n\n      let element: HTMLDivElement | null = target as HTMLDivElement;\n\n      while (element) {\n        if (\n          element.localName === 'button' ||\n          element.localName === 'a' ||\n          element.localName === 'label'\n        ) {\n          return;\n        }\n\n        element = element.parentNode as HTMLDivElement | null;\n      }\n\n      if (deltaX + deltaY < 5 && account) {\n        const path = `/@${account.acct}/${statusId}`;\n\n        if (button === 0 && !(ctrlKey || metaKey)) {\n          history.push(path);\n        } else if (button === 1 || (button === 0 && (ctrlKey || metaKey))) {\n          window.open(path, '_blank', 'noopener');\n        }\n      }\n\n      clickCoordinatesRef.current = null;\n    },\n    [clickCoordinatesRef, statusId, account, history],\n  );\n\n  const handleMouseEnter = useCallback<React.MouseEventHandler<HTMLDivElement>>(\n    ({ currentTarget }) => {\n      const emojis =\n        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n\n      for (const emoji of emojis) {\n        const newSrc = emoji.getAttribute('data-original');\n        if (newSrc) emoji.src = newSrc;\n      }\n    },\n    [],\n  );\n\n  const handleMouseLeave = useCallback<React.MouseEventHandler<HTMLDivElement>>(\n    ({ currentTarget }) => {\n      const emojis =\n        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n\n      for (const emoji of emojis) {\n        const newSrc = emoji.getAttribute('data-static');\n        if (newSrc) emoji.src = newSrc;\n      }\n    },\n    [],\n  );\n\n  const handleContentWarningClick = useCallback(() => {\n    dispatch(toggleStatusSpoilers(statusId));\n  }, [dispatch, statusId]);\n\n  if (!status) {\n    return null;\n  }\n\n  // Assign status attributes to variables with a forced type, as status is not yet properly typed\n  const contentHtml = status.get('contentHtml') as string;\n  const contentWarning = status.get('spoilerHtml') as string;\n  const poll = status.get('poll');\n  const language = status.get('language') as string;\n  const mentions = status.get('mentions') as ImmutableList<Mention>;\n  const expanded = !status.get('hidden') || !contentWarning;\n  const mediaAttachmentsSize = (\n    status.get('media_attachments') as ImmutableList<unknown>\n  ).size;\n\n  return (\n    <div\n      className='notification-group__embedded-status'\n      role='button'\n      tabIndex={-1}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      <div className='notification-group__embedded-status__account'>\n        <Avatar account={account} size={16} />\n        <DisplayName account={account} />\n      </div>\n\n      {contentWarning && (\n        <ContentWarning\n          text={contentWarning}\n          onClick={handleContentWarningClick}\n          expanded={expanded}\n        />\n      )}\n\n      {(!contentWarning || expanded) && (\n        <EmbeddedStatusContent\n          className='notification-group__embedded-status__content reply-indicator__content translate'\n          content={contentHtml}\n          language={language}\n          mentions={mentions}\n        />\n      )}\n\n      {expanded && (poll || mediaAttachmentsSize > 0) && (\n        <div className='notification-group__embedded-status__attachments reply-indicator__attachments'>\n          {!!poll && (\n            <>\n              <Icon icon={BarChart4BarsIcon} id='bar-chart-4-bars' />\n              <FormattedMessage\n                id='reply_indicator.poll'\n                defaultMessage='Poll'\n              />\n            </>\n          )}\n          {mediaAttachmentsSize > 0 && (\n            <>\n              <Icon icon={PhotoLibraryIcon} id='photo-library' />\n              <FormattedMessage\n                id='reply_indicator.attachments'\n                defaultMessage='{count, plural, one {# attachment} other {# attachments}}'\n                values={{ count: mediaAttachmentsSize }}\n              />\n            </>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n"],"names":["EmbeddedStatus","statusId","history","useHistory","clickCoordinatesRef","useRef","dispatch","useAppDispatch","status","useAppSelector","state","statuses","get","account","accounts","handleMouseDown","useCallback","clientX","clientY","current","handleMouseUp","target","button","ctrlKey","metaKey","startX","startY","deltaX","deltaY","Math","abs","element","localName","parentNode","path","acct","push","window","open","handleMouseEnter","currentTarget","emojis","querySelectorAll","emoji","newSrc","getAttribute","src","handleMouseLeave","handleContentWarningClick","toggleStatusSpoilers","contentHtml","contentWarning","poll","language","mentions","expanded","mediaAttachmentsSize","size","jsxs","jsx","Avatar","DisplayName","ContentWarning","EmbeddedStatusContent","Fragment","Icon","BarChart4BarsIcon","FormattedMessage","PhotoLibraryIcon","count"],"mappings":"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"}