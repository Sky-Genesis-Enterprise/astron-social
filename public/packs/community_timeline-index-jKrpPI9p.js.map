{"version":3,"file":"community_timeline-index-jKrpPI9p.js","sources":["../../app/javascript/mastodon/features/community_timeline/components/column_settings.jsx","../../app/javascript/mastodon/features/community_timeline/containers/column_settings_container.js","../../app/javascript/mastodon/features/community_timeline/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div className='column-settings'>\n        <section>\n          <div className='column-settings__row'>\n            <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'community']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['community', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { domain } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { connectCommunityStream } from '../../actions/streaming';\nimport { expandCommunityTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.community', defaultMessage: 'Local timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'community', 'other', 'onlyMedia']);\n  const timelineState = state.getIn(['timelines', `community${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n  };\n};\n\nclass CommunityTimeline extends PureComponent {\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    identity: identityContextPropShape,\n    dispatch: PropTypes.func.isRequired,\n    columnId: PropTypes.string,\n    intl: PropTypes.object.isRequired,\n    hasUnread: PropTypes.bool,\n    multiColumn: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('COMMUNITY', { other: { onlyMedia } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia } = this.props;\n    const { signedIn } = this.props.identity;\n\n    dispatch(expandCommunityTimeline({ onlyMedia }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.props.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia) {\n      const { dispatch, onlyMedia } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandCommunityTimeline({ onlyMedia }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectCommunityStream({ onlyMedia }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia } = this.props;\n\n    dispatch(expandCommunityTimeline({ maxId, onlyMedia }));\n  };\n\n  render () {\n    const { intl, hasUnread, columnId, multiColumn, onlyMedia } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='users'\n          iconComponent={PeopleIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='community_timeline'><FormattedMessage id='dismissable_banner.community_timeline' defaultMessage='These are the most recent public posts from people whose accounts are hosted by {domain}.' values={{ domain }} /></DismissableBanner>}\n          trackScroll={!pinned}\n          scrollKey={`community_timeline-${columnId}`}\n          timelineId={`community${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          emptyMessage={<FormattedMessage id='empty_column.community' defaultMessage='The local timeline is empty. Write something publicly to get the ball rolling!' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default withIdentity(connect(mapStateToProps)(injectIntl(CommunityTimeline)));\n"],"names":["ColumnSettings","PureComponent","render","settings","onChange","props","jsx","SettingToggle","FormattedMessage","ColumnSettings$1","injectIntl","mapStateToProps","state","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","key","checked","changeColumnParams","changeSetting","ColumnSettingsContainer","connect","messages","defineMessages","title","id","defaultMessage","onlyMedia","timelineState","hasUnread","CommunityTimeline","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandCommunityTimeline","componentDidMount","signedIn","identity","disconnect","connectCommunityStream","componentDidUpdate","prevProps","componentWillUnmount","intl","multiColumn","pinned","jsxs","Column","formatMessage","ColumnHeader","PeopleIcon","StatusListContainer","DismissableBanner","domain","Helmet","__publicField","defaultProps","withIdentity"],"mappings":"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"}