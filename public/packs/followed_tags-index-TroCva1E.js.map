{"version":3,"file":"followed_tags-index-TroCva1E.js","sources":["../../app/javascript/mastodon/features/followed_tags/index.tsx"],"sourcesContent":["import { useEffect, useState, useCallback, useRef } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { isFulfilled } from '@reduxjs/toolkit';\n\nimport TagIcon from '@/material-icons/400-24px/tag.svg?react';\nimport { unfollowHashtag } from 'mastodon/actions/tags_typed';\nimport { apiGetFollowedTags } from 'mastodon/api/tags';\nimport type { ApiHashtagJSON } from 'mastodon/api_types/tags';\nimport { Button } from 'mastodon/components/button';\nimport { Column } from 'mastodon/components/column';\nimport type { ColumnRef } from 'mastodon/components/column';\nimport { ColumnHeader } from 'mastodon/components/column_header';\nimport { Hashtag } from 'mastodon/components/hashtag';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { useAppDispatch } from 'mastodon/store';\n\nconst messages = defineMessages({\n  heading: { id: 'followed_tags', defaultMessage: 'Followed hashtags' },\n});\n\nconst FollowedTag: React.FC<{\n  tag: ApiHashtagJSON;\n  onUnfollow: (arg0: string) => void;\n}> = ({ tag, onUnfollow }) => {\n  const dispatch = useAppDispatch();\n  const tagId = tag.name;\n\n  const handleClick = useCallback(() => {\n    void dispatch(unfollowHashtag({ tagId })).then((result) => {\n      if (isFulfilled(result)) {\n        onUnfollow(tagId);\n      }\n\n      return '';\n    });\n  }, [dispatch, onUnfollow, tagId]);\n\n  const people =\n    parseInt(tag.history[0].accounts) +\n    parseInt(tag.history[1]?.accounts ?? '');\n\n  return (\n    <Hashtag\n      name={tag.name}\n      to={`/tags/${tag.name}`}\n      withGraph={false}\n      people={people}\n    >\n      <Button onClick={handleClick}>\n        <FormattedMessage id='account.unfollow' defaultMessage='Unfollow' />\n      </Button>\n    </Hashtag>\n  );\n};\n\nconst FollowedTags: React.FC<{ multiColumn: boolean }> = ({ multiColumn }) => {\n  const intl = useIntl();\n  const [tags, setTags] = useState<ApiHashtagJSON[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [next, setNext] = useState<string | undefined>();\n  const hasMore = !!next;\n  const columnRef = useRef<ColumnRef>(null);\n\n  useEffect(() => {\n    setLoading(true);\n\n    void apiGetFollowedTags()\n      .then(({ tags, links }) => {\n        const next = links.refs.find((link) => link.rel === 'next');\n\n        setTags(tags);\n        setLoading(false);\n        setNext(next?.uri);\n\n        return '';\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }, [setTags, setLoading, setNext]);\n\n  const handleLoadMore = useCallback(() => {\n    setLoading(true);\n\n    void apiGetFollowedTags(next)\n      .then(({ tags, links }) => {\n        const next = links.refs.find((link) => link.rel === 'next');\n\n        setLoading(false);\n        setTags((previousTags) => [...previousTags, ...tags]);\n        setNext(next?.uri);\n\n        return '';\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }, [setTags, setLoading, setNext, next]);\n\n  const handleUnfollow = useCallback(\n    (tagId: string) => {\n      setTags((tags) => tags.filter((tag) => tag.name !== tagId));\n    },\n    [setTags],\n  );\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, []);\n\n  const emptyMessage = (\n    <FormattedMessage\n      id='empty_column.followed_tags'\n      defaultMessage='You have not followed any hashtags yet. When you do, they will show up here.'\n    />\n  );\n\n  return (\n    <Column\n      bindToDocument={!multiColumn}\n      ref={columnRef}\n      label={intl.formatMessage(messages.heading)}\n    >\n      <ColumnHeader\n        icon='hashtag'\n        iconComponent={TagIcon}\n        title={intl.formatMessage(messages.heading)}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n        showBackButton\n      />\n\n      <ScrollableList\n        scrollKey='followed_tags'\n        emptyMessage={emptyMessage}\n        hasMore={hasMore}\n        isLoading={loading}\n        showLoading={loading && tags.length === 0}\n        onLoadMore={handleLoadMore}\n        trackScroll={!multiColumn}\n        bindToDocument={!multiColumn}\n      >\n        {tags.map((tag) => (\n          <FollowedTag key={tag.name} tag={tag} onUnfollow={handleUnfollow} />\n        ))}\n      </ScrollableList>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.heading)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default FollowedTags;\n"],"names":["messages","defineMessages","heading","id","defaultMessage","FollowedTag","tag","onUnfollow","dispatch","useAppDispatch","tagId","name","handleClick","useCallback","unfollowHashtag","then","result","isFulfilled","people","parseInt","history","accounts","jsx","Hashtag","Button","FormattedMessage","FollowedTags","multiColumn","intl","useIntl","tags","setTags","useState","loading","setLoading","next","setNext","hasMore","columnRef","useRef","useEffect","apiGetFollowedTags","links","refs","find","link","rel","uri","catch","handleLoadMore","previousTags","handleUnfollow","filter","handleHeaderClick","current","scrollTop","emptyMessage","jsxs","Column","formatMessage","ColumnHeader","TagIcon","ScrollableList","length","map","Helmet"],"mappings":"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"}