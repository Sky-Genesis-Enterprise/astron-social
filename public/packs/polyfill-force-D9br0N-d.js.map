{"version":3,"file":"polyfill-force-D9br0N-d.js","sources":["../../node_modules/@formatjs/ecma402-abstract/lib/CanonicalizeLocaleList.js","../../node_modules/@formatjs/ecma402-abstract/lib/CanonicalizeTimeZoneName.js","../../node_modules/decimal.js/decimal.mjs","../../node_modules/@formatjs/ecma402-abstract/lib/constants.js","../../node_modules/@formatjs/ecma402-abstract/lib/utils.js","../../node_modules/@formatjs/ecma402-abstract/lib/262.js","../../node_modules/@formatjs/ecma402-abstract/lib/CoerceOptionsToObject.js","../../node_modules/@formatjs/ecma402-abstract/lib/DefaultNumberOption.js","../../node_modules/@formatjs/ecma402-abstract/lib/GetNumberOption.js","../../node_modules/@formatjs/ecma402-abstract/lib/GetOption.js","../../node_modules/@formatjs/ecma402-abstract/lib/GetOptionsObject.js","../../node_modules/@formatjs/ecma402-abstract/lib/GetStringOrBooleanOption.js","../../node_modules/@formatjs/ecma402-abstract/lib/IsSanctionedSimpleUnitIdentifier.js","../../node_modules/@formatjs/ecma402-abstract/lib/IsValidTimeZoneName.js","../../node_modules/@formatjs/ecma402-abstract/lib/IsWellFormedCurrencyCode.js","../../node_modules/@formatjs/ecma402-abstract/lib/IsWellFormedUnitIdentifier.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ApplyUnsignedRoundingMode.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/CollapseNumberRange.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ComputeExponentForMagnitude.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/GetUnsignedRoundingMode.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawFixed.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ToRawPrecision.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericToString.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/ComputeExponent.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/CurrencyDigits.js","../../node_modules/@formatjs/ecma402-abstract/lib/regex.generated.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/digit-mapping.generated.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/format_to_parts.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatApproximately.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberPattern.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumeric.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/PartitionNumberRangePattern.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericRange.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericRangeToParts.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/FormatNumericToParts.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/SetNumberFormatDigitOptions.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/SetNumberFormatUnitOptions.js","../../node_modules/@formatjs/ecma402-abstract/lib/NumberFormat/InitializeNumberFormat.js","../../node_modules/@formatjs/ecma402-abstract/lib/PartitionPattern.js","../../node_modules/@formatjs/ecma402-abstract/lib/SupportedLocales.js","../../node_modules/@formatjs/ecma402-abstract/lib/data.js","../../node_modules/@formatjs/ecma402-abstract/lib/types/date-time.js","../../node_modules/@formatjs/ecma402-abstract/lib/ToIntlMathematicalValue.js","../../node_modules/@formatjs/intl-pluralrules/abstract/InitializePluralRules.js","../../node_modules/@formatjs/intl-pluralrules/abstract/GetOperands.js","../../node_modules/@formatjs/intl-pluralrules/abstract/ResolvePlural.js","../../node_modules/@formatjs/intl-pluralrules/get_internal_slots.js","../../node_modules/@formatjs/intl-pluralrules/index.js","../../node_modules/@formatjs/intl-pluralrules/polyfill-force.js"],"sourcesContent":["/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-canonicalizelocalelist\n * @param locales\n */\nexport function CanonicalizeLocaleList(locales) {\n    // TODO\n    return Intl.getCanonicalLocales(locales);\n}\n","/**\n * https://tc39.es/ecma402/#sec-canonicalizetimezonename\n * @param tz\n */\nexport function CanonicalizeTimeZoneName(tz, _a) {\n    var zoneNames = _a.zoneNames, uppercaseLinks = _a.uppercaseLinks;\n    var uppercasedTz = tz.toUpperCase();\n    var uppercasedZones = zoneNames.reduce(function (all, z) {\n        all[z.toUpperCase()] = z;\n        return all;\n    }, {});\n    var ianaTimeZone = uppercaseLinks[uppercasedTz] || uppercasedZones[uppercasedTz];\n    if (ianaTimeZone === 'Etc/UTC' || ianaTimeZone === 'Etc/GMT') {\n        return 'UTC';\n    }\n    return ianaTimeZone;\n}\n","/*!\r\n *  decimal.js v10.5.0\r\n *  An arbitrary-precision Decimal type for JavaScript.\r\n *  https://github.com/MikeMcl/decimal.js\r\n *  Copyright (c) 2025 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *  MIT Licence\r\n */\r\n\r\n\r\n// -----------------------------------  EDITABLE DEFAULTS  ------------------------------------ //\r\n\r\n\r\n  // The maximum exponent magnitude.\r\n  // The limit on the value of `toExpNeg`, `toExpPos`, `minE` and `maxE`.\r\nvar EXP_LIMIT = 9e15,                      // 0 to 9e15\r\n\r\n  // The limit on the value of `precision`, and on the value of the first argument to\r\n  // `toDecimalPlaces`, `toExponential`, `toFixed`, `toPrecision` and `toSignificantDigits`.\r\n  MAX_DIGITS = 1e9,                        // 0 to 1e9\r\n\r\n  // Base conversion alphabet.\r\n  NUMERALS = '0123456789abcdef',\r\n\r\n  // The natural logarithm of 10 (1025 digits).\r\n  LN10 = '2.3025850929940456840179914546843642076011014886287729760333279009675726096773524802359972050895982983419677840422862486334095254650828067566662873690987816894829072083255546808437998948262331985283935053089653777326288461633662222876982198867465436674744042432743651550489343149393914796194044002221051017141748003688084012647080685567743216228355220114804663715659121373450747856947683463616792101806445070648000277502684916746550586856935673420670581136429224554405758925724208241314695689016758940256776311356919292033376587141660230105703089634572075440370847469940168269282808481184289314848524948644871927809676271275775397027668605952496716674183485704422507197965004714951050492214776567636938662976979522110718264549734772662425709429322582798502585509785265383207606726317164309505995087807523710333101197857547331541421808427543863591778117054309827482385045648019095610299291824318237525357709750539565187697510374970888692180205189339507238539205144634197265287286965110862571492198849978748873771345686209167058',\r\n\r\n  // Pi (1025 digits).\r\n  PI = '3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679821480865132823066470938446095505822317253594081284811174502841027019385211055596446229489549303819644288109756659334461284756482337867831652712019091456485669234603486104543266482133936072602491412737245870066063155881748815209209628292540917153643678925903600113305305488204665213841469519415116094330572703657595919530921861173819326117931051185480744623799627495673518857527248912279381830119491298336733624406566430860213949463952247371907021798609437027705392171762931767523846748184676694051320005681271452635608277857713427577896091736371787214684409012249534301465495853710507922796892589235420199561121290219608640344181598136297747713099605187072113499999983729780499510597317328160963185950244594553469083026425223082533446850352619311881710100031378387528865875332083814206171776691473035982534904287554687311595628638823537875937519577818577805321712268066130019278766111959092164201989380952572010654858632789',\r\n\r\n\r\n  // The initial configuration properties of the Decimal constructor.\r\n  DEFAULTS = {\r\n\r\n    // These values must be integers within the stated ranges (inclusive).\r\n    // Most of these values can be changed at run-time using the `Decimal.config` method.\r\n\r\n    // The maximum number of significant digits of the result of a calculation or base conversion.\r\n    // E.g. `Decimal.config({ precision: 20 });`\r\n    precision: 20,                         // 1 to MAX_DIGITS\r\n\r\n    // The rounding mode used when rounding to `precision`.\r\n    //\r\n    // ROUND_UP         0 Away from zero.\r\n    // ROUND_DOWN       1 Towards zero.\r\n    // ROUND_CEIL       2 Towards +Infinity.\r\n    // ROUND_FLOOR      3 Towards -Infinity.\r\n    // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n    // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n    // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n    // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n    // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n    //\r\n    // E.g.\r\n    // `Decimal.rounding = 4;`\r\n    // `Decimal.rounding = Decimal.ROUND_HALF_UP;`\r\n    rounding: 4,                           // 0 to 8\r\n\r\n    // The modulo mode used when calculating the modulus: a mod n.\r\n    // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n    // The remainder (r) is calculated as: r = a - n * q.\r\n    //\r\n    // UP         0 The remainder is positive if the dividend is negative, else is negative.\r\n    // DOWN       1 The remainder has the same sign as the dividend (JavaScript %).\r\n    // FLOOR      3 The remainder has the same sign as the divisor (Python %).\r\n    // HALF_EVEN  6 The IEEE 754 remainder function.\r\n    // EUCLID     9 Euclidian division. q = sign(n) * floor(a / abs(n)). Always positive.\r\n    //\r\n    // Truncated division (1), floored division (3), the IEEE 754 remainder (6), and Euclidian\r\n    // division (9) are commonly used for the modulus operation. The other rounding modes can also\r\n    // be used, but they may not give useful results.\r\n    modulo: 1,                             // 0 to 9\r\n\r\n    // The exponent value at and beneath which `toString` returns exponential notation.\r\n    // JavaScript numbers: -7\r\n    toExpNeg: -7,                          // 0 to -EXP_LIMIT\r\n\r\n    // The exponent value at and above which `toString` returns exponential notation.\r\n    // JavaScript numbers: 21\r\n    toExpPos:  21,                         // 0 to EXP_LIMIT\r\n\r\n    // The minimum exponent value, beneath which underflow to zero occurs.\r\n    // JavaScript numbers: -324  (5e-324)\r\n    minE: -EXP_LIMIT,                      // -1 to -EXP_LIMIT\r\n\r\n    // The maximum exponent value, above which overflow to Infinity occurs.\r\n    // JavaScript numbers: 308  (1.7976931348623157e+308)\r\n    maxE: EXP_LIMIT,                       // 1 to EXP_LIMIT\r\n\r\n    // Whether to use cryptographically-secure random number generation, if available.\r\n    crypto: false                          // true/false\r\n  },\r\n\r\n\r\n// ----------------------------------- END OF EDITABLE DEFAULTS ------------------------------- //\r\n\r\n\r\n  inexact, quadrant,\r\n  external = true,\r\n\r\n  decimalError = '[DecimalError] ',\r\n  invalidArgument = decimalError + 'Invalid argument: ',\r\n  precisionLimitExceeded = decimalError + 'Precision limit exceeded',\r\n  cryptoUnavailable = decimalError + 'crypto unavailable',\r\n  tag = '[object Decimal]',\r\n\r\n  mathfloor = Math.floor,\r\n  mathpow = Math.pow,\r\n\r\n  isBinary = /^0b([01]+(\\.[01]*)?|\\.[01]+)(p[+-]?\\d+)?$/i,\r\n  isHex = /^0x([0-9a-f]+(\\.[0-9a-f]*)?|\\.[0-9a-f]+)(p[+-]?\\d+)?$/i,\r\n  isOctal = /^0o([0-7]+(\\.[0-7]*)?|\\.[0-7]+)(p[+-]?\\d+)?$/i,\r\n  isDecimal = /^(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i,\r\n\r\n  BASE = 1e7,\r\n  LOG_BASE = 7,\r\n  MAX_SAFE_INTEGER = 9007199254740991,\r\n\r\n  LN10_PRECISION = LN10.length - 1,\r\n  PI_PRECISION = PI.length - 1,\r\n\r\n  // Decimal.prototype object\r\n  P = { toStringTag: tag };\r\n\r\n\r\n// Decimal prototype methods\r\n\r\n\r\n/*\r\n *  absoluteValue             abs\r\n *  ceil\r\n *  clampedTo                 clamp\r\n *  comparedTo                cmp\r\n *  cosine                    cos\r\n *  cubeRoot                  cbrt\r\n *  decimalPlaces             dp\r\n *  dividedBy                 div\r\n *  dividedToIntegerBy        divToInt\r\n *  equals                    eq\r\n *  floor\r\n *  greaterThan               gt\r\n *  greaterThanOrEqualTo      gte\r\n *  hyperbolicCosine          cosh\r\n *  hyperbolicSine            sinh\r\n *  hyperbolicTangent         tanh\r\n *  inverseCosine             acos\r\n *  inverseHyperbolicCosine   acosh\r\n *  inverseHyperbolicSine     asinh\r\n *  inverseHyperbolicTangent  atanh\r\n *  inverseSine               asin\r\n *  inverseTangent            atan\r\n *  isFinite\r\n *  isInteger                 isInt\r\n *  isNaN\r\n *  isNegative                isNeg\r\n *  isPositive                isPos\r\n *  isZero\r\n *  lessThan                  lt\r\n *  lessThanOrEqualTo         lte\r\n *  logarithm                 log\r\n *  [maximum]                 [max]\r\n *  [minimum]                 [min]\r\n *  minus                     sub\r\n *  modulo                    mod\r\n *  naturalExponential        exp\r\n *  naturalLogarithm          ln\r\n *  negated                   neg\r\n *  plus                      add\r\n *  precision                 sd\r\n *  round\r\n *  sine                      sin\r\n *  squareRoot                sqrt\r\n *  tangent                   tan\r\n *  times                     mul\r\n *  toBinary\r\n *  toDecimalPlaces           toDP\r\n *  toExponential\r\n *  toFixed\r\n *  toFraction\r\n *  toHexadecimal             toHex\r\n *  toNearest\r\n *  toNumber\r\n *  toOctal\r\n *  toPower                   pow\r\n *  toPrecision\r\n *  toSignificantDigits       toSD\r\n *  toString\r\n *  truncated                 trunc\r\n *  valueOf                   toJSON\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of this Decimal.\r\n *\r\n */\r\nP.absoluteValue = P.abs = function () {\r\n  var x = new this.constructor(this);\r\n  if (x.s < 0) x.s = 1;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of positive Infinity.\r\n *\r\n */\r\nP.ceil = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal clamped to the range\r\n * delineated by `min` and `max`.\r\n *\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nP.clampedTo = P.clamp = function (min, max) {\r\n  var k,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n  min = new Ctor(min);\r\n  max = new Ctor(max);\r\n  if (!min.s || !max.s) return new Ctor(NaN);\r\n  if (min.gt(max)) throw Error(invalidArgument + max);\r\n  k = x.cmp(min);\r\n  return k < 0 ? min : x.cmp(max) > 0 ? max : new Ctor(x);\r\n};\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if the value of this Decimal is greater than the value of `y`,\r\n *  -1    if the value of this Decimal is less than the value of `y`,\r\n *   0    if they have the same value,\r\n *   NaN  if the value of either Decimal is NaN.\r\n *\r\n */\r\nP.comparedTo = P.cmp = function (y) {\r\n  var i, j, xdL, ydL,\r\n    x = this,\r\n    xd = x.d,\r\n    yd = (y = new x.constructor(y)).d,\r\n    xs = x.s,\r\n    ys = y.s;\r\n\r\n  // Either NaN or ±Infinity?\r\n  if (!xd || !yd) {\r\n    return !xs || !ys ? NaN : xs !== ys ? xs : xd === yd ? 0 : !xd ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Either zero?\r\n  if (!xd[0] || !yd[0]) return xd[0] ? xs : yd[0] ? -ys : 0;\r\n\r\n  // Signs differ?\r\n  if (xs !== ys) return xs;\r\n\r\n  // Compare exponents.\r\n  if (x.e !== y.e) return x.e > y.e ^ xs < 0 ? 1 : -1;\r\n\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Compare digit by digit.\r\n  for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {\r\n    if (xd[i] !== yd[i]) return xd[i] > yd[i] ^ xs < 0 ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return xdL === ydL ? 0 : xdL > ydL ^ xs < 0 ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * cos(0)         = 1\r\n * cos(-0)        = 1\r\n * cos(Infinity)  = NaN\r\n * cos(-Infinity) = NaN\r\n * cos(NaN)       = NaN\r\n *\r\n */\r\nP.cosine = P.cos = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.d) return new Ctor(NaN);\r\n\r\n  // cos(0) = cos(-0) = 1\r\n  if (!x.d[0]) return new Ctor(1);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = cosine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 3 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *\r\n * Return a new Decimal whose value is the cube root of the value of this Decimal, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n *  cbrt(0)  =  0\r\n *  cbrt(-0) = -0\r\n *  cbrt(1)  =  1\r\n *  cbrt(-1) = -1\r\n *  cbrt(N)  =  N\r\n *  cbrt(-I) = -I\r\n *  cbrt(I)  =  I\r\n *\r\n * Math.cbrt(x) = (x < 0 ? -Math.pow(-x, 1/3) : Math.pow(x, 1/3))\r\n *\r\n */\r\nP.cubeRoot = P.cbrt = function () {\r\n  var e, m, n, r, rep, s, sd, t, t3, t3plusx,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = x.s * mathpow(x.s * x, 1 / 3);\r\n\r\n   // Math.cbrt underflow/overflow?\r\n   // Pass x to Math.pow as integer, then adjust the exponent of the result.\r\n  if (!s || Math.abs(s) == 1 / 0) {\r\n    n = digitsToString(x.d);\r\n    e = x.e;\r\n\r\n    // Adjust n exponent so it is a multiple of 3 away from x exponent.\r\n    if (s = (e - n.length + 1) % 3) n += (s == 1 || s == -2 ? '0' : '00');\r\n    s = mathpow(n, 1 / 3);\r\n\r\n    // Rarely, e may be one less than the result exponent value.\r\n    e = mathfloor((e + 1) / 3) - (e % 3 == (e < 0 ? -1 : 2));\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n    r.s = x.s;\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Halley's method.\r\n  // TODO? Compare Newton's method.\r\n  for (;;) {\r\n    t = r;\r\n    t3 = t.times(t).times(t);\r\n    t3plusx = t3.plus(x);\r\n    r = divide(t3plusx.plus(x).times(t), t3plusx.plus(t3), sd + 2, 1);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or 4999\r\n      // , i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return the number of decimal places of the value of this Decimal.\r\n *\r\n */\r\nP.decimalPlaces = P.dp = function () {\r\n  var w,\r\n    d = this.d,\r\n    n = NaN;\r\n\r\n  if (d) {\r\n    w = d.length - 1;\r\n    n = (w - mathfloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    w = d[w];\r\n    if (w) for (; w % 10 == 0; w /= 10) n--;\r\n    if (n < 0) n = 0;\r\n  }\r\n\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n *  n / 0 = I\r\n *  n / N = N\r\n *  n / I = 0\r\n *  0 / n = 0\r\n *  0 / 0 = N\r\n *  0 / N = N\r\n *  0 / I = 0\r\n *  N / n = N\r\n *  N / 0 = N\r\n *  N / N = N\r\n *  N / I = N\r\n *  I / n = I\r\n *  I / 0 = I\r\n *  I / N = N\r\n *  I / I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal divided by `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedBy = P.div = function (y) {\r\n  return divide(this, new this.constructor(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the integer part of dividing the value of this Decimal\r\n * by the value of `y`, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.dividedToIntegerBy = P.divToInt = function (y) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n  return finalise(divide(x, new Ctor(y), 0, 1, 1), Ctor.precision, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is equal to the value of `y`, otherwise return false.\r\n *\r\n */\r\nP.equals = P.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number in the\r\n * direction of negative Infinity.\r\n *\r\n */\r\nP.floor = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 3);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than the value of `y`, otherwise return\r\n * false.\r\n *\r\n */\r\nP.greaterThan = P.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is greater than or equal to the value of `y`,\r\n * otherwise return false.\r\n *\r\n */\r\nP.greaterThanOrEqualTo = P.gte = function (y) {\r\n  var k = this.cmp(y);\r\n  return k == 1 || k === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [1, Infinity]\r\n *\r\n * cosh(x) = 1 + x^2/2! + x^4/4! + x^6/6! + ...\r\n *\r\n * cosh(0)         = 1\r\n * cosh(-0)        = 1\r\n * cosh(Infinity)  = Infinity\r\n * cosh(-Infinity) = Infinity\r\n * cosh(NaN)       = NaN\r\n *\r\n *  x        time taken (ms)   result\r\n * 1000      9                 9.8503555700852349694e+433\r\n * 10000     25                4.4034091128314607936e+4342\r\n * 100000    171               1.4033316802130615897e+43429\r\n * 1000000   3817              1.5166076984010437725e+434294\r\n * 10000000  abandoned after 2 minute wait\r\n *\r\n * TODO? Compare performance of cosh(x) = 0.5 * (exp(x) + exp(-x))\r\n *\r\n */\r\nP.hyperbolicCosine = P.cosh = function () {\r\n  var k, n, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    one = new Ctor(1);\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s ? 1 / 0 : NaN);\r\n  if (x.isZero()) return one;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  // Argument reduction: cos(4x) = 1 - 8cos^2(x) + 8cos^4(x) + 1\r\n  // i.e. cos(x) = 1 - cos^2(x/4)(8 - 8cos^2(x/4))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  // TODO? Estimation reused from cosine() and may not be optimal here.\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    n = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    n = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(n), new Ctor(1), true);\r\n\r\n  // Reverse argument reduction\r\n  var cosh2_x,\r\n    i = k,\r\n    d8 = new Ctor(8);\r\n  for (; i--;) {\r\n    cosh2_x = x.times(x);\r\n    x = one.minus(cosh2_x.times(d8.minus(cosh2_x.times(d8))));\r\n  }\r\n\r\n  return finalise(x, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * sinh(x) = x + x^3/3! + x^5/5! + x^7/7! + ...\r\n *\r\n * sinh(0)         = 0\r\n * sinh(-0)        = -0\r\n * sinh(Infinity)  = Infinity\r\n * sinh(-Infinity) = -Infinity\r\n * sinh(NaN)       = NaN\r\n *\r\n * x        time taken (ms)\r\n * 10       2 ms\r\n * 100      5 ms\r\n * 1000     14 ms\r\n * 10000    82 ms\r\n * 100000   886 ms            1.4033316802130615897e+43429\r\n * 200000   2613 ms\r\n * 300000   5407 ms\r\n * 400000   8824 ms\r\n * 500000   13026 ms          8.7080643612718084129e+217146\r\n * 1000000  48543 ms\r\n *\r\n * TODO? Compare performance of sinh(x) = 0.5 * (exp(x) - exp(-x))\r\n *\r\n */\r\nP.hyperbolicSine = P.sinh = function () {\r\n  var k, pr, rm, len,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n  } else {\r\n\r\n    // Alternative argument reduction: sinh(3x) = sinh(x)(3 + 4sinh^2(x))\r\n    // i.e. sinh(x) = sinh(x/3)(3 + 4sinh^2(x/3))\r\n    // 3 multiplications and 1 addition\r\n\r\n    // Argument reduction: sinh(5x) = sinh(x)(5 + sinh^2(x)(20 + 16sinh^2(x)))\r\n    // i.e. sinh(x) = sinh(x/5)(5 + sinh^2(x/5)(20 + 16sinh^2(x/5)))\r\n    // 4 multiplications and 2 additions\r\n\r\n    // Estimate the optimum number of times to use the argument reduction.\r\n    k = 1.4 * Math.sqrt(len);\r\n    k = k > 16 ? 16 : k | 0;\r\n\r\n    x = x.times(1 / tinyPow(5, k));\r\n    x = taylorSeries(Ctor, 2, x, x, true);\r\n\r\n    // Reverse argument reduction\r\n    var sinh2_x,\r\n      d5 = new Ctor(5),\r\n      d16 = new Ctor(16),\r\n      d20 = new Ctor(20);\r\n    for (; k--;) {\r\n      sinh2_x = x.times(x);\r\n      x = x.times(d5.plus(sinh2_x.times(d16.times(sinh2_x).plus(d20))));\r\n    }\r\n  }\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of the value in radians of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * tanh(x) = sinh(x) / cosh(x)\r\n *\r\n * tanh(0)         = 0\r\n * tanh(-0)        = -0\r\n * tanh(Infinity)  = 1\r\n * tanh(-Infinity) = -1\r\n * tanh(NaN)       = NaN\r\n *\r\n */\r\nP.hyperbolicTangent = P.tanh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(x.s);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 7;\r\n  Ctor.rounding = 1;\r\n\r\n  return divide(x.sinh(), x.cosh(), Ctor.precision = pr, Ctor.rounding = rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine (inverse cosine) in radians of the value of\r\n * this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [0, pi]\r\n *\r\n * acos(x) = pi/2 - asin(x)\r\n *\r\n * acos(0)       = pi/2\r\n * acos(-0)      = pi/2\r\n * acos(1)       = 0\r\n * acos(-1)      = pi\r\n * acos(1/2)     = pi/3\r\n * acos(-1/2)    = 2*pi/3\r\n * acos(|x| > 1) = NaN\r\n * acos(NaN)     = NaN\r\n *\r\n */\r\nP.inverseCosine = P.acos = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    k = x.abs().cmp(1),\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n    return k === 0\r\n      // |x| is 1\r\n      ? x.isNeg() ? getPi(Ctor, pr, rm) : new Ctor(0)\r\n      // |x| > 1 or x is NaN\r\n      : new Ctor(NaN);\r\n  }\r\n\r\n  if (x.isZero()) return getPi(Ctor, pr + 4, rm).times(0.5);\r\n\r\n  // TODO? Special case acos(0.5) = pi/3 and acos(-0.5) = 2*pi/3\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  // See https://github.com/MikeMcl/decimal.js/pull/217\r\n  x = new Ctor(1).minus(x).div(x.plus(1)).sqrt().atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [1, Infinity]\r\n * Range: [0, Infinity]\r\n *\r\n * acosh(x) = ln(x + sqrt(x^2 - 1))\r\n *\r\n * acosh(x < 1)     = NaN\r\n * acosh(NaN)       = NaN\r\n * acosh(Infinity)  = Infinity\r\n * acosh(-Infinity) = NaN\r\n * acosh(0)         = NaN\r\n * acosh(-0)        = NaN\r\n * acosh(1)         = 0\r\n * acosh(-1)        = NaN\r\n *\r\n */\r\nP.inverseHyperbolicCosine = P.acosh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.lte(1)) return new Ctor(x.eq(1) ? 0 : NaN);\r\n  if (!x.isFinite()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(Math.abs(x.e), x.sd()) + 4;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).minus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * asinh(x) = ln(x + sqrt(x^2 + 1))\r\n *\r\n * asinh(NaN)       = NaN\r\n * asinh(Infinity)  = Infinity\r\n * asinh(-Infinity) = -Infinity\r\n * asinh(0)         = 0\r\n * asinh(-0)        = -0\r\n *\r\n */\r\nP.inverseHyperbolicSine = P.asinh = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite() || x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 2 * Math.max(Math.abs(x.e), x.sd()) + 6;\r\n  Ctor.rounding = 1;\r\n  external = false;\r\n\r\n  x = x.times(x).plus(1).sqrt().plus(x);\r\n\r\n  external = true;\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.ln();\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent in radians of the\r\n * value of this Decimal.\r\n *\r\n * Domain: [-1, 1]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * atanh(x) = 0.5 * ln((1 + x) / (1 - x))\r\n *\r\n * atanh(|x| > 1)   = NaN\r\n * atanh(NaN)       = NaN\r\n * atanh(Infinity)  = NaN\r\n * atanh(-Infinity) = NaN\r\n * atanh(0)         = 0\r\n * atanh(-0)        = -0\r\n * atanh(1)         = Infinity\r\n * atanh(-1)        = -Infinity\r\n *\r\n */\r\nP.inverseHyperbolicTangent = P.atanh = function () {\r\n  var pr, rm, wpr, xsd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.e >= 0) return new Ctor(x.abs().eq(1) ? x.s / 0 : x.isZero() ? x : NaN);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  xsd = x.sd();\r\n\r\n  if (Math.max(xsd, pr) < 2 * -x.e - 1) return finalise(new Ctor(x), pr, rm, true);\r\n\r\n  Ctor.precision = wpr = xsd - x.e;\r\n\r\n  x = divide(x.plus(1), new Ctor(1).minus(x), wpr + pr, 1);\r\n\r\n  Ctor.precision = pr + 4;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.ln();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(0.5);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine (inverse sine) in radians of the value of this\r\n * Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * asin(x) = 2*atan(x/(1 + sqrt(1 - x^2)))\r\n *\r\n * asin(0)       = 0\r\n * asin(-0)      = -0\r\n * asin(1/2)     = pi/6\r\n * asin(-1/2)    = -pi/6\r\n * asin(1)       = pi/2\r\n * asin(-1)      = -pi/2\r\n * asin(|x| > 1) = NaN\r\n * asin(NaN)     = NaN\r\n *\r\n * TODO? Compare performance of Taylor series.\r\n *\r\n */\r\nP.inverseSine = P.asin = function () {\r\n  var halfPi, k,\r\n    pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  k = x.abs().cmp(1);\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (k !== -1) {\r\n\r\n    // |x| is 1\r\n    if (k === 0) {\r\n      halfPi = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      halfPi.s = x.s;\r\n      return halfPi;\r\n    }\r\n\r\n    // |x| > 1 or x is NaN\r\n    return new Ctor(NaN);\r\n  }\r\n\r\n  // TODO? Special case asin(1/2) = pi/6 and asin(-1/2) = -pi/6\r\n\r\n  Ctor.precision = pr + 6;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.div(new Ctor(1).minus(x.times(x)).sqrt().plus(1)).atan();\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return x.times(2);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent (inverse tangent) in radians of the value\r\n * of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi/2, pi/2]\r\n *\r\n * atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n *\r\n * atan(0)         = 0\r\n * atan(-0)        = -0\r\n * atan(1)         = pi/4\r\n * atan(-1)        = -pi/4\r\n * atan(Infinity)  = pi/2\r\n * atan(-Infinity) = -pi/2\r\n * atan(NaN)       = NaN\r\n *\r\n */\r\nP.inverseTangent = P.atan = function () {\r\n  var i, j, k, n, px, t, r, wpr, x2,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding;\r\n\r\n  if (!x.isFinite()) {\r\n    if (!x.s) return new Ctor(NaN);\r\n    if (pr + 4 <= PI_PRECISION) {\r\n      r = getPi(Ctor, pr + 4, rm).times(0.5);\r\n      r.s = x.s;\r\n      return r;\r\n    }\r\n  } else if (x.isZero()) {\r\n    return new Ctor(x);\r\n  } else if (x.abs().eq(1) && pr + 4 <= PI_PRECISION) {\r\n    r = getPi(Ctor, pr + 4, rm).times(0.25);\r\n    r.s = x.s;\r\n    return r;\r\n  }\r\n\r\n  Ctor.precision = wpr = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  // TODO? if (x >= 1 && pr <= PI_PRECISION) atan(x) = halfPi * x.s - atan(1 / x);\r\n\r\n  // Argument reduction\r\n  // Ensure |x| < 0.42\r\n  // atan(x) = 2 * atan(x / (1 + sqrt(1 + x^2)))\r\n\r\n  k = Math.min(28, wpr / LOG_BASE + 2 | 0);\r\n\r\n  for (i = k; i; --i) x = x.div(x.times(x).plus(1).sqrt().plus(1));\r\n\r\n  external = false;\r\n\r\n  j = Math.ceil(wpr / LOG_BASE);\r\n  n = 1;\r\n  x2 = x.times(x);\r\n  r = new Ctor(x);\r\n  px = x;\r\n\r\n  // atan(x) = x - x^3/3 + x^5/5 - x^7/7 + ...\r\n  for (; i !== -1;) {\r\n    px = px.times(x2);\r\n    t = r.minus(px.div(n += 2));\r\n\r\n    px = px.times(x2);\r\n    r = t.plus(px.div(n += 2));\r\n\r\n    if (r.d[j] !== void 0) for (i = j; r.d[i] === t.d[i] && i--;);\r\n  }\r\n\r\n  if (k) r = r.times(2 << (k - 1));\r\n\r\n  external = true;\r\n\r\n  return finalise(r, Ctor.precision = pr, Ctor.rounding = rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is a finite number, otherwise return false.\r\n *\r\n */\r\nP.isFinite = function () {\r\n  return !!this.d;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is an integer, otherwise return false.\r\n *\r\n */\r\nP.isInteger = P.isInt = function () {\r\n  return !!this.d && mathfloor(this.e / LOG_BASE) > this.d.length - 2;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is NaN, otherwise return false.\r\n *\r\n */\r\nP.isNaN = function () {\r\n  return !this.s;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is negative, otherwise return false.\r\n *\r\n */\r\nP.isNegative = P.isNeg = function () {\r\n  return this.s < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is positive, otherwise return false.\r\n *\r\n */\r\nP.isPositive = P.isPos = function () {\r\n  return this.s > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is 0 or -0, otherwise return false.\r\n *\r\n */\r\nP.isZero = function () {\r\n  return !!this.d && this.d[0] === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThan = P.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Decimal is less than or equal to `y`, otherwise return false.\r\n *\r\n */\r\nP.lessThanOrEqualTo = P.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return the logarithm of the value of this Decimal to the specified base, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * If no base is specified, return log[10](arg).\r\n *\r\n * log[base](arg) = ln(arg) / ln(base)\r\n *\r\n * The result will always be correctly rounded if the base of the log is 10, and 'almost always'\r\n * otherwise:\r\n *\r\n * Depending on the rounding mode, the result may be incorrectly rounded if the first fifteen\r\n * rounding digits are [49]99999999999999 or [50]00000000000000. In that case, the maximum error\r\n * between the result and the correctly rounded result will be one ulp (unit in the last place).\r\n *\r\n * log[-b](a)       = NaN\r\n * log[0](a)        = NaN\r\n * log[1](a)        = NaN\r\n * log[NaN](a)      = NaN\r\n * log[Infinity](a) = NaN\r\n * log[b](0)        = -Infinity\r\n * log[b](-0)       = -Infinity\r\n * log[b](-a)       = NaN\r\n * log[b](1)        = 0\r\n * log[b](Infinity) = Infinity\r\n * log[b](NaN)      = NaN\r\n *\r\n * [base] {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nP.logarithm = P.log = function (base) {\r\n  var isBase10, d, denominator, k, inf, num, sd, r,\r\n    arg = this,\r\n    Ctor = arg.constructor,\r\n    pr = Ctor.precision,\r\n    rm = Ctor.rounding,\r\n    guard = 5;\r\n\r\n  // Default base is 10.\r\n  if (base == null) {\r\n    base = new Ctor(10);\r\n    isBase10 = true;\r\n  } else {\r\n    base = new Ctor(base);\r\n    d = base.d;\r\n\r\n    // Return NaN if base is negative, or non-finite, or is 0 or 1.\r\n    if (base.s < 0 || !d || !d[0] || base.eq(1)) return new Ctor(NaN);\r\n\r\n    isBase10 = base.eq(10);\r\n  }\r\n\r\n  d = arg.d;\r\n\r\n  // Is arg negative, non-finite, 0 or 1?\r\n  if (arg.s < 0 || !d || !d[0] || arg.eq(1)) {\r\n    return new Ctor(d && !d[0] ? -1 / 0 : arg.s != 1 ? NaN : d ? 0 : 1 / 0);\r\n  }\r\n\r\n  // The result will have a non-terminating decimal expansion if base is 10 and arg is not an\r\n  // integer power of 10.\r\n  if (isBase10) {\r\n    if (d.length > 1) {\r\n      inf = true;\r\n    } else {\r\n      for (k = d[0]; k % 10 === 0;) k /= 10;\r\n      inf = k !== 1;\r\n    }\r\n  }\r\n\r\n  external = false;\r\n  sd = pr + guard;\r\n  num = naturalLogarithm(arg, sd);\r\n  denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n\r\n  // The result will have 5 rounding digits.\r\n  r = divide(num, denominator, sd, 1);\r\n\r\n  // If at a rounding boundary, i.e. the result's rounding digits are [49]9999 or [50]0000,\r\n  // calculate 10 further digits.\r\n  //\r\n  // If the result is known to have an infinite decimal expansion, repeat this until it is clear\r\n  // that the result is above or below the boundary. Otherwise, if after calculating the 10\r\n  // further digits, the last 14 are nines, round up and assume the result is exact.\r\n  // Also assume the result is exact if the last 14 are zero.\r\n  //\r\n  // Example of a result that will be incorrectly rounded:\r\n  // log[1048576](4503599627370502) = 2.60000000000000009610279511444746...\r\n  // The above result correctly rounded using ROUND_CEIL to 1 decimal place should be 2.7, but it\r\n  // will be given as 2.6 as there are 15 zeros immediately after the requested decimal place, so\r\n  // the exact result would be assumed to be 2.6, which rounded using ROUND_CEIL to 1 decimal\r\n  // place is still 2.6.\r\n  if (checkRoundingDigits(r.d, k = pr, rm)) {\r\n\r\n    do {\r\n      sd += 10;\r\n      num = naturalLogarithm(arg, sd);\r\n      denominator = isBase10 ? getLn10(Ctor, sd + 10) : naturalLogarithm(base, sd);\r\n      r = divide(num, denominator, sd, 1);\r\n\r\n      if (!inf) {\r\n\r\n        // Check for 14 nines from the 2nd rounding digit, as the first may be 4.\r\n        if (+digitsToString(r.d).slice(k + 1, k + 15) + 1 == 1e14) {\r\n          r = finalise(r, pr + 1, 0);\r\n        }\r\n\r\n        break;\r\n      }\r\n    } while (checkRoundingDigits(r.d, k += 10, rm));\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.max = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, -1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments and the value of this Decimal.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\nP.min = function () {\r\n  Array.prototype.push.call(arguments, this);\r\n  return maxOrMin(this.constructor, arguments, 1);\r\n};\r\n */\r\n\r\n\r\n/*\r\n *  n - 0 = n\r\n *  n - N = N\r\n *  n - I = -I\r\n *  0 - n = -n\r\n *  0 - 0 = 0\r\n *  0 - N = N\r\n *  0 - I = -I\r\n *  N - n = N\r\n *  N - 0 = N\r\n *  N - N = N\r\n *  N - I = N\r\n *  I - n = I\r\n *  I - 0 = I\r\n *  I - N = N\r\n *  I - I = N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal minus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var d, e, i, j, k, len, pr, rm, xd, xe, xLTy, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return y negated if x is finite and y is ±Infinity.\r\n    else if (x.d) y.s = -y.s;\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with different signs.\r\n    // Return NaN if both are ±Infinity with the same sign.\r\n    else y = new Ctor(y.d || x.s !== y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n  // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.plus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return y negated if x is zero and y is non-zero.\r\n    if (yd[0]) y.s = -y.s;\r\n\r\n    // Return x if y is zero and x is non-zero.\r\n    else if (xd[0]) y = new Ctor(x);\r\n\r\n    // Return zero if both are zero.\r\n    // From IEEE 754 (2008) 6.3: 0 - 0 = -0 - -0 = -0 when rounding to -Infinity.\r\n    else return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  e = mathfloor(y.e / LOG_BASE);\r\n  xe = mathfloor(x.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  k = xe - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (k) {\r\n    xLTy = k < 0;\r\n\r\n    if (xLTy) {\r\n      d = xd;\r\n      k = -k;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = xe;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Numbers with massively different exponents would result in a very high number of\r\n    // zeros needing to be prepended, but this can be avoided while still ensuring correct\r\n    // rounding by limiting the number of zeros to `Math.ceil(pr / LOG_BASE) + 2`.\r\n    i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;\r\n\r\n    if (k > i) {\r\n      k = i;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    d.reverse();\r\n    for (i = k; i--;) d.push(0);\r\n    d.reverse();\r\n\r\n  // Base 1e7 exponents equal.\r\n  } else {\r\n\r\n    // Check digits to determine which is the bigger number.\r\n\r\n    i = xd.length;\r\n    len = yd.length;\r\n    xLTy = i < len;\r\n    if (xLTy) len = i;\r\n\r\n    for (i = 0; i < len; i++) {\r\n      if (xd[i] != yd[i]) {\r\n        xLTy = xd[i] < yd[i];\r\n        break;\r\n      }\r\n    }\r\n\r\n    k = 0;\r\n  }\r\n\r\n  if (xLTy) {\r\n    d = xd;\r\n    xd = yd;\r\n    yd = d;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  len = xd.length;\r\n\r\n  // Append zeros to `xd` if shorter.\r\n  // Don't add zeros to `yd` if shorter as subtraction only needs to start at `yd` length.\r\n  for (i = yd.length - len; i > 0; --i) xd[len++] = 0;\r\n\r\n  // Subtract yd from xd.\r\n  for (i = yd.length; i > k;) {\r\n\r\n    if (xd[--i] < yd[i]) {\r\n      for (j = i; j && xd[--j] === 0;) xd[j] = BASE - 1;\r\n      --xd[j];\r\n      xd[i] += BASE;\r\n    }\r\n\r\n    xd[i] -= yd[i];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xd[--len] === 0;) xd.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xd[0] === 0; xd.shift()) --e;\r\n\r\n  // Zero?\r\n  if (!xd[0]) return new Ctor(rm === 3 ? -0 : 0);\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n *   n % 0 =  N\r\n *   n % N =  N\r\n *   n % I =  n\r\n *   0 % n =  0\r\n *  -0 % n = -0\r\n *   0 % 0 =  N\r\n *   0 % N =  N\r\n *   0 % I =  0\r\n *   N % n =  N\r\n *   N % 0 =  N\r\n *   N % N =  N\r\n *   N % I =  N\r\n *   I % n =  N\r\n *   I % 0 =  N\r\n *   I % N =  N\r\n *   I % I =  N\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal modulo `y`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * The result depends on the modulo mode.\r\n *\r\n */\r\nP.modulo = P.mod = function (y) {\r\n  var q,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // Return NaN if x is ±Infinity or NaN, or y is NaN or ±0.\r\n  if (!x.d || !y.s || y.d && !y.d[0]) return new Ctor(NaN);\r\n\r\n  // Return x if y is ±Infinity or x is ±0.\r\n  if (!y.d || x.d && !x.d[0]) {\r\n    return finalise(new Ctor(x), Ctor.precision, Ctor.rounding);\r\n  }\r\n\r\n  // Prevent rounding of intermediate calculations.\r\n  external = false;\r\n\r\n  if (Ctor.modulo == 9) {\r\n\r\n    // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n    // result = x - q * y    where  0 <= result < abs(y)\r\n    q = divide(x, y.abs(), 0, 3, 1);\r\n    q.s *= y.s;\r\n  } else {\r\n    q = divide(x, y, 0, Ctor.modulo, 1);\r\n  }\r\n\r\n  q = q.times(y);\r\n\r\n  external = true;\r\n\r\n  return x.minus(q);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of the value of this Decimal,\r\n * i.e. the base e raised to the power the value of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalExponential = P.exp = function () {\r\n  return naturalExponential(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of the value of this Decimal,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.naturalLogarithm = P.ln = function () {\r\n  return naturalLogarithm(this);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal negated, i.e. as if multiplied by\r\n * -1.\r\n *\r\n */\r\nP.negated = P.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return finalise(x);\r\n};\r\n\r\n\r\n/*\r\n *  n + 0 = n\r\n *  n + N = N\r\n *  n + I = I\r\n *  0 + n = n\r\n *  0 + 0 = 0\r\n *  0 + N = N\r\n *  0 + I = I\r\n *  N + n = N\r\n *  N + 0 = N\r\n *  N + N = N\r\n *  N + I = N\r\n *  I + n = I\r\n *  I + 0 = I\r\n *  I + N = N\r\n *  I + I = I\r\n *\r\n * Return a new Decimal whose value is the value of this Decimal plus `y`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.plus = P.add = function (y) {\r\n  var carry, d, e, i, k, len, pr, rm, xd, yd,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  y = new Ctor(y);\r\n\r\n  // If either is not finite...\r\n  if (!x.d || !y.d) {\r\n\r\n    // Return NaN if either is NaN.\r\n    if (!x.s || !y.s) y = new Ctor(NaN);\r\n\r\n    // Return x if y is finite and x is ±Infinity.\r\n    // Return x if both are ±Infinity with the same sign.\r\n    // Return NaN if both are ±Infinity with different signs.\r\n    // Return y if x is finite and y is ±Infinity.\r\n    else if (!x.d) y = new Ctor(y.d || x.s === y.s ? x : NaN);\r\n\r\n    return y;\r\n  }\r\n\r\n   // If signs differ...\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  xd = x.d;\r\n  yd = y.d;\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  // If either is zero...\r\n  if (!xd[0] || !yd[0]) {\r\n\r\n    // Return x if y is zero.\r\n    // Return y if y is non-zero.\r\n    if (!yd[0]) y = new Ctor(x);\r\n\r\n    return external ? finalise(y, pr, rm) : y;\r\n  }\r\n\r\n  // x and y are finite, non-zero numbers with the same sign.\r\n\r\n  // Calculate base 1e7 exponents.\r\n  k = mathfloor(x.e / LOG_BASE);\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  xd = xd.slice();\r\n  i = k - e;\r\n\r\n  // If base 1e7 exponents differ...\r\n  if (i) {\r\n\r\n    if (i < 0) {\r\n      d = xd;\r\n      i = -i;\r\n      len = yd.length;\r\n    } else {\r\n      d = yd;\r\n      e = k;\r\n      len = xd.length;\r\n    }\r\n\r\n    // Limit number of zeros prepended to max(ceil(pr / LOG_BASE), len) + 1.\r\n    k = Math.ceil(pr / LOG_BASE);\r\n    len = k > len ? k + 1 : len + 1;\r\n\r\n    if (i > len) {\r\n      i = len;\r\n      d.length = 1;\r\n    }\r\n\r\n    // Prepend zeros to equalise exponents. Note: Faster to use reverse then do unshifts.\r\n    d.reverse();\r\n    for (; i--;) d.push(0);\r\n    d.reverse();\r\n  }\r\n\r\n  len = xd.length;\r\n  i = yd.length;\r\n\r\n  // If yd is longer than xd, swap xd and yd so xd points to the longer array.\r\n  if (len - i < 0) {\r\n    i = len;\r\n    d = yd;\r\n    yd = xd;\r\n    xd = d;\r\n  }\r\n\r\n  // Only start adding at yd.length - 1 as the further digits of xd can be left as they are.\r\n  for (carry = 0; i;) {\r\n    carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;\r\n    xd[i] %= BASE;\r\n  }\r\n\r\n  if (carry) {\r\n    xd.unshift(carry);\r\n    ++e;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n  for (len = xd.length; xd[--len] == 0;) xd.pop();\r\n\r\n  y.d = xd;\r\n  y.e = getBase10Exponent(xd, e);\r\n\r\n  return external ? finalise(y, pr, rm) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return the number of significant digits of the value of this Decimal.\r\n *\r\n * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.\r\n *\r\n */\r\nP.precision = P.sd = function (z) {\r\n  var k,\r\n    x = this;\r\n\r\n  if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);\r\n\r\n  if (x.d) {\r\n    k = getPrecision(x.d);\r\n    if (z && x.e + 1 > k) k = x.e + 1;\r\n  } else {\r\n    k = NaN;\r\n  }\r\n\r\n  return k;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a whole number using\r\n * rounding mode `rounding`.\r\n *\r\n */\r\nP.round = function () {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  return finalise(new Ctor(x), x.e + 1, Ctor.rounding);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-1, 1]\r\n *\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n *\r\n * sin(0)         = 0\r\n * sin(-0)        = -0\r\n * sin(Infinity)  = NaN\r\n * sin(-Infinity) = NaN\r\n * sin(NaN)       = NaN\r\n *\r\n */\r\nP.sine = P.sin = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + Math.max(x.e, x.sd()) + LOG_BASE;\r\n  Ctor.rounding = 1;\r\n\r\n  x = sine(Ctor, toLessThanHalfPi(Ctor, x));\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant > 2 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of this Decimal, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n *  sqrt(-n) =  N\r\n *  sqrt(N)  =  N\r\n *  sqrt(-I) =  N\r\n *  sqrt(I)  =  I\r\n *  sqrt(0)  =  0\r\n *  sqrt(-0) = -0\r\n *\r\n */\r\nP.squareRoot = P.sqrt = function () {\r\n  var m, n, sd, r, rep, t,\r\n    x = this,\r\n    d = x.d,\r\n    e = x.e,\r\n    s = x.s,\r\n    Ctor = x.constructor;\r\n\r\n  // Negative/NaN/Infinity/zero?\r\n  if (s !== 1 || !d || !d[0]) {\r\n    return new Ctor(!s || s < 0 && (!d || d[0]) ? NaN : d ? x : 1 / 0);\r\n  }\r\n\r\n  external = false;\r\n\r\n  // Initial estimate.\r\n  s = Math.sqrt(+x);\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n  if (s == 0 || s == 1 / 0) {\r\n    n = digitsToString(d);\r\n\r\n    if ((n.length + e) % 2 == 0) n += '0';\r\n    s = Math.sqrt(n);\r\n    e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n    if (s == 1 / 0) {\r\n      n = '5e' + e;\r\n    } else {\r\n      n = s.toExponential();\r\n      n = n.slice(0, n.indexOf('e') + 1) + e;\r\n    }\r\n\r\n    r = new Ctor(n);\r\n  } else {\r\n    r = new Ctor(s.toString());\r\n  }\r\n\r\n  sd = (e = Ctor.precision) + 3;\r\n\r\n  // Newton-Raphson iteration.\r\n  for (;;) {\r\n    t = r;\r\n    r = t.plus(divide(x, t, sd + 2, 1)).times(0.5);\r\n\r\n    // TODO? Replace with for-loop and checkRoundingDigits.\r\n    if (digitsToString(t.d).slice(0, sd) === (n = digitsToString(r.d)).slice(0, sd)) {\r\n      n = n.slice(sd - 3, sd + 1);\r\n\r\n      // The 4th rounding digit may be in error by -1 so if the 4 rounding digits are 9999 or\r\n      // 4999, i.e. approaching a rounding boundary, continue the iteration.\r\n      if (n == '9999' || !rep && n == '4999') {\r\n\r\n        // On the first iteration only, check to see if rounding up gives the exact result as the\r\n        // nines may infinitely repeat.\r\n        if (!rep) {\r\n          finalise(t, e + 1, 0);\r\n\r\n          if (t.times(t).eq(x)) {\r\n            r = t;\r\n            break;\r\n          }\r\n        }\r\n\r\n        sd += 4;\r\n        rep = 1;\r\n      } else {\r\n\r\n        // If the rounding digits are null, 0{0,4} or 50{0,3}, check for an exact result.\r\n        // If not, then there are further digits and m will be truthy.\r\n        if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n          // Truncate to the first rounding digit.\r\n          finalise(r, e + 1, 1);\r\n          m = !r.times(r).eq(x);\r\n        }\r\n\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return finalise(r, e, Ctor.rounding, m);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of the value in radians of this Decimal.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-Infinity, Infinity]\r\n *\r\n * tan(0)         = 0\r\n * tan(-0)        = -0\r\n * tan(Infinity)  = NaN\r\n * tan(-Infinity) = NaN\r\n * tan(NaN)       = NaN\r\n *\r\n */\r\nP.tangent = P.tan = function () {\r\n  var pr, rm,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (!x.isFinite()) return new Ctor(NaN);\r\n  if (x.isZero()) return new Ctor(x);\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n  Ctor.precision = pr + 10;\r\n  Ctor.rounding = 1;\r\n\r\n  x = x.sin();\r\n  x.s = 1;\r\n  x = divide(x, new Ctor(1).minus(x.times(x)).sqrt(), pr + 10, 0);\r\n\r\n  Ctor.precision = pr;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(quadrant == 2 || quadrant == 4 ? x.neg() : x, pr, rm, true);\r\n};\r\n\r\n\r\n/*\r\n *  n * 0 = 0\r\n *  n * N = N\r\n *  n * I = I\r\n *  0 * n = 0\r\n *  0 * 0 = 0\r\n *  0 * N = N\r\n *  0 * I = N\r\n *  N * n = N\r\n *  N * 0 = N\r\n *  N * N = N\r\n *  N * I = N\r\n *  I * n = I\r\n *  I * 0 = N\r\n *  I * N = N\r\n *  I * I = I\r\n *\r\n * Return a new Decimal whose value is this Decimal times `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n */\r\nP.times = P.mul = function (y) {\r\n  var carry, e, i, k, r, rL, t, xdL, ydL,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    xd = x.d,\r\n    yd = (y = new Ctor(y)).d;\r\n\r\n  y.s *= x.s;\r\n\r\n   // If either is NaN, ±Infinity or ±0...\r\n  if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n    return new Ctor(!y.s || xd && !xd[0] && !yd || yd && !yd[0] && !xd\r\n\r\n      // Return NaN if either is NaN.\r\n      // Return NaN if x is ±0 and y is ±Infinity, or y is ±0 and x is ±Infinity.\r\n      ? NaN\r\n\r\n      // Return ±Infinity if either is ±Infinity.\r\n      // Return ±0 if either is ±0.\r\n      : !xd || !yd ? y.s / 0 : y.s * 0);\r\n  }\r\n\r\n  e = mathfloor(x.e / LOG_BASE) + mathfloor(y.e / LOG_BASE);\r\n  xdL = xd.length;\r\n  ydL = yd.length;\r\n\r\n  // Ensure xd points to the longer array.\r\n  if (xdL < ydL) {\r\n    r = xd;\r\n    xd = yd;\r\n    yd = r;\r\n    rL = xdL;\r\n    xdL = ydL;\r\n    ydL = rL;\r\n  }\r\n\r\n  // Initialise the result array with zeros.\r\n  r = [];\r\n  rL = xdL + ydL;\r\n  for (i = rL; i--;) r.push(0);\r\n\r\n  // Multiply!\r\n  for (i = ydL; --i >= 0;) {\r\n    carry = 0;\r\n    for (k = xdL + i; k > i;) {\r\n      t = r[k] + yd[i] * xd[k - i - 1] + carry;\r\n      r[k--] = t % BASE | 0;\r\n      carry = t / BASE | 0;\r\n    }\r\n\r\n    r[k] = (r[k] + carry) % BASE | 0;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; !r[--rL];) r.pop();\r\n\r\n  if (carry) ++e;\r\n  else r.shift();\r\n\r\n  y.d = r;\r\n  y.e = getBase10Exponent(r, e);\r\n\r\n  return external ? finalise(y, Ctor.precision, Ctor.rounding) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 2, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toBinary = function (sd, rm) {\r\n  return toStringBinary(this, 2, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `dp`\r\n * decimal places using rounding mode `rm` or `rounding` if `rm` is omitted.\r\n *\r\n * If `dp` is omitted, return a new Decimal whose value is the value of this Decimal.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toDecimalPlaces = P.toDP = function (dp, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n  if (dp === void 0) return x;\r\n\r\n  checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n  if (rm === void 0) rm = Ctor.rounding;\r\n  else checkInt32(rm, 0, 8);\r\n\r\n  return finalise(x, dp + x.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in exponential notation rounded to\r\n * `dp` fixed decimal places using rounding mode `rounding`.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x, true);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), dp + 1, rm);\r\n    str = finiteToString(x, true, dp + 1);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in normal (fixed-point) notation to\r\n * `dp` fixed decimal places and rounded using rounding mode `rm` or `rounding` if `rm` is\r\n * omitted.\r\n *\r\n * As with JavaScript numbers, (-0).toFixed(0) is '0', but e.g. (-0.00001).toFixed(0) is '-0'.\r\n *\r\n * [dp] {number} Decimal places. Integer, 0 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n * (-0).toFixed(3) is '0.000'.\r\n * (-0.5).toFixed(0) is '-0'.\r\n *\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var str, y,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (dp === void 0) {\r\n    str = finiteToString(x);\r\n  } else {\r\n    checkInt32(dp, 0, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    y = finalise(new Ctor(x), dp + x.e + 1, rm);\r\n    str = finiteToString(y, false, dp + y.e + 1);\r\n  }\r\n\r\n  // To determine whether to add the minus sign look at the value before it was rounded,\r\n  // i.e. look at `x` rather than `y`.\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return an array representing the value of this Decimal as a simple fraction with an integer\r\n * numerator and an integer denominator.\r\n *\r\n * The denominator will be a positive non-zero value less than or equal to the specified maximum\r\n * denominator. If a maximum denominator is not specified, the denominator will be the lowest\r\n * value necessary to represent the number exactly.\r\n *\r\n * [maxD] {number|string|bigint|Decimal} Maximum denominator. Integer >= 1 and < Infinity.\r\n *\r\n */\r\nP.toFraction = function (maxD) {\r\n  var d, d0, d1, d2, e, k, n, n0, n1, pr, q, r,\r\n    x = this,\r\n    xd = x.d,\r\n    Ctor = x.constructor;\r\n\r\n  if (!xd) return new Ctor(x);\r\n\r\n  n1 = d0 = new Ctor(1);\r\n  d1 = n0 = new Ctor(0);\r\n\r\n  d = new Ctor(d1);\r\n  e = d.e = getPrecision(xd) - x.e - 1;\r\n  k = e % LOG_BASE;\r\n  d.d[0] = mathpow(10, k < 0 ? LOG_BASE + k : k);\r\n\r\n  if (maxD == null) {\r\n\r\n    // d is 10**e, the minimum max-denominator needed.\r\n    maxD = e > 0 ? d : n1;\r\n  } else {\r\n    n = new Ctor(maxD);\r\n    if (!n.isInt() || n.lt(n1)) throw Error(invalidArgument + n);\r\n    maxD = n.gt(d) ? (e > 0 ? d : n1) : n;\r\n  }\r\n\r\n  external = false;\r\n  n = new Ctor(digitsToString(xd));\r\n  pr = Ctor.precision;\r\n  Ctor.precision = e = xd.length * LOG_BASE * 2;\r\n\r\n  for (;;)  {\r\n    q = divide(n, d, 0, 1, 1);\r\n    d2 = d0.plus(q.times(d1));\r\n    if (d2.cmp(maxD) == 1) break;\r\n    d0 = d1;\r\n    d1 = d2;\r\n    d2 = n1;\r\n    n1 = n0.plus(q.times(d2));\r\n    n0 = d2;\r\n    d2 = d;\r\n    d = n.minus(q.times(d2));\r\n    n = d2;\r\n  }\r\n\r\n  d2 = divide(maxD.minus(d0), d1, 0, 1, 1);\r\n  n0 = n0.plus(d2.times(n1));\r\n  d0 = d0.plus(d2.times(d1));\r\n  n0.s = n1.s = x.s;\r\n\r\n  // Determine which fraction is closer to x, n0/d0 or n1/d1?\r\n  r = divide(n1, d1, e, 1).minus(x).abs().cmp(divide(n0, d0, e, 1).minus(x).abs()) < 1\r\n      ? [n1, d1] : [n0, d0];\r\n\r\n  Ctor.precision = pr;\r\n  external = true;\r\n\r\n  return r;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 16, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toHexadecimal = P.toHex = function (sd, rm) {\r\n  return toStringBinary(this, 16, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Returns a new Decimal whose value is the nearest multiple of `y` in the direction of rounding\r\n * mode `rm`, or `Decimal.rounding` if `rm` is omitted, to the value of this Decimal.\r\n *\r\n * The return value will always have the same sign as this Decimal, unless either this Decimal\r\n * or `y` is NaN, in which case the return value will be also be NaN.\r\n *\r\n * The return value is not affected by the value of `precision`.\r\n *\r\n * y {number|string|bigint|Decimal} The magnitude to round to a multiple of.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toNearest() rounding mode not an integer: {rm}'\r\n * 'toNearest() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toNearest = function (y, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (y == null) {\r\n\r\n    // If x is not finite, return x.\r\n    if (!x.d) return x;\r\n\r\n    y = new Ctor(1);\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    y = new Ctor(y);\r\n    if (rm === void 0) {\r\n      rm = Ctor.rounding;\r\n    } else {\r\n      checkInt32(rm, 0, 8);\r\n    }\r\n\r\n    // If x is not finite, return x if y is not NaN, else NaN.\r\n    if (!x.d) return y.s ? x : y;\r\n\r\n    // If y is not finite, return Infinity with the sign of x if y is Infinity, else NaN.\r\n    if (!y.d) {\r\n      if (y.s) y.s = x.s;\r\n      return y;\r\n    }\r\n  }\r\n\r\n  // If y is not zero, calculate the nearest multiple of y to x.\r\n  if (y.d[0]) {\r\n    external = false;\r\n    x = divide(x, y, 0, rm, 1).times(y);\r\n    external = true;\r\n    finalise(x);\r\n\r\n  // If y is zero, return zero with the sign of x.\r\n  } else {\r\n    y.s = x.s;\r\n    x = y;\r\n  }\r\n\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Decimal converted to a number primitive.\r\n * Zero keeps its sign.\r\n *\r\n */\r\nP.toNumber = function () {\r\n  return +this;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal in base 8, round to `sd` significant\r\n * digits using rounding mode `rm`.\r\n *\r\n * If the optional `sd` argument is present then return binary exponential notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toOctal = function (sd, rm) {\r\n  return toStringBinary(this, 8, sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal raised to the power `y`, rounded\r\n * to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * ECMAScript compliant.\r\n *\r\n *   pow(x, NaN)                           = NaN\r\n *   pow(x, ±0)                            = 1\r\n\r\n *   pow(NaN, non-zero)                    = NaN\r\n *   pow(abs(x) > 1, +Infinity)            = +Infinity\r\n *   pow(abs(x) > 1, -Infinity)            = +0\r\n *   pow(abs(x) == 1, ±Infinity)           = NaN\r\n *   pow(abs(x) < 1, +Infinity)            = +0\r\n *   pow(abs(x) < 1, -Infinity)            = +Infinity\r\n *   pow(+Infinity, y > 0)                 = +Infinity\r\n *   pow(+Infinity, y < 0)                 = +0\r\n *   pow(-Infinity, odd integer > 0)       = -Infinity\r\n *   pow(-Infinity, even integer > 0)      = +Infinity\r\n *   pow(-Infinity, odd integer < 0)       = -0\r\n *   pow(-Infinity, even integer < 0)      = +0\r\n *   pow(+0, y > 0)                        = +0\r\n *   pow(+0, y < 0)                        = +Infinity\r\n *   pow(-0, odd integer > 0)              = -0\r\n *   pow(-0, even integer > 0)             = +0\r\n *   pow(-0, odd integer < 0)              = -Infinity\r\n *   pow(-0, even integer < 0)             = +Infinity\r\n *   pow(finite x < 0, finite non-integer) = NaN\r\n *\r\n * For non-integer or very large exponents pow(x, y) is calculated using\r\n *\r\n *   x^y = exp(y*ln(x))\r\n *\r\n * Assuming the first 15 rounding digits are each equally likely to be any digit 0-9, the\r\n * probability of an incorrectly rounded result\r\n * P([49]9{14} | [50]0{14}) = 2 * 0.2 * 10^-14 = 4e-15 = 1/2.5e+14\r\n * i.e. 1 in 250,000,000,000,000\r\n *\r\n * If a result is incorrectly rounded the maximum error will be 1 ulp (unit in last place).\r\n *\r\n * y {number|string|bigint|Decimal} The power to which to raise this Decimal.\r\n *\r\n */\r\nP.toPower = P.pow = function (y) {\r\n  var e, k, pr, r, rm, s,\r\n    x = this,\r\n    Ctor = x.constructor,\r\n    yn = +(y = new Ctor(y));\r\n\r\n  // Either ±Infinity, NaN or ±0?\r\n  if (!x.d || !y.d || !x.d[0] || !y.d[0]) return new Ctor(mathpow(+x, yn));\r\n\r\n  x = new Ctor(x);\r\n\r\n  if (x.eq(1)) return x;\r\n\r\n  pr = Ctor.precision;\r\n  rm = Ctor.rounding;\r\n\r\n  if (y.eq(1)) return finalise(x, pr, rm);\r\n\r\n  // y exponent\r\n  e = mathfloor(y.e / LOG_BASE);\r\n\r\n  // If y is a small integer use the 'exponentiation by squaring' algorithm.\r\n  if (e >= y.d.length - 1 && (k = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {\r\n    r = intPow(Ctor, x, k, pr);\r\n    return y.s < 0 ? new Ctor(1).div(r) : finalise(r, pr, rm);\r\n  }\r\n\r\n  s = x.s;\r\n\r\n  // if x is negative\r\n  if (s < 0) {\r\n\r\n    // if y is not an integer\r\n    if (e < y.d.length - 1) return new Ctor(NaN);\r\n\r\n    // Result is positive if x is negative and the last digit of integer y is even.\r\n    if ((y.d[e] & 1) == 0) s = 1;\r\n\r\n    // if x.eq(-1)\r\n    if (x.e == 0 && x.d[0] == 1 && x.d.length == 1) {\r\n      x.s = s;\r\n      return x;\r\n    }\r\n  }\r\n\r\n  // Estimate result exponent.\r\n  // x^y = 10^e,  where e = y * log10(x)\r\n  // log10(x) = log10(x_significand) + x_exponent\r\n  // log10(x_significand) = ln(x_significand) / ln(10)\r\n  k = mathpow(+x, yn);\r\n  e = k == 0 || !isFinite(k)\r\n    ? mathfloor(yn * (Math.log('0.' + digitsToString(x.d)) / Math.LN10 + x.e + 1))\r\n    : new Ctor(k + '').e;\r\n\r\n  // Exponent estimate may be incorrect e.g. x: 0.999999999999999999, y: 2.29, e: 0, r.e: -1.\r\n\r\n  // Overflow/underflow?\r\n  if (e > Ctor.maxE + 1 || e < Ctor.minE - 1) return new Ctor(e > 0 ? s / 0 : 0);\r\n\r\n  external = false;\r\n  Ctor.rounding = x.s = 1;\r\n\r\n  // Estimate the extra guard digits needed to ensure five correct rounding digits from\r\n  // naturalLogarithm(x). Example of failure without these extra digits (precision: 10):\r\n  // new Decimal(2.32456).pow('2087987436534566.46411')\r\n  // should be 1.162377823e+764914905173815, but is 1.162355823e+764914905173815\r\n  k = Math.min(12, (e + '').length);\r\n\r\n  // r = x^y = exp(y*ln(x))\r\n  r = naturalExponential(y.times(naturalLogarithm(x, pr + k)), pr);\r\n\r\n  // r may be Infinity, e.g. (0.9999999999999999).pow(-1e+40)\r\n  if (r.d) {\r\n\r\n    // Truncate to the required precision plus five rounding digits.\r\n    r = finalise(r, pr + 5, 1);\r\n\r\n    // If the rounding digits are [49]9999 or [50]0000 increase the precision by 10 and recalculate\r\n    // the result.\r\n    if (checkRoundingDigits(r.d, pr, rm)) {\r\n      e = pr + 10;\r\n\r\n      // Truncate to the increased precision plus five rounding digits.\r\n      r = finalise(naturalExponential(y.times(naturalLogarithm(x, e + k)), e), e + 5, 1);\r\n\r\n      // Check for 14 nines from the 2nd rounding digit (the first rounding digit may be 4 or 9).\r\n      if (+digitsToString(r.d).slice(pr + 1, pr + 15) + 1 == 1e14) {\r\n        r = finalise(r, pr + 1, 0);\r\n      }\r\n    }\r\n  }\r\n\r\n  r.s = s;\r\n  external = true;\r\n  Ctor.rounding = rm;\r\n\r\n  return finalise(r, pr, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal rounded to `sd` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * Return exponential notation if `sd` is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var str,\r\n    x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n\r\n    x = finalise(new Ctor(x), sd, rm);\r\n    str = finiteToString(x, sd <= x.e || x.e <= Ctor.toExpNeg, sd);\r\n  }\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal rounded to a maximum of `sd`\r\n * significant digits using rounding mode `rm`, or to `precision` and `rounding` respectively if\r\n * omitted.\r\n *\r\n * [sd] {number} Significant digits. Integer, 1 to MAX_DIGITS inclusive.\r\n * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n *\r\n * 'toSD() digits out of range: {sd}'\r\n * 'toSD() digits not an integer: {sd}'\r\n * 'toSD() rounding mode not an integer: {rm}'\r\n * 'toSD() rounding mode out of range: {rm}'\r\n *\r\n */\r\nP.toSignificantDigits = P.toSD = function (sd, rm) {\r\n  var x = this,\r\n    Ctor = x.constructor;\r\n\r\n  if (sd === void 0) {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  } else {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  }\r\n\r\n  return finalise(new Ctor(x), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n *\r\n * Return exponential notation if this Decimal has a positive exponent equal to or greater than\r\n * `toExpPos`, or a negative exponent equal to or less than `toExpNeg`.\r\n *\r\n */\r\nP.toString = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() && !x.isZero() ? '-' + str : str;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of this Decimal truncated to a whole number.\r\n *\r\n */\r\nP.truncated = P.trunc = function () {\r\n  return finalise(new this.constructor(this), this.e + 1, 1);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Decimal.\r\n * Unlike `toString`, negative zero will include the minus sign.\r\n *\r\n */\r\nP.valueOf = P.toJSON = function () {\r\n  var x = this,\r\n    Ctor = x.constructor,\r\n    str = finiteToString(x, x.e <= Ctor.toExpNeg || x.e >= Ctor.toExpPos);\r\n\r\n  return x.isNeg() ? '-' + str : str;\r\n};\r\n\r\n\r\n// Helper functions for Decimal.prototype (P) and/or Decimal methods, and their callers.\r\n\r\n\r\n/*\r\n *  digitsToString           P.cubeRoot, P.logarithm, P.squareRoot, P.toFraction, P.toPower,\r\n *                           finiteToString, naturalExponential, naturalLogarithm\r\n *  checkInt32               P.toDecimalPlaces, P.toExponential, P.toFixed, P.toNearest,\r\n *                           P.toPrecision, P.toSignificantDigits, toStringBinary, random\r\n *  checkRoundingDigits      P.logarithm, P.toPower, naturalExponential, naturalLogarithm\r\n *  convertBase              toStringBinary, parseOther\r\n *  cos                      P.cos\r\n *  divide                   P.atanh, P.cubeRoot, P.dividedBy, P.dividedToIntegerBy,\r\n *                           P.logarithm, P.modulo, P.squareRoot, P.tan, P.tanh, P.toFraction,\r\n *                           P.toNearest, toStringBinary, naturalExponential, naturalLogarithm,\r\n *                           taylorSeries, atan2, parseOther\r\n *  finalise                 P.absoluteValue, P.atan, P.atanh, P.ceil, P.cos, P.cosh,\r\n *                           P.cubeRoot, P.dividedToIntegerBy, P.floor, P.logarithm, P.minus,\r\n *                           P.modulo, P.negated, P.plus, P.round, P.sin, P.sinh, P.squareRoot,\r\n *                           P.tan, P.times, P.toDecimalPlaces, P.toExponential, P.toFixed,\r\n *                           P.toNearest, P.toPower, P.toPrecision, P.toSignificantDigits,\r\n *                           P.truncated, divide, getLn10, getPi, naturalExponential,\r\n *                           naturalLogarithm, ceil, floor, round, trunc\r\n *  finiteToString           P.toExponential, P.toFixed, P.toPrecision, P.toString, P.valueOf,\r\n *                           toStringBinary\r\n *  getBase10Exponent        P.minus, P.plus, P.times, parseOther\r\n *  getLn10                  P.logarithm, naturalLogarithm\r\n *  getPi                    P.acos, P.asin, P.atan, toLessThanHalfPi, atan2\r\n *  getPrecision             P.precision, P.toFraction\r\n *  getZeroString            digitsToString, finiteToString\r\n *  intPow                   P.toPower, parseOther\r\n *  isOdd                    toLessThanHalfPi\r\n *  maxOrMin                 max, min\r\n *  naturalExponential       P.naturalExponential, P.toPower\r\n *  naturalLogarithm         P.acosh, P.asinh, P.atanh, P.logarithm, P.naturalLogarithm,\r\n *                           P.toPower, naturalExponential\r\n *  nonFiniteToString        finiteToString, toStringBinary\r\n *  parseDecimal             Decimal\r\n *  parseOther               Decimal\r\n *  sin                      P.sin\r\n *  taylorSeries             P.cosh, P.sinh, cos, sin\r\n *  toLessThanHalfPi         P.cos, P.sin\r\n *  toStringBinary           P.toBinary, P.toHexadecimal, P.toOctal\r\n *  truncate                 intPow\r\n *\r\n *  Throws:                  P.logarithm, P.precision, P.toFraction, checkInt32, getLn10, getPi,\r\n *                           naturalLogarithm, config, parseOther, random, Decimal\r\n */\r\n\r\n\r\nfunction digitsToString(d) {\r\n  var i, k, ws,\r\n    indexOfLastWord = d.length - 1,\r\n    str = '',\r\n    w = d[0];\r\n\r\n  if (indexOfLastWord > 0) {\r\n    str += w;\r\n    for (i = 1; i < indexOfLastWord; i++) {\r\n      ws = d[i] + '';\r\n      k = LOG_BASE - ws.length;\r\n      if (k) str += getZeroString(k);\r\n      str += ws;\r\n    }\r\n\r\n    w = d[i];\r\n    ws = w + '';\r\n    k = LOG_BASE - ws.length;\r\n    if (k) str += getZeroString(k);\r\n  } else if (w === 0) {\r\n    return '0';\r\n  }\r\n\r\n  // Remove trailing zeros of last w.\r\n  for (; w % 10 === 0;) w /= 10;\r\n\r\n  return str + w;\r\n}\r\n\r\n\r\nfunction checkInt32(i, min, max) {\r\n  if (i !== ~~i || i < min || i > max) {\r\n    throw Error(invalidArgument + i);\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Check 5 rounding digits if `repeating` is null, 4 otherwise.\r\n * `repeating == null` if caller is `log` or `pow`,\r\n * `repeating != null` if caller is `naturalLogarithm` or `naturalExponential`.\r\n */\r\nfunction checkRoundingDigits(d, i, rm, repeating) {\r\n  var di, k, r, rd;\r\n\r\n  // Get the length of the first word of the array d.\r\n  for (k = d[0]; k >= 10; k /= 10) --i;\r\n\r\n  // Is the rounding digit in the first word of d?\r\n  if (--i < 0) {\r\n    i += LOG_BASE;\r\n    di = 0;\r\n  } else {\r\n    di = Math.ceil((i + 1) / LOG_BASE);\r\n    i %= LOG_BASE;\r\n  }\r\n\r\n  // i is the index (0 - 6) of the rounding digit.\r\n  // E.g. if within the word 3487563 the first rounding digit is 5,\r\n  // then i = 4, k = 1000, rd = 3487563 % 1000 = 563\r\n  k = mathpow(10, LOG_BASE - i);\r\n  rd = d[di] % k | 0;\r\n\r\n  if (repeating == null) {\r\n    if (i < 3) {\r\n      if (i == 0) rd = rd / 100 | 0;\r\n      else if (i == 1) rd = rd / 10 | 0;\r\n      r = rm < 4 && rd == 99999 || rm > 3 && rd == 49999 || rd == 50000 || rd == 0;\r\n    } else {\r\n      r = (rm < 4 && rd + 1 == k || rm > 3 && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 100 | 0) == mathpow(10, i - 2) - 1 ||\r\n          (rd == k / 2 || rd == 0) && (d[di + 1] / k / 100 | 0) == 0;\r\n    }\r\n  } else {\r\n    if (i < 4) {\r\n      if (i == 0) rd = rd / 1000 | 0;\r\n      else if (i == 1) rd = rd / 100 | 0;\r\n      else if (i == 2) rd = rd / 10 | 0;\r\n      r = (repeating || rm < 4) && rd == 9999 || !repeating && rm > 3 && rd == 4999;\r\n    } else {\r\n      r = ((repeating || rm < 4) && rd + 1 == k ||\r\n      (!repeating && rm > 3) && rd + 1 == k / 2) &&\r\n        (d[di + 1] / k / 1000 | 0) == mathpow(10, i - 3) - 1;\r\n    }\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n// Convert string of `baseIn` to an array of numbers of `baseOut`.\r\n// Eg. convertBase('255', 10, 16) returns [15, 15].\r\n// Eg. convertBase('ff', 16, 10) returns [2, 5, 5].\r\nfunction convertBase(str, baseIn, baseOut) {\r\n  var j,\r\n    arr = [0],\r\n    arrL,\r\n    i = 0,\r\n    strL = str.length;\r\n\r\n  for (; i < strL;) {\r\n    for (arrL = arr.length; arrL--;) arr[arrL] *= baseIn;\r\n    arr[0] += NUMERALS.indexOf(str.charAt(i++));\r\n    for (j = 0; j < arr.length; j++) {\r\n      if (arr[j] > baseOut - 1) {\r\n        if (arr[j + 1] === void 0) arr[j + 1] = 0;\r\n        arr[j + 1] += arr[j] / baseOut | 0;\r\n        arr[j] %= baseOut;\r\n      }\r\n    }\r\n  }\r\n\r\n  return arr.reverse();\r\n}\r\n\r\n\r\n/*\r\n * cos(x) = 1 - x^2/2! + x^4/4! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction cosine(Ctor, x) {\r\n  var k, len, y;\r\n\r\n  if (x.isZero()) return x;\r\n\r\n  // Argument reduction: cos(4x) = 8*(cos^4(x) - cos^2(x)) + 1\r\n  // i.e. cos(x) = 8*(cos^4(x/4) - cos^2(x/4)) + 1\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  len = x.d.length;\r\n  if (len < 32) {\r\n    k = Math.ceil(len / 3);\r\n    y = (1 / tinyPow(4, k)).toString();\r\n  } else {\r\n    k = 16;\r\n    y = '2.3283064365386962890625e-10';\r\n  }\r\n\r\n  Ctor.precision += k;\r\n\r\n  x = taylorSeries(Ctor, 1, x.times(y), new Ctor(1));\r\n\r\n  // Reverse argument reduction\r\n  for (var i = k; i--;) {\r\n    var cos2x = x.times(x);\r\n    x = cos2x.times(cos2x).minus(cos2x).times(8).plus(1);\r\n  }\r\n\r\n  Ctor.precision -= k;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Perform division in the specified base.\r\n */\r\nvar divide = (function () {\r\n\r\n  // Assumes non-zero x and k, and hence non-zero result.\r\n  function multiplyInteger(x, k, base) {\r\n    var temp,\r\n      carry = 0,\r\n      i = x.length;\r\n\r\n    for (x = x.slice(); i--;) {\r\n      temp = x[i] * k + carry;\r\n      x[i] = temp % base | 0;\r\n      carry = temp / base | 0;\r\n    }\r\n\r\n    if (carry) x.unshift(carry);\r\n\r\n    return x;\r\n  }\r\n\r\n  function compare(a, b, aL, bL) {\r\n    var i, r;\r\n\r\n    if (aL != bL) {\r\n      r = aL > bL ? 1 : -1;\r\n    } else {\r\n      for (i = r = 0; i < aL; i++) {\r\n        if (a[i] != b[i]) {\r\n          r = a[i] > b[i] ? 1 : -1;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return r;\r\n  }\r\n\r\n  function subtract(a, b, aL, base) {\r\n    var i = 0;\r\n\r\n    // Subtract b from a.\r\n    for (; aL--;) {\r\n      a[aL] -= i;\r\n      i = a[aL] < b[aL] ? 1 : 0;\r\n      a[aL] = i * base + a[aL] - b[aL];\r\n    }\r\n\r\n    // Remove leading zeros.\r\n    for (; !a[0] && a.length > 1;) a.shift();\r\n  }\r\n\r\n  return function (x, y, pr, rm, dp, base) {\r\n    var cmp, e, i, k, logBase, more, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0,\r\n      yL, yz,\r\n      Ctor = x.constructor,\r\n      sign = x.s == y.s ? 1 : -1,\r\n      xd = x.d,\r\n      yd = y.d;\r\n\r\n    // Either NaN, Infinity or 0?\r\n    if (!xd || !xd[0] || !yd || !yd[0]) {\r\n\r\n      return new Ctor(// Return NaN if either NaN, or both Infinity or 0.\r\n        !x.s || !y.s || (xd ? yd && xd[0] == yd[0] : !yd) ? NaN :\r\n\r\n        // Return ±0 if x is 0 or y is ±Infinity, or return ±Infinity as y is 0.\r\n        xd && xd[0] == 0 || !yd ? sign * 0 : sign / 0);\r\n    }\r\n\r\n    if (base) {\r\n      logBase = 1;\r\n      e = x.e - y.e;\r\n    } else {\r\n      base = BASE;\r\n      logBase = LOG_BASE;\r\n      e = mathfloor(x.e / logBase) - mathfloor(y.e / logBase);\r\n    }\r\n\r\n    yL = yd.length;\r\n    xL = xd.length;\r\n    q = new Ctor(sign);\r\n    qd = q.d = [];\r\n\r\n    // Result exponent may be one less than e.\r\n    // The digit array of a Decimal from toStringBinary may have trailing zeros.\r\n    for (i = 0; yd[i] == (xd[i] || 0); i++);\r\n\r\n    if (yd[i] > (xd[i] || 0)) e--;\r\n\r\n    if (pr == null) {\r\n      sd = pr = Ctor.precision;\r\n      rm = Ctor.rounding;\r\n    } else if (dp) {\r\n      sd = pr + (x.e - y.e) + 1;\r\n    } else {\r\n      sd = pr;\r\n    }\r\n\r\n    if (sd < 0) {\r\n      qd.push(1);\r\n      more = true;\r\n    } else {\r\n\r\n      // Convert precision in number of base 10 digits to base 1e7 digits.\r\n      sd = sd / logBase + 2 | 0;\r\n      i = 0;\r\n\r\n      // divisor < 1e7\r\n      if (yL == 1) {\r\n        k = 0;\r\n        yd = yd[0];\r\n        sd++;\r\n\r\n        // k is the carry.\r\n        for (; (i < xL || k) && sd--; i++) {\r\n          t = k * base + (xd[i] || 0);\r\n          qd[i] = t / yd | 0;\r\n          k = t % yd | 0;\r\n        }\r\n\r\n        more = k || i < xL;\r\n\r\n      // divisor >= 1e7\r\n      } else {\r\n\r\n        // Normalise xd and yd so highest order digit of yd is >= base/2\r\n        k = base / (yd[0] + 1) | 0;\r\n\r\n        if (k > 1) {\r\n          yd = multiplyInteger(yd, k, base);\r\n          xd = multiplyInteger(xd, k, base);\r\n          yL = yd.length;\r\n          xL = xd.length;\r\n        }\r\n\r\n        xi = yL;\r\n        rem = xd.slice(0, yL);\r\n        remL = rem.length;\r\n\r\n        // Add zeros to make remainder as long as divisor.\r\n        for (; remL < yL;) rem[remL++] = 0;\r\n\r\n        yz = yd.slice();\r\n        yz.unshift(0);\r\n        yd0 = yd[0];\r\n\r\n        if (yd[1] >= base / 2) ++yd0;\r\n\r\n        do {\r\n          k = 0;\r\n\r\n          // Compare divisor and remainder.\r\n          cmp = compare(yd, rem, yL, remL);\r\n\r\n          // If divisor < remainder.\r\n          if (cmp < 0) {\r\n\r\n            // Calculate trial digit, k.\r\n            rem0 = rem[0];\r\n            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n            // k will be how many times the divisor goes into the current remainder.\r\n            k = rem0 / yd0 | 0;\r\n\r\n            //  Algorithm:\r\n            //  1. product = divisor * trial digit (k)\r\n            //  2. if product > remainder: product -= divisor, k--\r\n            //  3. remainder -= product\r\n            //  4. if product was < remainder at 2:\r\n            //    5. compare new remainder and divisor\r\n            //    6. If remainder > divisor: remainder -= divisor, k++\r\n\r\n            if (k > 1) {\r\n              if (k >= base) k = base - 1;\r\n\r\n              // product = divisor * trial digit.\r\n              prod = multiplyInteger(yd, k, base);\r\n              prodL = prod.length;\r\n              remL = rem.length;\r\n\r\n              // Compare product and remainder.\r\n              cmp = compare(prod, rem, prodL, remL);\r\n\r\n              // product > remainder.\r\n              if (cmp == 1) {\r\n                k--;\r\n\r\n                // Subtract divisor from product.\r\n                subtract(prod, yL < prodL ? yz : yd, prodL, base);\r\n              }\r\n            } else {\r\n\r\n              // cmp is -1.\r\n              // If k is 0, there is no need to compare yd and rem again below, so change cmp to 1\r\n              // to avoid it. If k is 1 there is a need to compare yd and rem again below.\r\n              if (k == 0) cmp = k = 1;\r\n              prod = yd.slice();\r\n            }\r\n\r\n            prodL = prod.length;\r\n            if (prodL < remL) prod.unshift(0);\r\n\r\n            // Subtract product from remainder.\r\n            subtract(rem, prod, remL, base);\r\n\r\n            // If product was < previous remainder.\r\n            if (cmp == -1) {\r\n              remL = rem.length;\r\n\r\n              // Compare divisor and new remainder.\r\n              cmp = compare(yd, rem, yL, remL);\r\n\r\n              // If divisor < new remainder, subtract divisor from remainder.\r\n              if (cmp < 1) {\r\n                k++;\r\n\r\n                // Subtract divisor from remainder.\r\n                subtract(rem, yL < remL ? yz : yd, remL, base);\r\n              }\r\n            }\r\n\r\n            remL = rem.length;\r\n          } else if (cmp === 0) {\r\n            k++;\r\n            rem = [0];\r\n          }    // if cmp === 1, k will be 0\r\n\r\n          // Add the next digit, k, to the result array.\r\n          qd[i++] = k;\r\n\r\n          // Update the remainder.\r\n          if (cmp && rem[0]) {\r\n            rem[remL++] = xd[xi] || 0;\r\n          } else {\r\n            rem = [xd[xi]];\r\n            remL = 1;\r\n          }\r\n\r\n        } while ((xi++ < xL || rem[0] !== void 0) && sd--);\r\n\r\n        more = rem[0] !== void 0;\r\n      }\r\n\r\n      // Leading zero?\r\n      if (!qd[0]) qd.shift();\r\n    }\r\n\r\n    // logBase is 1 when divide is being used for base conversion.\r\n    if (logBase == 1) {\r\n      q.e = e;\r\n      inexact = more;\r\n    } else {\r\n\r\n      // To calculate q.e, first get the number of digits of qd[0].\r\n      for (i = 1, k = qd[0]; k >= 10; k /= 10) i++;\r\n      q.e = i + e * logBase - 1;\r\n\r\n      finalise(q, dp ? pr + q.e + 1 : pr, rm, more);\r\n    }\r\n\r\n    return q;\r\n  };\r\n})();\r\n\r\n\r\n/*\r\n * Round `x` to `sd` significant digits using rounding mode `rm`.\r\n * Check for over/under-flow.\r\n */\r\n function finalise(x, sd, rm, isTruncated) {\r\n  var digits, i, j, k, rd, roundUp, w, xd, xdi,\r\n    Ctor = x.constructor;\r\n\r\n  // Don't round if sd is null or undefined.\r\n  out: if (sd != null) {\r\n    xd = x.d;\r\n\r\n    // Infinity/NaN.\r\n    if (!xd) return x;\r\n\r\n    // rd: the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n    // w: the word of xd containing rd, a base 1e7 number.\r\n    // xdi: the index of w within xd.\r\n    // digits: the number of digits of w.\r\n    // i: what would be the index of rd within w if all the numbers were 7 digits long (i.e. if\r\n    // they had leading zeros)\r\n    // j: if > 0, the actual index of rd within w (if < 0, rd is a leading zero).\r\n\r\n    // Get the length of the first word of the digits array xd.\r\n    for (digits = 1, k = xd[0]; k >= 10; k /= 10) digits++;\r\n    i = sd - digits;\r\n\r\n    // Is the rounding digit in the first word of xd?\r\n    if (i < 0) {\r\n      i += LOG_BASE;\r\n      j = sd;\r\n      w = xd[xdi = 0];\r\n\r\n      // Get the rounding digit at index j of w.\r\n      rd = w / mathpow(10, digits - j - 1) % 10 | 0;\r\n    } else {\r\n      xdi = Math.ceil((i + 1) / LOG_BASE);\r\n      k = xd.length;\r\n      if (xdi >= k) {\r\n        if (isTruncated) {\r\n\r\n          // Needed by `naturalExponential`, `naturalLogarithm` and `squareRoot`.\r\n          for (; k++ <= xdi;) xd.push(0);\r\n          w = rd = 0;\r\n          digits = 1;\r\n          i %= LOG_BASE;\r\n          j = i - LOG_BASE + 1;\r\n        } else {\r\n          break out;\r\n        }\r\n      } else {\r\n        w = k = xd[xdi];\r\n\r\n        // Get the number of digits of w.\r\n        for (digits = 1; k >= 10; k /= 10) digits++;\r\n\r\n        // Get the index of rd within w.\r\n        i %= LOG_BASE;\r\n\r\n        // Get the index of rd within w, adjusted for leading zeros.\r\n        // The number of leading zeros of w is given by LOG_BASE - digits.\r\n        j = i - LOG_BASE + digits;\r\n\r\n        // Get the rounding digit at index j of w.\r\n        rd = j < 0 ? 0 : w / mathpow(10, digits - j - 1) % 10 | 0;\r\n      }\r\n    }\r\n\r\n    // Are there any non-zero digits after the rounding digit?\r\n    isTruncated = isTruncated || sd < 0 ||\r\n      xd[xdi + 1] !== void 0 || (j < 0 ? w : w % mathpow(10, digits - j - 1));\r\n\r\n    // The expression `w % mathpow(10, digits - j - 1)` returns all the digits of w to the right\r\n    // of the digit at (left-to-right) index j, e.g. if w is 908714 and j is 2, the expression\r\n    // will give 714.\r\n\r\n    roundUp = rm < 4\r\n      ? (rd || isTruncated) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n      : rd > 5 || rd == 5 && (rm == 4 || isTruncated || rm == 6 &&\r\n\r\n        // Check whether the digit to the left of the rounding digit is odd.\r\n        ((i > 0 ? j > 0 ? w / mathpow(10, digits - j) : 0 : xd[xdi - 1]) % 10) & 1 ||\r\n          rm == (x.s < 0 ? 8 : 7));\r\n\r\n    if (sd < 1 || !xd[0]) {\r\n      xd.length = 0;\r\n      if (roundUp) {\r\n\r\n        // Convert sd to decimal places.\r\n        sd -= x.e + 1;\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);\r\n        x.e = -sd || 0;\r\n      } else {\r\n\r\n        // Zero.\r\n        xd[0] = x.e = 0;\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n    // Remove excess digits.\r\n    if (i == 0) {\r\n      xd.length = xdi;\r\n      k = 1;\r\n      xdi--;\r\n    } else {\r\n      xd.length = xdi + 1;\r\n      k = mathpow(10, LOG_BASE - i);\r\n\r\n      // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n      // j > 0 means i > number of leading zeros of w.\r\n      xd[xdi] = j > 0 ? (w / mathpow(10, digits - j) % mathpow(10, j) | 0) * k : 0;\r\n    }\r\n\r\n    if (roundUp) {\r\n      for (;;) {\r\n\r\n        // Is the digit to be rounded up in the first word of xd?\r\n        if (xdi == 0) {\r\n\r\n          // i will be the length of xd[0] before k is added.\r\n          for (i = 1, j = xd[0]; j >= 10; j /= 10) i++;\r\n          j = xd[0] += k;\r\n          for (k = 1; j >= 10; j /= 10) k++;\r\n\r\n          // if i != k the length has increased.\r\n          if (i != k) {\r\n            x.e++;\r\n            if (xd[0] == BASE) xd[0] = 1;\r\n          }\r\n\r\n          break;\r\n        } else {\r\n          xd[xdi] += k;\r\n          if (xd[xdi] != BASE) break;\r\n          xd[xdi--] = 0;\r\n          k = 1;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (i = xd.length; xd[--i] === 0;) xd.pop();\r\n  }\r\n\r\n  if (external) {\r\n\r\n    // Overflow?\r\n    if (x.e > Ctor.maxE) {\r\n\r\n      // Infinity.\r\n      x.d = null;\r\n      x.e = NaN;\r\n\r\n    // Underflow?\r\n    } else if (x.e < Ctor.minE) {\r\n\r\n      // Zero.\r\n      x.e = 0;\r\n      x.d = [0];\r\n      // Ctor.underflow = true;\r\n    } // else Ctor.underflow = false;\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\nfunction finiteToString(x, isExp, sd) {\r\n  if (!x.isFinite()) return nonFiniteToString(x);\r\n  var k,\r\n    e = x.e,\r\n    str = digitsToString(x.d),\r\n    len = str.length;\r\n\r\n  if (isExp) {\r\n    if (sd && (k = sd - len) > 0) {\r\n      str = str.charAt(0) + '.' + str.slice(1) + getZeroString(k);\r\n    } else if (len > 1) {\r\n      str = str.charAt(0) + '.' + str.slice(1);\r\n    }\r\n\r\n    str = str + (x.e < 0 ? 'e' : 'e+') + x.e;\r\n  } else if (e < 0) {\r\n    str = '0.' + getZeroString(-e - 1) + str;\r\n    if (sd && (k = sd - len) > 0) str += getZeroString(k);\r\n  } else if (e >= len) {\r\n    str += getZeroString(e + 1 - len);\r\n    if (sd && (k = sd - e - 1) > 0) str = str + '.' + getZeroString(k);\r\n  } else {\r\n    if ((k = e + 1) < len) str = str.slice(0, k) + '.' + str.slice(k);\r\n    if (sd && (k = sd - len) > 0) {\r\n      if (e + 1 === len) str += '.';\r\n      str += getZeroString(k);\r\n    }\r\n  }\r\n\r\n  return str;\r\n}\r\n\r\n\r\n// Calculate the base 10 exponent from the base 1e7 exponent.\r\nfunction getBase10Exponent(digits, e) {\r\n  var w = digits[0];\r\n\r\n  // Add the number of digits of the first word of the digits array.\r\n  for ( e *= LOG_BASE; w >= 10; w /= 10) e++;\r\n  return e;\r\n}\r\n\r\n\r\nfunction getLn10(Ctor, sd, pr) {\r\n  if (sd > LN10_PRECISION) {\r\n\r\n    // Reset global state in case the exception is caught.\r\n    external = true;\r\n    if (pr) Ctor.precision = pr;\r\n    throw Error(precisionLimitExceeded);\r\n  }\r\n  return finalise(new Ctor(LN10), sd, 1, true);\r\n}\r\n\r\n\r\nfunction getPi(Ctor, sd, rm) {\r\n  if (sd > PI_PRECISION) throw Error(precisionLimitExceeded);\r\n  return finalise(new Ctor(PI), sd, rm, true);\r\n}\r\n\r\n\r\nfunction getPrecision(digits) {\r\n  var w = digits.length - 1,\r\n    len = w * LOG_BASE + 1;\r\n\r\n  w = digits[w];\r\n\r\n  // If non-zero...\r\n  if (w) {\r\n\r\n    // Subtract the number of trailing zeros of the last word.\r\n    for (; w % 10 == 0; w /= 10) len--;\r\n\r\n    // Add the number of digits of the first word.\r\n    for (w = digits[0]; w >= 10; w /= 10) len++;\r\n  }\r\n\r\n  return len;\r\n}\r\n\r\n\r\nfunction getZeroString(k) {\r\n  var zs = '';\r\n  for (; k--;) zs += '0';\r\n  return zs;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the value of Decimal `x` to the power `n`, where `n` is an\r\n * integer of type number.\r\n *\r\n * Implements 'exponentiation by squaring'. Called by `pow` and `parseOther`.\r\n *\r\n */\r\nfunction intPow(Ctor, x, n, pr) {\r\n  var isTruncated,\r\n    r = new Ctor(1),\r\n\r\n    // Max n of 9007199254740991 takes 53 loop iterations.\r\n    // Maximum digits array length; leaves [28, 34] guard digits.\r\n    k = Math.ceil(pr / LOG_BASE + 4);\r\n\r\n  external = false;\r\n\r\n  for (;;) {\r\n    if (n % 2) {\r\n      r = r.times(x);\r\n      if (truncate(r.d, k)) isTruncated = true;\r\n    }\r\n\r\n    n = mathfloor(n / 2);\r\n    if (n === 0) {\r\n\r\n      // To ensure correct rounding when r.d is truncated, increment the last word if it is zero.\r\n      n = r.d.length - 1;\r\n      if (isTruncated && r.d[n] === 0) ++r.d[n];\r\n      break;\r\n    }\r\n\r\n    x = x.times(x);\r\n    truncate(x.d, k);\r\n  }\r\n\r\n  external = true;\r\n\r\n  return r;\r\n}\r\n\r\n\r\nfunction isOdd(n) {\r\n  return n.d[n.d.length - 1] & 1;\r\n}\r\n\r\n\r\n/*\r\n * Handle `max` (`n` is -1) and `min` (`n` is 1).\r\n */\r\nfunction maxOrMin(Ctor, args, n) {\r\n  var k, y,\r\n    x = new Ctor(args[0]),\r\n    i = 0;\r\n\r\n  for (; ++i < args.length;) {\r\n    y = new Ctor(args[i]);\r\n\r\n    // NaN?\r\n    if (!y.s) {\r\n      x = y;\r\n      break;\r\n    }\r\n\r\n    k = x.cmp(y);\r\n\r\n    if (k === n || k === 0 && x.s === n) {\r\n      x = y;\r\n    }\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n * Taylor/Maclaurin series.\r\n *\r\n * exp(x) = x^0/0! + x^1/1! + x^2/2! + x^3/3! + ...\r\n *\r\n * Argument reduction:\r\n *   Repeat x = x / 32, k += 5, until |x| < 0.1\r\n *   exp(x) = exp(x / 2^k)^(2^k)\r\n *\r\n * Previously, the argument was initially reduced by\r\n * exp(x) = exp(r) * 10^k  where r = x - k * ln10, k = floor(x / ln10)\r\n * to first put r in the range [0, ln10], before dividing by 32 until |x| < 0.1, but this was\r\n * found to be slower than just dividing repeatedly by 32 as above.\r\n *\r\n * Max integer argument: exp('20723265836946413') = 6.3e+9000000000000000\r\n * Min integer argument: exp('-20723265836946411') = 1.2e-9000000000000000\r\n * (Math object integer min/max: Math.exp(709) = 8.2e+307, Math.exp(-745) = 5e-324)\r\n *\r\n *  exp(Infinity)  = Infinity\r\n *  exp(-Infinity) = 0\r\n *  exp(NaN)       = NaN\r\n *  exp(±0)        = 1\r\n *\r\n *  exp(x) is non-terminating for any finite, non-zero x.\r\n *\r\n *  The result will always be correctly rounded.\r\n *\r\n */\r\nfunction naturalExponential(x, sd) {\r\n  var denominator, guard, j, pow, sum, t, wpr,\r\n    rep = 0,\r\n    i = 0,\r\n    k = 0,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // 0/NaN/Infinity?\r\n  if (!x.d || !x.d[0] || x.e > 17) {\r\n\r\n    return new Ctor(x.d\r\n      ? !x.d[0] ? 1 : x.s < 0 ? 0 : 1 / 0\r\n      : x.s ? x.s < 0 ? 0 : x : 0 / 0);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  t = new Ctor(0.03125);\r\n\r\n  // while abs(x) >= 0.1\r\n  while (x.e > -2) {\r\n\r\n    // x = x / 2^5\r\n    x = x.times(t);\r\n    k += 5;\r\n  }\r\n\r\n  // Use 2 * log10(2^k) + 5 (empirically derived) to estimate the increase in precision\r\n  // necessary to ensure the first 4 rounding digits are correct.\r\n  guard = Math.log(mathpow(2, k)) / Math.LN10 * 2 + 5 | 0;\r\n  wpr += guard;\r\n  denominator = pow = sum = new Ctor(1);\r\n  Ctor.precision = wpr;\r\n\r\n  for (;;) {\r\n    pow = finalise(pow.times(x), wpr, 1);\r\n    denominator = denominator.times(++i);\r\n    t = sum.plus(divide(pow, denominator, wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      j = k;\r\n      while (j--) sum = finalise(sum.times(sum), wpr, 1);\r\n\r\n      // Check to see if the first 4 rounding digits are [49]999.\r\n      // If so, repeat the summation with a higher precision, otherwise\r\n      // e.g. with precision: 18, rounding: 1\r\n      // exp(18.404272462595034083567793919843761) = 98372560.1229999999 (should be 98372560.123)\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n\r\n        if (rep < 3 && checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += 10;\r\n          denominator = pow = t = new Ctor(1);\r\n          i = 0;\r\n          rep++;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n  }\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x` rounded to `sd` significant\r\n * digits.\r\n *\r\n *  ln(-n)        = NaN\r\n *  ln(0)         = -Infinity\r\n *  ln(-0)        = -Infinity\r\n *  ln(1)         = 0\r\n *  ln(Infinity)  = Infinity\r\n *  ln(-Infinity) = NaN\r\n *  ln(NaN)       = NaN\r\n *\r\n *  ln(n) (n != 1) is non-terminating.\r\n *\r\n */\r\nfunction naturalLogarithm(y, sd) {\r\n  var c, c0, denominator, e, numerator, rep, sum, t, wpr, x1, x2,\r\n    n = 1,\r\n    guard = 10,\r\n    x = y,\r\n    xd = x.d,\r\n    Ctor = x.constructor,\r\n    rm = Ctor.rounding,\r\n    pr = Ctor.precision;\r\n\r\n  // Is x negative or Infinity, NaN, 0 or 1?\r\n  if (x.s < 0 || !xd || !xd[0] || !x.e && xd[0] == 1 && xd.length == 1) {\r\n    return new Ctor(xd && !xd[0] ? -1 / 0 : x.s != 1 ? NaN : xd ? 0 : x);\r\n  }\r\n\r\n  if (sd == null) {\r\n    external = false;\r\n    wpr = pr;\r\n  } else {\r\n    wpr = sd;\r\n  }\r\n\r\n  Ctor.precision = wpr += guard;\r\n  c = digitsToString(xd);\r\n  c0 = c.charAt(0);\r\n\r\n  if (Math.abs(e = x.e) < 1.5e15) {\r\n\r\n    // Argument reduction.\r\n    // The series converges faster the closer the argument is to 1, so using\r\n    // ln(a^b) = b * ln(a),   ln(a) = ln(a^b) / b\r\n    // multiply the argument by itself until the leading digits of the significand are 7, 8, 9,\r\n    // 10, 11, 12 or 13, recording the number of multiplications so the sum of the series can\r\n    // later be divided by this number, then separate out the power of 10 using\r\n    // ln(a*10^b) = ln(a) + b*ln(10).\r\n\r\n    // max n is 21 (gives 0.9, 1.0 or 1.1) (9e15 / 21 = 4.2e14).\r\n    //while (c0 < 9 && c0 != 1 || c0 == 1 && c.charAt(1) > 1) {\r\n    // max n is 6 (gives 0.7 - 1.3)\r\n    while (c0 < 7 && c0 != 1 || c0 == 1 && c.charAt(1) > 3) {\r\n      x = x.times(y);\r\n      c = digitsToString(x.d);\r\n      c0 = c.charAt(0);\r\n      n++;\r\n    }\r\n\r\n    e = x.e;\r\n\r\n    if (c0 > 1) {\r\n      x = new Ctor('0.' + c);\r\n      e++;\r\n    } else {\r\n      x = new Ctor(c0 + '.' + c.slice(1));\r\n    }\r\n  } else {\r\n\r\n    // The argument reduction method above may result in overflow if the argument y is a massive\r\n    // number with exponent >= 1500000000000000 (9e15 / 6 = 1.5e15), so instead recall this\r\n    // function using ln(x*10^e) = ln(x) + e*ln(10).\r\n    t = getLn10(Ctor, wpr + 2, pr).times(e + '');\r\n    x = naturalLogarithm(new Ctor(c0 + '.' + c.slice(1)), wpr - guard).plus(t);\r\n    Ctor.precision = pr;\r\n\r\n    return sd == null ? finalise(x, pr, rm, external = true) : x;\r\n  }\r\n\r\n  // x1 is x reduced to a value near 1.\r\n  x1 = x;\r\n\r\n  // Taylor series.\r\n  // ln(y) = ln((1 + x)/(1 - x)) = 2(x + x^3/3 + x^5/5 + x^7/7 + ...)\r\n  // where x = (y - 1)/(y + 1)    (|x| < 1)\r\n  sum = numerator = x = divide(x.minus(1), x.plus(1), wpr, 1);\r\n  x2 = finalise(x.times(x), wpr, 1);\r\n  denominator = 3;\r\n\r\n  for (;;) {\r\n    numerator = finalise(numerator.times(x2), wpr, 1);\r\n    t = sum.plus(divide(numerator, new Ctor(denominator), wpr, 1));\r\n\r\n    if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {\r\n      sum = sum.times(2);\r\n\r\n      // Reverse the argument reduction. Check that e is not 0 because, besides preventing an\r\n      // unnecessary calculation, -0 + 0 = +0 and to ensure correct rounding -0 needs to stay -0.\r\n      if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ''));\r\n      sum = divide(sum, new Ctor(n), wpr, 1);\r\n\r\n      // Is rm > 3 and the first 4 rounding digits 4999, or rm < 4 (or the summation has\r\n      // been repeated previously) and the first 4 rounding digits 9999?\r\n      // If so, restart the summation with a higher precision, otherwise\r\n      // e.g. with precision: 12, rounding: 1\r\n      // ln(135520028.6126091714265381533) = 18.7246299999 when it should be 18.72463.\r\n      // `wpr - guard` is the index of first rounding digit.\r\n      if (sd == null) {\r\n        if (checkRoundingDigits(sum.d, wpr - guard, rm, rep)) {\r\n          Ctor.precision = wpr += guard;\r\n          t = numerator = x = divide(x1.minus(1), x1.plus(1), wpr, 1);\r\n          x2 = finalise(x.times(x), wpr, 1);\r\n          denominator = rep = 1;\r\n        } else {\r\n          return finalise(sum, Ctor.precision = pr, rm, external = true);\r\n        }\r\n      } else {\r\n        Ctor.precision = pr;\r\n        return sum;\r\n      }\r\n    }\r\n\r\n    sum = t;\r\n    denominator += 2;\r\n  }\r\n}\r\n\r\n\r\n// ±Infinity, NaN.\r\nfunction nonFiniteToString(x) {\r\n  // Unsigned.\r\n  return String(x.s * x.s / 0);\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from string `str`.\r\n */\r\nfunction parseDecimal(x, str) {\r\n  var e, i, len;\r\n\r\n  // TODO BigInt str: no need to check for decimal point, exponential form or leading zeros.\r\n  // Decimal point?\r\n  if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = str.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +str.slice(i + 1);\r\n    str = str.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = str.length;\r\n  }\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n  // Determine trailing zeros.\r\n  for (len = str.length; str.charCodeAt(len - 1) === 48; --len);\r\n  str = str.slice(i, len);\r\n\r\n  if (str) {\r\n    len -= i;\r\n    x.e = e = e - i - 1;\r\n    x.d = [];\r\n\r\n    // Transform base\r\n\r\n    // e is the base 10 exponent.\r\n    // i is where to slice str to get the first word of the digits array.\r\n    i = (e + 1) % LOG_BASE;\r\n    if (e < 0) i += LOG_BASE;\r\n\r\n    if (i < len) {\r\n      if (i) x.d.push(+str.slice(0, i));\r\n      for (len -= LOG_BASE; i < len;) x.d.push(+str.slice(i, i += LOG_BASE));\r\n      str = str.slice(i);\r\n      i = LOG_BASE - str.length;\r\n    } else {\r\n      i -= len;\r\n    }\r\n\r\n    for (; i--;) str += '0';\r\n    x.d.push(+str);\r\n\r\n    if (external) {\r\n\r\n      // Overflow?\r\n      if (x.e > x.constructor.maxE) {\r\n\r\n        // Infinity.\r\n        x.d = null;\r\n        x.e = NaN;\r\n\r\n      // Underflow?\r\n      } else if (x.e < x.constructor.minE) {\r\n\r\n        // Zero.\r\n        x.e = 0;\r\n        x.d = [0];\r\n        // x.constructor.underflow = true;\r\n      } // else x.constructor.underflow = false;\r\n    }\r\n  } else {\r\n\r\n    // Zero.\r\n    x.e = 0;\r\n    x.d = [0];\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Parse the value of a new Decimal `x` from a string `str`, which is not a decimal value.\r\n */\r\nfunction parseOther(x, str) {\r\n  var base, Ctor, divisor, i, isFloat, len, p, xd, xe;\r\n\r\n  if (str.indexOf('_') > -1) {\r\n    str = str.replace(/(\\d)_(?=\\d)/g, '$1');\r\n    if (isDecimal.test(str)) return parseDecimal(x, str);\r\n  } else if (str === 'Infinity' || str === 'NaN') {\r\n    if (!+str) x.s = NaN;\r\n    x.e = NaN;\r\n    x.d = null;\r\n    return x;\r\n  }\r\n\r\n  if (isHex.test(str))  {\r\n    base = 16;\r\n    str = str.toLowerCase();\r\n  } else if (isBinary.test(str))  {\r\n    base = 2;\r\n  } else if (isOctal.test(str))  {\r\n    base = 8;\r\n  } else {\r\n    throw Error(invalidArgument + str);\r\n  }\r\n\r\n  // Is there a binary exponent part?\r\n  i = str.search(/p/i);\r\n\r\n  if (i > 0) {\r\n    p = +str.slice(i + 1);\r\n    str = str.substring(2, i);\r\n  } else {\r\n    str = str.slice(2);\r\n  }\r\n\r\n  // Convert `str` as an integer then divide the result by `base` raised to a power such that the\r\n  // fraction part will be restored.\r\n  i = str.indexOf('.');\r\n  isFloat = i >= 0;\r\n  Ctor = x.constructor;\r\n\r\n  if (isFloat) {\r\n    str = str.replace('.', '');\r\n    len = str.length;\r\n    i = len - i;\r\n\r\n    // log[10](16) = 1.2041... , log[10](88) = 1.9444....\r\n    divisor = intPow(Ctor, new Ctor(base), i, i * 2);\r\n  }\r\n\r\n  xd = convertBase(str, base, BASE);\r\n  xe = xd.length - 1;\r\n\r\n  // Remove trailing zeros.\r\n  for (i = xe; xd[i] === 0; --i) xd.pop();\r\n  if (i < 0) return new Ctor(x.s * 0);\r\n  x.e = getBase10Exponent(xd, xe);\r\n  x.d = xd;\r\n  external = false;\r\n\r\n  // At what precision to perform the division to ensure exact conversion?\r\n  // maxDecimalIntegerPartDigitCount = ceil(log[10](b) * otherBaseIntegerPartDigitCount)\r\n  // log[10](2) = 0.30103, log[10](8) = 0.90309, log[10](16) = 1.20412\r\n  // E.g. ceil(1.2 * 3) = 4, so up to 4 decimal digits are needed to represent 3 hex int digits.\r\n  // maxDecimalFractionPartDigitCount = {Hex:4|Oct:3|Bin:1} * otherBaseFractionPartDigitCount\r\n  // Therefore using 4 * the number of digits of str will always be enough.\r\n  if (isFloat) x = divide(x, divisor, len * 4);\r\n\r\n  // Multiply by the binary exponent part if present.\r\n  if (p) x = x.times(Math.abs(p) < 54 ? mathpow(2, p) : Decimal.pow(2, p));\r\n  external = true;\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * sin(x) = x - x^3/3! + x^5/5! - ...\r\n * |x| < pi/2\r\n *\r\n */\r\nfunction sine(Ctor, x) {\r\n  var k,\r\n    len = x.d.length;\r\n\r\n  if (len < 3) {\r\n    return x.isZero() ? x : taylorSeries(Ctor, 2, x, x);\r\n  }\r\n\r\n  // Argument reduction: sin(5x) = 16*sin^5(x) - 20*sin^3(x) + 5*sin(x)\r\n  // i.e. sin(x) = 16*sin^5(x/5) - 20*sin^3(x/5) + 5*sin(x/5)\r\n  // and  sin(x) = sin(x/5)(5 + sin^2(x/5)(16sin^2(x/5) - 20))\r\n\r\n  // Estimate the optimum number of times to use the argument reduction.\r\n  k = 1.4 * Math.sqrt(len);\r\n  k = k > 16 ? 16 : k | 0;\r\n\r\n  x = x.times(1 / tinyPow(5, k));\r\n  x = taylorSeries(Ctor, 2, x, x);\r\n\r\n  // Reverse argument reduction\r\n  var sin2_x,\r\n    d5 = new Ctor(5),\r\n    d16 = new Ctor(16),\r\n    d20 = new Ctor(20);\r\n  for (; k--;) {\r\n    sin2_x = x.times(x);\r\n    x = x.times(d5.plus(sin2_x.times(d16.times(sin2_x).minus(d20))));\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n// Calculate Taylor series for `cos`, `cosh`, `sin` and `sinh`.\r\nfunction taylorSeries(Ctor, n, x, y, isHyperbolic) {\r\n  var j, t, u, x2,\r\n    i = 1,\r\n    pr = Ctor.precision,\r\n    k = Math.ceil(pr / LOG_BASE);\r\n\r\n  external = false;\r\n  x2 = x.times(x);\r\n  u = new Ctor(y);\r\n\r\n  for (;;) {\r\n    t = divide(u.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    u = isHyperbolic ? y.plus(t) : y.minus(t);\r\n    y = divide(t.times(x2), new Ctor(n++ * n++), pr, 1);\r\n    t = u.plus(y);\r\n\r\n    if (t.d[k] !== void 0) {\r\n      for (j = k; t.d[j] === u.d[j] && j--;);\r\n      if (j == -1) break;\r\n    }\r\n\r\n    j = u;\r\n    u = y;\r\n    y = t;\r\n    t = j;\r\n    i++;\r\n  }\r\n\r\n  external = true;\r\n  t.d.length = k + 1;\r\n\r\n  return t;\r\n}\r\n\r\n\r\n// Exponent e must be positive and non-zero.\r\nfunction tinyPow(b, e) {\r\n  var n = b;\r\n  while (--e) n *= b;\r\n  return n;\r\n}\r\n\r\n\r\n// Return the absolute value of `x` reduced to less than or equal to half pi.\r\nfunction toLessThanHalfPi(Ctor, x) {\r\n  var t,\r\n    isNeg = x.s < 0,\r\n    pi = getPi(Ctor, Ctor.precision, 1),\r\n    halfPi = pi.times(0.5);\r\n\r\n  x = x.abs();\r\n\r\n  if (x.lte(halfPi)) {\r\n    quadrant = isNeg ? 4 : 1;\r\n    return x;\r\n  }\r\n\r\n  t = x.divToInt(pi);\r\n\r\n  if (t.isZero()) {\r\n    quadrant = isNeg ? 3 : 2;\r\n  } else {\r\n    x = x.minus(t.times(pi));\r\n\r\n    // 0 <= x < pi\r\n    if (x.lte(halfPi)) {\r\n      quadrant = isOdd(t) ? (isNeg ? 2 : 3) : (isNeg ? 4 : 1);\r\n      return x;\r\n    }\r\n\r\n    quadrant = isOdd(t) ? (isNeg ? 1 : 4) : (isNeg ? 3 : 2);\r\n  }\r\n\r\n  return x.minus(pi).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return the value of Decimal `x` as a string in base `baseOut`.\r\n *\r\n * If the optional `sd` argument is present include a binary exponent suffix.\r\n */\r\nfunction toStringBinary(x, baseOut, sd, rm) {\r\n  var base, e, i, k, len, roundUp, str, xd, y,\r\n    Ctor = x.constructor,\r\n    isExp = sd !== void 0;\r\n\r\n  if (isExp) {\r\n    checkInt32(sd, 1, MAX_DIGITS);\r\n    if (rm === void 0) rm = Ctor.rounding;\r\n    else checkInt32(rm, 0, 8);\r\n  } else {\r\n    sd = Ctor.precision;\r\n    rm = Ctor.rounding;\r\n  }\r\n\r\n  if (!x.isFinite()) {\r\n    str = nonFiniteToString(x);\r\n  } else {\r\n    str = finiteToString(x);\r\n    i = str.indexOf('.');\r\n\r\n    // Use exponential notation according to `toExpPos` and `toExpNeg`? No, but if required:\r\n    // maxBinaryExponent = floor((decimalExponent + 1) * log[2](10))\r\n    // minBinaryExponent = floor(decimalExponent * log[2](10))\r\n    // log[2](10) = 3.321928094887362347870319429489390175864\r\n\r\n    if (isExp) {\r\n      base = 2;\r\n      if (baseOut == 16) {\r\n        sd = sd * 4 - 3;\r\n      } else if (baseOut == 8) {\r\n        sd = sd * 3 - 2;\r\n      }\r\n    } else {\r\n      base = baseOut;\r\n    }\r\n\r\n    // Convert the number as an integer then divide the result by its base raised to a power such\r\n    // that the fraction part will be restored.\r\n\r\n    // Non-integer.\r\n    if (i >= 0) {\r\n      str = str.replace('.', '');\r\n      y = new Ctor(1);\r\n      y.e = str.length - i;\r\n      y.d = convertBase(finiteToString(y), 10, base);\r\n      y.e = y.d.length;\r\n    }\r\n\r\n    xd = convertBase(str, 10, base);\r\n    e = len = xd.length;\r\n\r\n    // Remove trailing zeros.\r\n    for (; xd[--len] == 0;) xd.pop();\r\n\r\n    if (!xd[0]) {\r\n      str = isExp ? '0p+0' : '0';\r\n    } else {\r\n      if (i < 0) {\r\n        e--;\r\n      } else {\r\n        x = new Ctor(x);\r\n        x.d = xd;\r\n        x.e = e;\r\n        x = divide(x, y, sd, rm, 0, base);\r\n        xd = x.d;\r\n        e = x.e;\r\n        roundUp = inexact;\r\n      }\r\n\r\n      // The rounding digit, i.e. the digit after the digit that may be rounded up.\r\n      i = xd[sd];\r\n      k = base / 2;\r\n      roundUp = roundUp || xd[sd + 1] !== void 0;\r\n\r\n      roundUp = rm < 4\r\n        ? (i !== void 0 || roundUp) && (rm === 0 || rm === (x.s < 0 ? 3 : 2))\r\n        : i > k || i === k && (rm === 4 || roundUp || rm === 6 && xd[sd - 1] & 1 ||\r\n          rm === (x.s < 0 ? 8 : 7));\r\n\r\n      xd.length = sd;\r\n\r\n      if (roundUp) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up and so on.\r\n        for (; ++xd[--sd] > base - 1;) {\r\n          xd[sd] = 0;\r\n          if (!sd) {\r\n            ++e;\r\n            xd.unshift(1);\r\n          }\r\n        }\r\n      }\r\n\r\n      // Determine trailing zeros.\r\n      for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n      // E.g. [4, 11, 15] becomes 4bf.\r\n      for (i = 0, str = ''; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n\r\n      // Add binary exponent suffix?\r\n      if (isExp) {\r\n        if (len > 1) {\r\n          if (baseOut == 16 || baseOut == 8) {\r\n            i = baseOut == 16 ? 4 : 3;\r\n            for (--len; len % i; len++) str += '0';\r\n            xd = convertBase(str, base, baseOut);\r\n            for (len = xd.length; !xd[len - 1]; --len);\r\n\r\n            // xd[0] will always be be 1\r\n            for (i = 1, str = '1.'; i < len; i++) str += NUMERALS.charAt(xd[i]);\r\n          } else {\r\n            str = str.charAt(0) + '.' + str.slice(1);\r\n          }\r\n        }\r\n\r\n        str =  str + (e < 0 ? 'p' : 'p+') + e;\r\n      } else if (e < 0) {\r\n        for (; ++e;) str = '0' + str;\r\n        str = '0.' + str;\r\n      } else {\r\n        if (++e > len) for (e -= len; e-- ;) str += '0';\r\n        else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    str = (baseOut == 16 ? '0x' : baseOut == 2 ? '0b' : baseOut == 8 ? '0o' : '') + str;\r\n  }\r\n\r\n  return x.s < 0 ? '-' + str : str;\r\n}\r\n\r\n\r\n// Does not strip trailing zeros.\r\nfunction truncate(arr, len) {\r\n  if (arr.length > len) {\r\n    arr.length = len;\r\n    return true;\r\n  }\r\n}\r\n\r\n\r\n// Decimal methods\r\n\r\n\r\n/*\r\n *  abs\r\n *  acos\r\n *  acosh\r\n *  add\r\n *  asin\r\n *  asinh\r\n *  atan\r\n *  atanh\r\n *  atan2\r\n *  cbrt\r\n *  ceil\r\n *  clamp\r\n *  clone\r\n *  config\r\n *  cos\r\n *  cosh\r\n *  div\r\n *  exp\r\n *  floor\r\n *  hypot\r\n *  ln\r\n *  log\r\n *  log2\r\n *  log10\r\n *  max\r\n *  min\r\n *  mod\r\n *  mul\r\n *  pow\r\n *  random\r\n *  round\r\n *  set\r\n *  sign\r\n *  sin\r\n *  sinh\r\n *  sqrt\r\n *  sub\r\n *  sum\r\n *  tan\r\n *  tanh\r\n *  trunc\r\n */\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the absolute value of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction abs(x) {\r\n  return new this(x).abs();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arccosine in radians of `x`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction acos(x) {\r\n  return new this(x).acos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic cosine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction acosh(x) {\r\n  return new this(x).acosh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of `x` and `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction add(x, y) {\r\n  return new this(x).plus(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arcsine in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction asin(x) {\r\n  return new this(x).asin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic sine of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction asinh(x) {\r\n  return new this(x).asinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction atan(x) {\r\n  return new this(x).atan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the inverse of the hyperbolic tangent of `x`, rounded to\r\n * `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction atanh(x) {\r\n  return new this(x).atanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the arctangent in radians of `y/x` in the range -pi to pi\r\n * (inclusive), rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * Domain: [-Infinity, Infinity]\r\n * Range: [-pi, pi]\r\n *\r\n * y {number|string|bigint|Decimal} The y-coordinate.\r\n * x {number|string|bigint|Decimal} The x-coordinate.\r\n *\r\n * atan2(±0, -0)               = ±pi\r\n * atan2(±0, +0)               = ±0\r\n * atan2(±0, -x)               = ±pi for x > 0\r\n * atan2(±0, x)                = ±0 for x > 0\r\n * atan2(-y, ±0)               = -pi/2 for y > 0\r\n * atan2(y, ±0)                = pi/2 for y > 0\r\n * atan2(±y, -Infinity)        = ±pi for finite y > 0\r\n * atan2(±y, +Infinity)        = ±0 for finite y > 0\r\n * atan2(±Infinity, x)         = ±pi/2 for finite x\r\n * atan2(±Infinity, -Infinity) = ±3*pi/4\r\n * atan2(±Infinity, +Infinity) = ±pi/4\r\n * atan2(NaN, x) = NaN\r\n * atan2(y, NaN) = NaN\r\n *\r\n */\r\nfunction atan2(y, x) {\r\n  y = new this(y);\r\n  x = new this(x);\r\n  var r,\r\n    pr = this.precision,\r\n    rm = this.rounding,\r\n    wpr = pr + 4;\r\n\r\n  // Either NaN\r\n  if (!y.s || !x.s) {\r\n    r = new this(NaN);\r\n\r\n  // Both ±Infinity\r\n  } else if (!y.d && !x.d) {\r\n    r = getPi(this, wpr, 1).times(x.s > 0 ? 0.25 : 0.75);\r\n    r.s = y.s;\r\n\r\n  // x is ±Infinity or y is ±0\r\n  } else if (!x.d || y.isZero()) {\r\n    r = x.s < 0 ? getPi(this, pr, rm) : new this(0);\r\n    r.s = y.s;\r\n\r\n  // y is ±Infinity or x is ±0\r\n  } else if (!y.d || x.isZero()) {\r\n    r = getPi(this, wpr, 1).times(0.5);\r\n    r.s = y.s;\r\n\r\n  // Both non-zero and finite\r\n  } else if (x.s < 0) {\r\n    this.precision = wpr;\r\n    this.rounding = 1;\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n    x = getPi(this, wpr, 1);\r\n    this.precision = pr;\r\n    this.rounding = rm;\r\n    r = y.s < 0 ? r.minus(x) : r.plus(x);\r\n  } else {\r\n    r = this.atan(divide(y, x, wpr, 1));\r\n  }\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cube root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction cbrt(x) {\r\n  return new this(x).cbrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using `ROUND_CEIL`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ceil(x) {\r\n  return finalise(x = new this(x), x.e + 1, 2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` clamped to the range delineated by `min` and `max`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * min {number|string|bigint|Decimal}\r\n * max {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction clamp(x, min, max) {\r\n  return new this(x).clamp(min, max);\r\n}\r\n\r\n\r\n/*\r\n * Configure global settings for a Decimal constructor.\r\n *\r\n * `obj` is an object with one or more of the following properties,\r\n *\r\n *   precision  {number}\r\n *   rounding   {number}\r\n *   toExpNeg   {number}\r\n *   toExpPos   {number}\r\n *   maxE       {number}\r\n *   minE       {number}\r\n *   modulo     {number}\r\n *   crypto     {boolean|number}\r\n *   defaults   {true}\r\n *\r\n * E.g. Decimal.config({ precision: 20, rounding: 4 })\r\n *\r\n */\r\nfunction config(obj) {\r\n  if (!obj || typeof obj !== 'object') throw Error(decimalError + 'Object expected');\r\n  var i, p, v,\r\n    useDefaults = obj.defaults === true,\r\n    ps = [\r\n      'precision', 1, MAX_DIGITS,\r\n      'rounding', 0, 8,\r\n      'toExpNeg', -EXP_LIMIT, 0,\r\n      'toExpPos', 0, EXP_LIMIT,\r\n      'maxE', 0, EXP_LIMIT,\r\n      'minE', -EXP_LIMIT, 0,\r\n      'modulo', 0, 9\r\n    ];\r\n\r\n  for (i = 0; i < ps.length; i += 3) {\r\n    if (p = ps[i], useDefaults) this[p] = DEFAULTS[p];\r\n    if ((v = obj[p]) !== void 0) {\r\n      if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;\r\n      else throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  if (p = 'crypto', useDefaults) this[p] = DEFAULTS[p];\r\n  if ((v = obj[p]) !== void 0) {\r\n    if (v === true || v === false || v === 0 || v === 1) {\r\n      if (v) {\r\n        if (typeof crypto != 'undefined' && crypto &&\r\n          (crypto.getRandomValues || crypto.randomBytes)) {\r\n          this[p] = true;\r\n        } else {\r\n          throw Error(cryptoUnavailable);\r\n        }\r\n      } else {\r\n        this[p] = false;\r\n      }\r\n    } else {\r\n      throw Error(invalidArgument + p + ': ' + v);\r\n    }\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the cosine of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cos(x) {\r\n  return new this(x).cos();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic cosine of `x`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction cosh(x) {\r\n  return new this(x).cosh();\r\n}\r\n\r\n\r\n/*\r\n * Create and return a Decimal constructor with the same configuration properties as this Decimal\r\n * constructor.\r\n *\r\n */\r\nfunction clone(obj) {\r\n  var i, p, ps;\r\n\r\n  /*\r\n   * The Decimal constructor and exported function.\r\n   * Return a new Decimal instance.\r\n   *\r\n   * v {number|string|bigint|Decimal} A numeric value.\r\n   *\r\n   */\r\n  function Decimal(v) {\r\n    var e, i, t,\r\n      x = this;\r\n\r\n    // Decimal called without new.\r\n    if (!(x instanceof Decimal)) return new Decimal(v);\r\n\r\n    // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor\r\n    // which points to Object.\r\n    x.constructor = Decimal;\r\n\r\n    if (isDecimalInstance(v)) {\r\n      x.s = v.s;\r\n\r\n      if (external) {\r\n        if (!v.d || v.e > Decimal.maxE) {\r\n\r\n          // Infinity.\r\n          x.e = NaN;\r\n          x.d = null;\r\n        } else if (v.e < Decimal.minE) {\r\n\r\n          // Zero.\r\n          x.e = 0;\r\n          x.d = [0];\r\n        } else {\r\n          x.e = v.e;\r\n          x.d = v.d.slice();\r\n        }\r\n      } else {\r\n        x.e = v.e;\r\n        x.d = v.d ? v.d.slice() : v.d;\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    t = typeof v;\r\n\r\n    if (t === 'number') {\r\n      if (v === 0) {\r\n        x.s = 1 / v < 0 ? -1 : 1;\r\n        x.e = 0;\r\n        x.d = [0];\r\n        return;\r\n      }\r\n\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      // Fast path for small integers.\r\n      if (v === ~~v && v < 1e7) {\r\n        for (e = 0, i = v; i >= 10; i /= 10) e++;\r\n\r\n        if (external) {\r\n          if (e > Decimal.maxE) {\r\n            x.e = NaN;\r\n            x.d = null;\r\n          } else if (e < Decimal.minE) {\r\n            x.e = 0;\r\n            x.d = [0];\r\n          } else {\r\n            x.e = e;\r\n            x.d = [v];\r\n          }\r\n        } else {\r\n          x.e = e;\r\n          x.d = [v];\r\n        }\r\n\r\n        return;\r\n      }\r\n\r\n      // Infinity or NaN?\r\n      if (v * 0 !== 0) {\r\n        if (!v) x.s = NaN;\r\n        x.e = NaN;\r\n        x.d = null;\r\n        return;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    if (t === 'string') {\r\n      if ((i = v.charCodeAt(0)) === 45) {  // minus sign\r\n        v = v.slice(1);\r\n        x.s = -1;\r\n      } else {\r\n        if (i === 43) v = v.slice(1);  // plus sign\r\n        x.s = 1;\r\n      }\r\n\r\n      return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);\r\n    }\r\n\r\n    if (t === 'bigint') {\r\n      if (v < 0) {\r\n        v = -v;\r\n        x.s = -1;\r\n      } else {\r\n        x.s = 1;\r\n      }\r\n\r\n      return parseDecimal(x, v.toString());\r\n    }\r\n\r\n    throw Error(invalidArgument + v);\r\n  }\r\n\r\n  Decimal.prototype = P;\r\n\r\n  Decimal.ROUND_UP = 0;\r\n  Decimal.ROUND_DOWN = 1;\r\n  Decimal.ROUND_CEIL = 2;\r\n  Decimal.ROUND_FLOOR = 3;\r\n  Decimal.ROUND_HALF_UP = 4;\r\n  Decimal.ROUND_HALF_DOWN = 5;\r\n  Decimal.ROUND_HALF_EVEN = 6;\r\n  Decimal.ROUND_HALF_CEIL = 7;\r\n  Decimal.ROUND_HALF_FLOOR = 8;\r\n  Decimal.EUCLID = 9;\r\n\r\n  Decimal.config = Decimal.set = config;\r\n  Decimal.clone = clone;\r\n  Decimal.isDecimal = isDecimalInstance;\r\n\r\n  Decimal.abs = abs;\r\n  Decimal.acos = acos;\r\n  Decimal.acosh = acosh;        // ES6\r\n  Decimal.add = add;\r\n  Decimal.asin = asin;\r\n  Decimal.asinh = asinh;        // ES6\r\n  Decimal.atan = atan;\r\n  Decimal.atanh = atanh;        // ES6\r\n  Decimal.atan2 = atan2;\r\n  Decimal.cbrt = cbrt;          // ES6\r\n  Decimal.ceil = ceil;\r\n  Decimal.clamp = clamp;\r\n  Decimal.cos = cos;\r\n  Decimal.cosh = cosh;          // ES6\r\n  Decimal.div = div;\r\n  Decimal.exp = exp;\r\n  Decimal.floor = floor;\r\n  Decimal.hypot = hypot;        // ES6\r\n  Decimal.ln = ln;\r\n  Decimal.log = log;\r\n  Decimal.log10 = log10;        // ES6\r\n  Decimal.log2 = log2;          // ES6\r\n  Decimal.max = max;\r\n  Decimal.min = min;\r\n  Decimal.mod = mod;\r\n  Decimal.mul = mul;\r\n  Decimal.pow = pow;\r\n  Decimal.random = random;\r\n  Decimal.round = round;\r\n  Decimal.sign = sign;          // ES6\r\n  Decimal.sin = sin;\r\n  Decimal.sinh = sinh;          // ES6\r\n  Decimal.sqrt = sqrt;\r\n  Decimal.sub = sub;\r\n  Decimal.sum = sum;\r\n  Decimal.tan = tan;\r\n  Decimal.tanh = tanh;          // ES6\r\n  Decimal.trunc = trunc;        // ES6\r\n\r\n  if (obj === void 0) obj = {};\r\n  if (obj) {\r\n    if (obj.defaults !== true) {\r\n      ps = ['precision', 'rounding', 'toExpNeg', 'toExpPos', 'maxE', 'minE', 'modulo', 'crypto'];\r\n      for (i = 0; i < ps.length;) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];\r\n    }\r\n  }\r\n\r\n  Decimal.config(obj);\r\n\r\n  return Decimal;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` divided by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction div(x, y) {\r\n  return new this(x).div(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural exponential of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The power to which to raise the base of the natural log.\r\n *\r\n */\r\nfunction exp(x) {\r\n  return new this(x).exp();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` round to an integer using `ROUND_FLOOR`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction floor(x) {\r\n  return finalise(x = new this(x), x.e + 1, 3);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of the sum of the squares of the arguments,\r\n * rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * hypot(a, b, ...) = sqrt(a^2 + b^2 + ...)\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction hypot() {\r\n  var i, n,\r\n    t = new this(0);\r\n\r\n  external = false;\r\n\r\n  for (i = 0; i < arguments.length;) {\r\n    n = new this(arguments[i++]);\r\n    if (!n.d) {\r\n      if (n.s) {\r\n        external = true;\r\n        return new this(1 / 0);\r\n      }\r\n      t = n;\r\n    } else if (t.d) {\r\n      t = t.plus(n.times(n));\r\n    }\r\n  }\r\n\r\n  external = true;\r\n\r\n  return t.sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return true if object is a Decimal instance (where Decimal is any Decimal constructor),\r\n * otherwise return false.\r\n *\r\n */\r\nfunction isDecimalInstance(obj) {\r\n  return obj instanceof Decimal || obj && obj.toStringTag === tag || false;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the natural logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction ln(x) {\r\n  return new this(x).ln();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the log of `x` to the base `y`, or to base 10 if no base\r\n * is specified, rounded to `precision` significant digits using rounding mode `rounding`.\r\n *\r\n * log[y](x)\r\n *\r\n * x {number|string|bigint|Decimal} The argument of the logarithm.\r\n * y {number|string|bigint|Decimal} The base of the logarithm.\r\n *\r\n */\r\nfunction log(x, y) {\r\n  return new this(x).log(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 2 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log2(x) {\r\n  return new this(x).log(2);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the base 10 logarithm of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction log10(x) {\r\n  return new this(x).log(10);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the maximum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction max() {\r\n  return maxOrMin(this, arguments, -1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the minimum of the arguments.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction min() {\r\n  return maxOrMin(this, arguments, 1);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` modulo `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mod(x, y) {\r\n  return new this(x).mod(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` multiplied by `y`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction mul(x, y) {\r\n  return new this(x).mul(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` raised to the power `y`, rounded to precision\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} The base.\r\n * y {number|string|bigint|Decimal} The exponent.\r\n *\r\n */\r\nfunction pow(x, y) {\r\n  return new this(x).pow(y);\r\n}\r\n\r\n\r\n/*\r\n * Returns a new Decimal with a random value equal to or greater than 0 and less than 1, and with\r\n * `sd`, or `Decimal.precision` if `sd` is omitted, significant digits (or less if trailing zeros\r\n * are produced).\r\n *\r\n * [sd] {number} Significant digits. Integer, 0 to MAX_DIGITS inclusive.\r\n *\r\n */\r\nfunction random(sd) {\r\n  var d, e, k, n,\r\n    i = 0,\r\n    r = new this(1),\r\n    rd = [];\r\n\r\n  if (sd === void 0) sd = this.precision;\r\n  else checkInt32(sd, 1, MAX_DIGITS);\r\n\r\n  k = Math.ceil(sd / LOG_BASE);\r\n\r\n  if (!this.crypto) {\r\n    for (; i < k;) rd[i++] = Math.random() * 1e7 | 0;\r\n\r\n  // Browsers supporting crypto.getRandomValues.\r\n  } else if (crypto.getRandomValues) {\r\n    d = crypto.getRandomValues(new Uint32Array(k));\r\n\r\n    for (; i < k;) {\r\n      n = d[i];\r\n\r\n      // 0 <= n < 4294967296\r\n      // Probability n >= 4.29e9, is 4967296 / 4294967296 = 0.00116 (1 in 865).\r\n      if (n >= 4.29e9) {\r\n        d[i] = crypto.getRandomValues(new Uint32Array(1))[0];\r\n      } else {\r\n\r\n        // 0 <= n <= 4289999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd[i++] = n % 1e7;\r\n      }\r\n    }\r\n\r\n  // Node.js supporting crypto.randomBytes.\r\n  } else if (crypto.randomBytes) {\r\n\r\n    // buffer\r\n    d = crypto.randomBytes(k *= 4);\r\n\r\n    for (; i < k;) {\r\n\r\n      // 0 <= n < 2147483648\r\n      n = d[i] + (d[i + 1] << 8) + (d[i + 2] << 16) + ((d[i + 3] & 0x7f) << 24);\r\n\r\n      // Probability n >= 2.14e9, is 7483648 / 2147483648 = 0.0035 (1 in 286).\r\n      if (n >= 2.14e9) {\r\n        crypto.randomBytes(4).copy(d, i);\r\n      } else {\r\n\r\n        // 0 <= n <= 2139999999\r\n        // 0 <= (n % 1e7) <= 9999999\r\n        rd.push(n % 1e7);\r\n        i += 4;\r\n      }\r\n    }\r\n\r\n    i = k / 4;\r\n  } else {\r\n    throw Error(cryptoUnavailable);\r\n  }\r\n\r\n  k = rd[--i];\r\n  sd %= LOG_BASE;\r\n\r\n  // Convert trailing digits to zeros according to sd.\r\n  if (k && sd) {\r\n    n = mathpow(10, LOG_BASE - sd);\r\n    rd[i] = (k / n | 0) * n;\r\n  }\r\n\r\n  // Remove trailing words which are zero.\r\n  for (; rd[i] === 0; i--) rd.pop();\r\n\r\n  // Zero?\r\n  if (i < 0) {\r\n    e = 0;\r\n    rd = [0];\r\n  } else {\r\n    e = -1;\r\n\r\n    // Remove leading words which are zero and adjust exponent accordingly.\r\n    for (; rd[0] === 0; e -= LOG_BASE) rd.shift();\r\n\r\n    // Count the digits of the first word of rd to determine leading zeros.\r\n    for (k = 1, n = rd[0]; n >= 10; n /= 10) k++;\r\n\r\n    // Adjust the exponent for leading zeros of the first word of rd.\r\n    if (k < LOG_BASE) e -= LOG_BASE - k;\r\n  }\r\n\r\n  r.e = e;\r\n  r.d = rd;\r\n\r\n  return r;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` rounded to an integer using rounding mode `rounding`.\r\n *\r\n * To emulate `Math.round`, set rounding to 7 (ROUND_HALF_CEIL).\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction round(x) {\r\n  return finalise(x = new this(x), x.e + 1, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return\r\n *   1    if x > 0,\r\n *  -1    if x < 0,\r\n *   0    if x is 0,\r\n *  -0    if x is -0,\r\n *   NaN  otherwise\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sign(x) {\r\n  x = new this(x);\r\n  return x.d ? (x.d[0] ? x.s : 0 * x.s) : x.s || NaN;\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sine of `x`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sin(x) {\r\n  return new this(x).sin();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic sine of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction sinh(x) {\r\n  return new this(x).sinh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the square root of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sqrt(x) {\r\n  return new this(x).sqrt();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` minus `y`, rounded to `precision` significant digits\r\n * using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n * y {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sub(x, y) {\r\n  return new this(x).sub(y);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the sum of the arguments, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * Only the result is rounded, not the intermediate calculations.\r\n *\r\n * arguments {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction sum() {\r\n  var i = 0,\r\n    args = arguments,\r\n    x = new this(args[i]);\r\n\r\n  external = false;\r\n  for (; x.s && ++i < args.length;) x = x.plus(args[i]);\r\n  external = true;\r\n\r\n  return finalise(x, this.precision, this.rounding);\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the tangent of `x`, rounded to `precision` significant\r\n * digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tan(x) {\r\n  return new this(x).tan();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is the hyperbolic tangent of `x`, rounded to `precision`\r\n * significant digits using rounding mode `rounding`.\r\n *\r\n * x {number|string|bigint|Decimal} A value in radians.\r\n *\r\n */\r\nfunction tanh(x) {\r\n  return new this(x).tanh();\r\n}\r\n\r\n\r\n/*\r\n * Return a new Decimal whose value is `x` truncated to an integer.\r\n *\r\n * x {number|string|bigint|Decimal}\r\n *\r\n */\r\nfunction trunc(x) {\r\n  return finalise(x = new this(x), x.e + 1, 1);\r\n}\r\n\r\n\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toString;\r\nP[Symbol.toStringTag] = 'Decimal';\r\n\r\n// Create and configure initial Decimal constructor.\r\nexport var Decimal = P.constructor = clone(DEFAULTS);\r\n\r\n// Create the internal constants from their string values.\r\nLN10 = new Decimal(LN10);\r\nPI = new Decimal(PI);\r\n\r\nexport default Decimal;\r\n","import Decimal from 'decimal.js';\nexport var TEN = new Decimal(10);\nexport var ZERO = new Decimal(0);\nexport var NEGATIVE_ZERO = new Decimal(-0);\n","import { __spreadArray } from \"tslib\";\nimport { memoize, strategies } from '@formatjs/fast-memoize';\nexport function repeat(s, times) {\n    if (typeof s.repeat === 'function') {\n        return s.repeat(times);\n    }\n    var arr = new Array(times);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = s;\n    }\n    return arr.join('');\n}\nexport function setInternalSlot(map, pl, field, value) {\n    if (!map.get(pl)) {\n        map.set(pl, Object.create(null));\n    }\n    var slots = map.get(pl);\n    slots[field] = value;\n}\nexport function setMultiInternalSlots(map, pl, props) {\n    for (var _i = 0, _a = Object.keys(props); _i < _a.length; _i++) {\n        var k = _a[_i];\n        setInternalSlot(map, pl, k, props[k]);\n    }\n}\nexport function getInternalSlot(map, pl, field) {\n    return getMultiInternalSlots(map, pl, field)[field];\n}\nexport function getMultiInternalSlots(map, pl) {\n    var fields = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        fields[_i - 2] = arguments[_i];\n    }\n    var slots = map.get(pl);\n    if (!slots) {\n        throw new TypeError(\"\".concat(pl, \" InternalSlot has not been initialized\"));\n    }\n    return fields.reduce(function (all, f) {\n        all[f] = slots[f];\n        return all;\n    }, Object.create(null));\n}\nexport function isLiteralPart(patternPart) {\n    return patternPart.type === 'literal';\n}\n/*\n  17 ECMAScript Standard Built-in Objects:\n    Every built-in Function object, including constructors, that is not\n    identified as an anonymous function has a name property whose value\n    is a String.\n\n    Unless otherwise specified, the name property of a built-in Function\n    object, if it exists, has the attributes { [[Writable]]: false,\n    [[Enumerable]]: false, [[Configurable]]: true }.\n*/\nexport function defineProperty(target, name, _a) {\n    var value = _a.value;\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: false,\n        writable: true,\n        value: value,\n    });\n}\n/**\n * 7.3.5 CreateDataProperty\n * @param target\n * @param name\n * @param value\n */\nexport function createDataProperty(target, name, value) {\n    Object.defineProperty(target, name, {\n        configurable: true,\n        enumerable: true,\n        writable: true,\n        value: value,\n    });\n}\nexport var UNICODE_EXTENSION_SEQUENCE_REGEX = /-u(?:-[0-9a-z]{2,8})+/gi;\nexport function invariant(condition, message, Err) {\n    if (Err === void 0) { Err = Error; }\n    if (!condition) {\n        throw new Err(message);\n    }\n}\nexport var createMemoizedNumberFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.NumberFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedDateTimeFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.DateTimeFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedPluralRules = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.PluralRules).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedLocale = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.Locale).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\nexport var createMemoizedListFormat = memoize(function () {\n    var _a;\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    return new ((_a = Intl.ListFormat).bind.apply(_a, __spreadArray([void 0], args, false)))();\n}, {\n    strategy: strategies.variadic,\n});\n","import { Decimal } from 'decimal.js';\nimport { ZERO } from './constants';\nimport { invariant } from './utils';\n/**\n * https://tc39.es/ecma262/#sec-tostring\n */\nexport function ToString(o) {\n    // Only symbol is irregular...\n    if (typeof o === 'symbol') {\n        throw TypeError('Cannot convert a Symbol value to a string');\n    }\n    return String(o);\n}\n/**\n * https://tc39.es/ecma262/#sec-tonumber\n * @param val\n */\nexport function ToNumber(arg) {\n    if (typeof arg === 'number') {\n        return new Decimal(arg);\n    }\n    invariant(typeof arg !== 'bigint' && typeof arg !== 'symbol', 'BigInt and Symbol are not supported', TypeError);\n    if (arg === undefined) {\n        return new Decimal(NaN);\n    }\n    if (arg === null || arg === 0) {\n        return ZERO;\n    }\n    if (arg === true) {\n        return new Decimal(1);\n    }\n    if (typeof arg === 'string') {\n        try {\n            return new Decimal(arg);\n        }\n        catch (e) {\n            return new Decimal(NaN);\n        }\n    }\n    invariant(typeof arg === 'object', 'object expected', TypeError);\n    var primValue = ToPrimitive(arg, 'number');\n    invariant(typeof primValue !== 'object', 'object expected', TypeError);\n    return ToNumber(primValue);\n}\n/**\n * https://tc39.es/ecma262/#sec-tointeger\n * @param n\n */\nfunction ToInteger(n) {\n    var number = ToNumber(n);\n    if (number.isNaN() || number.isZero()) {\n        return ZERO;\n    }\n    if (number.isFinite()) {\n        return number;\n    }\n    var integer = number.abs().floor();\n    if (number.isNegative()) {\n        integer = integer.negated();\n    }\n    return integer;\n}\n/**\n * https://tc39.es/ecma262/#sec-timeclip\n * @param time\n */\nexport function TimeClip(time) {\n    if (!time.isFinite()) {\n        return new Decimal(NaN);\n    }\n    if (time.abs().greaterThan(8.64 * 1e15)) {\n        return new Decimal(NaN);\n    }\n    return ToInteger(time);\n}\n/**\n * https://tc39.es/ecma262/#sec-toobject\n * @param arg\n */\nexport function ToObject(arg) {\n    if (arg == null) {\n        throw new TypeError('undefined/null cannot be converted to object');\n    }\n    return Object(arg);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-samevalue\n * @param x\n * @param y\n */\nexport function SameValue(x, y) {\n    if (Object.is) {\n        return Object.is(x, y);\n    }\n    // SameValue algorithm\n    if (x === y) {\n        // Steps 1-5, 7-10\n        // Steps 6.b-6.e: +0 != -0\n        return x !== 0 || 1 / x === 1 / y;\n    }\n    // Step 6.a: NaN == NaN\n    return x !== x && y !== y;\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-arraycreate\n * @param len\n */\nexport function ArrayCreate(len) {\n    return new Array(len);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-hasownproperty\n * @param o\n * @param prop\n */\nexport function HasOwnProperty(o, prop) {\n    return Object.prototype.hasOwnProperty.call(o, prop);\n}\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#sec-type\n * @param x\n */\nexport function Type(x) {\n    if (x === null) {\n        return 'Null';\n    }\n    if (typeof x === 'undefined') {\n        return 'Undefined';\n    }\n    if (typeof x === 'function' || typeof x === 'object') {\n        return 'Object';\n    }\n    if (typeof x === 'number') {\n        return 'Number';\n    }\n    if (typeof x === 'boolean') {\n        return 'Boolean';\n    }\n    if (typeof x === 'string') {\n        return 'String';\n    }\n    if (typeof x === 'symbol') {\n        return 'Symbol';\n    }\n    if (typeof x === 'bigint') {\n        return 'BigInt';\n    }\n}\nvar MS_PER_DAY = 86400000;\n/**\n * https://www.ecma-international.org/ecma-262/11.0/index.html#eqn-modulo\n * @param x\n * @param y\n * @return k of the same sign as y\n */\nfunction mod(x, y) {\n    return x - Math.floor(x / y) * y;\n}\n/**\n * https://tc39.es/ecma262/#eqn-Day\n * @param t\n */\nexport function Day(t) {\n    return Math.floor(t / MS_PER_DAY);\n}\n/**\n * https://tc39.es/ecma262/#sec-week-day\n * @param t\n */\nexport function WeekDay(t) {\n    return mod(Day(t) + 4, 7);\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param y\n */\nexport function DayFromYear(y) {\n    return Date.UTC(y, 0) / MS_PER_DAY;\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param y\n */\nexport function TimeFromYear(y) {\n    return Date.UTC(y, 0);\n}\n/**\n * https://tc39.es/ecma262/#sec-year-number\n * @param t\n */\nexport function YearFromTime(t) {\n    return new Date(t).getUTCFullYear();\n}\nexport function DaysInYear(y) {\n    if (y % 4 !== 0) {\n        return 365;\n    }\n    if (y % 100 !== 0) {\n        return 366;\n    }\n    if (y % 400 !== 0) {\n        return 365;\n    }\n    return 366;\n}\nexport function DayWithinYear(t) {\n    return Day(t) - DayFromYear(YearFromTime(t));\n}\nexport function InLeapYear(t) {\n    return DaysInYear(YearFromTime(t)) === 365 ? 0 : 1;\n}\n/**\n * https://tc39.es/ecma262/#sec-month-number\n * @param t\n */\nexport function MonthFromTime(t) {\n    var dwy = DayWithinYear(t);\n    var leap = InLeapYear(t);\n    if (dwy >= 0 && dwy < 31) {\n        return 0;\n    }\n    if (dwy < 59 + leap) {\n        return 1;\n    }\n    if (dwy < 90 + leap) {\n        return 2;\n    }\n    if (dwy < 120 + leap) {\n        return 3;\n    }\n    if (dwy < 151 + leap) {\n        return 4;\n    }\n    if (dwy < 181 + leap) {\n        return 5;\n    }\n    if (dwy < 212 + leap) {\n        return 6;\n    }\n    if (dwy < 243 + leap) {\n        return 7;\n    }\n    if (dwy < 273 + leap) {\n        return 8;\n    }\n    if (dwy < 304 + leap) {\n        return 9;\n    }\n    if (dwy < 334 + leap) {\n        return 10;\n    }\n    if (dwy < 365 + leap) {\n        return 11;\n    }\n    throw new Error('Invalid time');\n}\nexport function DateFromTime(t) {\n    var dwy = DayWithinYear(t);\n    var mft = MonthFromTime(t);\n    var leap = InLeapYear(t);\n    if (mft === 0) {\n        return dwy + 1;\n    }\n    if (mft === 1) {\n        return dwy - 30;\n    }\n    if (mft === 2) {\n        return dwy - 58 - leap;\n    }\n    if (mft === 3) {\n        return dwy - 89 - leap;\n    }\n    if (mft === 4) {\n        return dwy - 119 - leap;\n    }\n    if (mft === 5) {\n        return dwy - 150 - leap;\n    }\n    if (mft === 6) {\n        return dwy - 180 - leap;\n    }\n    if (mft === 7) {\n        return dwy - 211 - leap;\n    }\n    if (mft === 8) {\n        return dwy - 242 - leap;\n    }\n    if (mft === 9) {\n        return dwy - 272 - leap;\n    }\n    if (mft === 10) {\n        return dwy - 303 - leap;\n    }\n    if (mft === 11) {\n        return dwy - 333 - leap;\n    }\n    throw new Error('Invalid time');\n}\nvar HOURS_PER_DAY = 24;\nvar MINUTES_PER_HOUR = 60;\nvar SECONDS_PER_MINUTE = 60;\nvar MS_PER_SECOND = 1e3;\nvar MS_PER_MINUTE = MS_PER_SECOND * SECONDS_PER_MINUTE;\nvar MS_PER_HOUR = MS_PER_MINUTE * MINUTES_PER_HOUR;\nexport function HourFromTime(t) {\n    return mod(Math.floor(t / MS_PER_HOUR), HOURS_PER_DAY);\n}\nexport function MinFromTime(t) {\n    return mod(Math.floor(t / MS_PER_MINUTE), MINUTES_PER_HOUR);\n}\nexport function SecFromTime(t) {\n    return mod(Math.floor(t / MS_PER_SECOND), SECONDS_PER_MINUTE);\n}\nfunction IsCallable(fn) {\n    return typeof fn === 'function';\n}\n/**\n * The abstract operation OrdinaryHasInstance implements\n * the default algorithm for determining if an object O\n * inherits from the instance object inheritance path\n * provided by constructor C.\n * @param C class\n * @param O object\n * @param internalSlots internalSlots\n */\nexport function OrdinaryHasInstance(C, O, internalSlots) {\n    if (!IsCallable(C)) {\n        return false;\n    }\n    if (internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction) {\n        var BC = internalSlots === null || internalSlots === void 0 ? void 0 : internalSlots.boundTargetFunction;\n        return O instanceof BC;\n    }\n    if (typeof O !== 'object') {\n        return false;\n    }\n    var P = C.prototype;\n    if (typeof P !== 'object') {\n        throw new TypeError('OrdinaryHasInstance called on an object with an invalid prototype property.');\n    }\n    return Object.prototype.isPrototypeOf.call(P, O);\n}\nexport function msFromTime(t) {\n    return mod(t, MS_PER_SECOND);\n}\nfunction OrdinaryToPrimitive(O, hint) {\n    var methodNames;\n    if (hint === 'string') {\n        methodNames = ['toString', 'valueOf'];\n    }\n    else {\n        methodNames = ['valueOf', 'toString'];\n    }\n    for (var _i = 0, methodNames_1 = methodNames; _i < methodNames_1.length; _i++) {\n        var name_1 = methodNames_1[_i];\n        var method = O[name_1];\n        if (IsCallable(method)) {\n            var result = method.call(O);\n            if (typeof result !== 'object') {\n                return result;\n            }\n        }\n    }\n    throw new TypeError('Cannot convert object to primitive value');\n}\nexport function ToPrimitive(input, preferredType) {\n    if (typeof input === 'object' && input != null) {\n        var exoticToPrim = Symbol.toPrimitive in input ? input[Symbol.toPrimitive] : undefined;\n        var hint = void 0;\n        if (exoticToPrim !== undefined) {\n            if (preferredType === undefined) {\n                hint = 'default';\n            }\n            else if (preferredType === 'string') {\n                hint = 'string';\n            }\n            else {\n                invariant(preferredType === 'number', 'preferredType must be \"string\" or \"number\"');\n                hint = 'number';\n            }\n            var result = exoticToPrim.call(input, hint);\n            if (typeof result !== 'object') {\n                return result;\n            }\n            throw new TypeError('Cannot convert exotic object to primitive.');\n        }\n        if (preferredType === undefined) {\n            preferredType = 'number';\n        }\n        return OrdinaryToPrimitive(input, preferredType);\n    }\n    return input;\n}\n","import { ToObject } from './262';\n/**\n * https://tc39.es/ecma402/#sec-coerceoptionstoobject\n * @param options\n * @returns\n */\nexport function CoerceOptionsToObject(options) {\n    if (typeof options === 'undefined') {\n        return Object.create(null);\n    }\n    return ToObject(options);\n}\n","/**\n * https://tc39.es/ecma402/#sec-defaultnumberoption\n * @param val\n * @param min\n * @param max\n * @param fallback\n */\nexport function DefaultNumberOption(inputVal, min, max, fallback) {\n    if (inputVal === undefined) {\n        // @ts-expect-error\n        return fallback;\n    }\n    var val = Number(inputVal);\n    if (isNaN(val) || val < min || val > max) {\n        throw new RangeError(\"\".concat(val, \" is outside of range [\").concat(min, \", \").concat(max, \"]\"));\n    }\n    return Math.floor(val);\n}\n","/**\n * https://tc39.es/ecma402/#sec-getnumberoption\n * @param options\n * @param property\n * @param min\n * @param max\n * @param fallback\n */\nimport { DefaultNumberOption } from './DefaultNumberOption';\nexport function GetNumberOption(options, property, minimum, maximum, fallback) {\n    var val = options[property];\n    return DefaultNumberOption(val, minimum, maximum, fallback);\n}\n","import { ToString } from './262';\n/**\n * https://tc39.es/ecma402/#sec-getoption\n * @param opts\n * @param prop\n * @param type\n * @param values\n * @param fallback\n */\nexport function GetOption(opts, prop, type, values, fallback) {\n    if (typeof opts !== 'object') {\n        throw new TypeError('Options must be an object');\n    }\n    var value = opts[prop];\n    if (value !== undefined) {\n        if (type !== 'boolean' && type !== 'string') {\n            throw new TypeError('invalid type');\n        }\n        if (type === 'boolean') {\n            value = Boolean(value);\n        }\n        if (type === 'string') {\n            value = ToString(value);\n        }\n        if (values !== undefined && !values.filter(function (val) { return val == value; }).length) {\n            throw new RangeError(\"\".concat(value, \" is not within \").concat(values.join(', ')));\n        }\n        return value;\n    }\n    return fallback;\n}\n","/**\n * https://tc39.es/ecma402/#sec-getoptionsobject\n * @param options\n * @returns\n */\nexport function GetOptionsObject(options) {\n    if (typeof options === 'undefined') {\n        return Object.create(null);\n    }\n    if (typeof options === 'object') {\n        return options;\n    }\n    throw new TypeError('Options must be an object');\n}\n","/**\n * https://tc39.es/ecma402/#sec-getstringorbooleanoption\n * @param opts\n * @param prop\n * @param values\n * @param trueValue\n * @param falsyValue\n * @param fallback\n */\nimport { ToString } from './262';\nexport function GetStringOrBooleanOption(opts, prop, values, trueValue, falsyValue, fallback) {\n    var value = opts[prop];\n    if (value === undefined) {\n        return fallback;\n    }\n    if (value === true) {\n        return trueValue;\n    }\n    var valueBoolean = Boolean(value);\n    if (valueBoolean === false) {\n        return falsyValue;\n    }\n    value = ToString(value);\n    if (value === 'true' || value === 'false') {\n        return fallback;\n    }\n    if ((values || []).indexOf(value) === -1) {\n        throw new RangeError(\"Invalid value \".concat(value));\n    }\n    return value;\n}\n","/**\n * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers\n */\nexport var SANCTIONED_UNITS = [\n    'angle-degree',\n    'area-acre',\n    'area-hectare',\n    'concentr-percent',\n    'digital-bit',\n    'digital-byte',\n    'digital-gigabit',\n    'digital-gigabyte',\n    'digital-kilobit',\n    'digital-kilobyte',\n    'digital-megabit',\n    'digital-megabyte',\n    'digital-petabyte',\n    'digital-terabit',\n    'digital-terabyte',\n    'duration-day',\n    'duration-hour',\n    'duration-millisecond',\n    'duration-minute',\n    'duration-month',\n    'duration-second',\n    'duration-week',\n    'duration-year',\n    'length-centimeter',\n    'length-foot',\n    'length-inch',\n    'length-kilometer',\n    'length-meter',\n    'length-mile-scandinavian',\n    'length-mile',\n    'length-millimeter',\n    'length-yard',\n    'mass-gram',\n    'mass-kilogram',\n    'mass-ounce',\n    'mass-pound',\n    'mass-stone',\n    'temperature-celsius',\n    'temperature-fahrenheit',\n    'volume-fluid-ounce',\n    'volume-gallon',\n    'volume-liter',\n    'volume-milliliter',\n];\n// In CLDR, the unit name always follows the form `namespace-unit` pattern.\n// For example: `digital-bit` instead of `bit`. This function removes the namespace prefix.\nexport function removeUnitNamespace(unit) {\n    return unit.slice(unit.indexOf('-') + 1);\n}\n/**\n * https://tc39.es/ecma402/#table-sanctioned-simple-unit-identifiers\n */\nexport var SIMPLE_UNITS = SANCTIONED_UNITS.map(removeUnitNamespace);\n/**\n * https://tc39.es/ecma402/#sec-issanctionedsimpleunitidentifier\n */\nexport function IsSanctionedSimpleUnitIdentifier(unitIdentifier) {\n    return SIMPLE_UNITS.indexOf(unitIdentifier) > -1;\n}\n","/**\n * https://tc39.es/ecma402/#sec-isvalidtimezonename\n * @param tz\n * @param implDetails implementation details\n */\nexport function IsValidTimeZoneName(tz, _a) {\n    var zoneNamesFromData = _a.zoneNamesFromData, uppercaseLinks = _a.uppercaseLinks;\n    var uppercasedTz = tz.toUpperCase();\n    var zoneNames = new Set();\n    var linkNames = new Set();\n    zoneNamesFromData.map(function (z) { return z.toUpperCase(); }).forEach(function (z) { return zoneNames.add(z); });\n    Object.keys(uppercaseLinks).forEach(function (linkName) {\n        linkNames.add(linkName.toUpperCase());\n        zoneNames.add(uppercaseLinks[linkName].toUpperCase());\n    });\n    return zoneNames.has(uppercasedTz) || linkNames.has(uppercasedTz);\n}\n","/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toUpperCase(str) {\n    return str.replace(/([a-z])/g, function (_, c) { return c.toUpperCase(); });\n}\nvar NOT_A_Z_REGEX = /[^A-Z]/;\n/**\n * https://tc39.es/ecma402/#sec-iswellformedcurrencycode\n */\nexport function IsWellFormedCurrencyCode(currency) {\n    currency = toUpperCase(currency);\n    if (currency.length !== 3) {\n        return false;\n    }\n    if (NOT_A_Z_REGEX.test(currency)) {\n        return false;\n    }\n    return true;\n}\n","import { IsSanctionedSimpleUnitIdentifier } from './IsSanctionedSimpleUnitIdentifier';\n/**\n * This follows https://tc39.es/ecma402/#sec-case-sensitivity-and-case-mapping\n * @param str string to convert\n */\nfunction toLowerCase(str) {\n    return str.replace(/([A-Z])/g, function (_, c) { return c.toLowerCase(); });\n}\n/**\n * https://tc39.es/ecma402/#sec-iswellformedunitidentifier\n * @param unit\n */\nexport function IsWellFormedUnitIdentifier(unit) {\n    unit = toLowerCase(unit);\n    if (IsSanctionedSimpleUnitIdentifier(unit)) {\n        return true;\n    }\n    var units = unit.split('-per-');\n    if (units.length !== 2) {\n        return false;\n    }\n    var numerator = units[0], denominator = units[1];\n    if (!IsSanctionedSimpleUnitIdentifier(numerator) ||\n        !IsSanctionedSimpleUnitIdentifier(denominator)) {\n        return false;\n    }\n    return true;\n}\n","import { invariant } from '../utils';\nexport function ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode) {\n    if (x.eq(r1))\n        return r1;\n    invariant(r1.lessThan(x) && x.lessThan(r2), \"x should be between r1 and r2 but x=\".concat(x, \", r1=\").concat(r1, \", r2=\").concat(r2));\n    if (unsignedRoundingMode === 'zero') {\n        return r1;\n    }\n    if (unsignedRoundingMode === 'infinity') {\n        return r2;\n    }\n    var d1 = x.minus(r1);\n    var d2 = r2.minus(x);\n    if (d1.lessThan(d2)) {\n        return r1;\n    }\n    if (d2.lessThan(d1)) {\n        return r2;\n    }\n    invariant(d1.eq(d2), 'd1 should be equal to d2');\n    if (unsignedRoundingMode === 'half-zero') {\n        return r1;\n    }\n    if (unsignedRoundingMode === 'half-infinity') {\n        return r2;\n    }\n    invariant(unsignedRoundingMode === 'half-even', 'unsignedRoundingMode should be half-even');\n    var cardinality = r1.div(r2.minus(r1)).mod(2);\n    if (cardinality.isZero()) {\n        return r1;\n    }\n    return r2;\n}\n","var PART_TYPES_TO_COLLAPSE = new Set([\n    'unit',\n    'exponentMinusSign',\n    'minusSign',\n    'plusSign',\n    'percentSign',\n    'exponentSeparator',\n    'percent',\n    'percentSign',\n    'currency',\n    'literal',\n]);\n/**\n * https://tc39.es/ecma402/#sec-collapsenumberrange\n * LDML: https://unicode-org.github.io/cldr/ldml/tr35-numbers.html#collapsing-number-ranges\n */\nexport function CollapseNumberRange(numberFormat, result, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var internalSlots = getInternalSlots(numberFormat);\n    var symbols = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem];\n    var rangeSignRegex = new RegExp(\"s?[\".concat(symbols.rangeSign, \"]s?\"));\n    var rangeSignIndex = result.findIndex(function (r) { return r.type === 'literal' && rangeSignRegex.test(r.value); });\n    var prefixSignParts = [];\n    for (var i = rangeSignIndex - 1; i >= 0; i--) {\n        if (!PART_TYPES_TO_COLLAPSE.has(result[i].type)) {\n            break;\n        }\n        prefixSignParts.unshift(result[i]);\n    }\n    // Don't collapse if it's a single code point\n    if (Array.from(prefixSignParts.map(function (p) { return p.value; }).join('')).length > 1) {\n        var newResult = Array.from(result);\n        newResult.splice(rangeSignIndex - prefixSignParts.length, prefixSignParts.length);\n        return newResult;\n    }\n    var suffixSignParts = [];\n    for (var i = rangeSignIndex + 1; i < result.length; i++) {\n        if (!PART_TYPES_TO_COLLAPSE.has(result[i].type)) {\n            break;\n        }\n        suffixSignParts.push(result[i]);\n    }\n    // Don't collapse if it's a single code point\n    if (Array.from(suffixSignParts.map(function (p) { return p.value; }).join('')).length > 1) {\n        var newResult = Array.from(result);\n        newResult.splice(rangeSignIndex + 1, suffixSignParts.length);\n        return newResult;\n    }\n    return result;\n}\n","import Decimal from 'decimal.js';\nimport { invariant } from '../utils';\nDecimal.set({\n    toExpPos: 100,\n});\n/**\n * The abstract operation ComputeExponentForMagnitude computes an exponent by which to scale a\n * number of the given magnitude (power of ten of the most significant digit) according to the\n * locale and the desired notation (scientific, engineering, or compact).\n */\nexport function ComputeExponentForMagnitude(internalSlots, magnitude) {\n    var notation = internalSlots.notation, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    switch (notation) {\n        case 'standard':\n            return 0;\n        case 'scientific':\n            return magnitude.toNumber();\n        case 'engineering':\n            var thousands = magnitude.div(3).floor();\n            return thousands.times(3).toNumber();\n        default: {\n            invariant(notation === 'compact', 'Invalid notation');\n            // Let exponent be an implementation- and locale-dependent (ILD) integer by which to scale a\n            // number of the given magnitude in compact notation for the current locale.\n            var compactDisplay = internalSlots.compactDisplay, style = internalSlots.style, currencyDisplay = internalSlots.currencyDisplay;\n            var thresholdMap = void 0;\n            if (style === 'currency' && currencyDisplay !== 'name') {\n                var currency = dataLocaleData.numbers.currency[numberingSystem] ||\n                    dataLocaleData.numbers.currency[dataLocaleData.numbers.nu[0]];\n                thresholdMap = currency.short;\n            }\n            else {\n                var decimal = dataLocaleData.numbers.decimal[numberingSystem] ||\n                    dataLocaleData.numbers.decimal[dataLocaleData.numbers.nu[0]];\n                thresholdMap = compactDisplay === 'long' ? decimal.long : decimal.short;\n            }\n            if (!thresholdMap) {\n                return 0;\n            }\n            var num = Decimal.pow(10, magnitude).toString();\n            var thresholds = Object.keys(thresholdMap); // TODO: this can be pre-processed\n            if (num < thresholds[0]) {\n                return 0;\n            }\n            if (num > thresholds[thresholds.length - 1]) {\n                return thresholds[thresholds.length - 1].length - 1;\n            }\n            var i = thresholds.indexOf(num);\n            if (i === -1) {\n                return 0;\n            }\n            // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n            // Special handling if the pattern is precisely `0`.\n            var magnitudeKey = thresholds[i];\n            // TODO: do we need to handle plural here?\n            var compactPattern = thresholdMap[magnitudeKey].other;\n            if (compactPattern === '0') {\n                return 0;\n            }\n            // Example: in zh-TW, `10000000` maps to `0000萬`. So we need to return 8 - 4 = 4 here.\n            return (magnitudeKey.length -\n                thresholdMap[magnitudeKey].other.match(/0+/)[0].length);\n        }\n    }\n}\n","var negativeMapping = {\n    ceil: 'zero',\n    floor: 'infinity',\n    expand: 'infinity',\n    trunc: 'zero',\n    halfCeil: 'half-zero',\n    halfFloor: 'half-infinity',\n    halfExpand: 'half-infinity',\n    halfTrunc: 'half-zero',\n    halfEven: 'half-even',\n};\nvar positiveMapping = {\n    ceil: 'infinity',\n    floor: 'zero',\n    expand: 'infinity',\n    trunc: 'zero',\n    halfCeil: 'half-infinity',\n    halfFloor: 'half-zero',\n    halfExpand: 'half-infinity',\n    halfTrunc: 'half-zero',\n    halfEven: 'half-even',\n};\nexport function GetUnsignedRoundingMode(roundingMode, isNegative) {\n    if (isNegative) {\n        return negativeMapping[roundingMode];\n    }\n    return positiveMapping[roundingMode];\n}\n","import Decimal from 'decimal.js';\nimport { repeat } from '../utils';\nimport { ApplyUnsignedRoundingMode } from './ApplyUnsignedRoundingMode';\n//IMPL: Setting Decimal configuration\nDecimal.set({\n    toExpPos: 100,\n});\n//IMPL: Helper function to calculate raw fixed value\nfunction ToRawFixedFn(n, f) {\n    return n.times(Decimal.pow(10, -f));\n}\n//IMPL: Helper function to find n1 and r1\nfunction findN1R1(x, f, roundingIncrement) {\n    var nx = x.times(Decimal.pow(10, f)).floor();\n    var n1 = nx.div(roundingIncrement).floor().times(roundingIncrement);\n    var r1 = ToRawFixedFn(n1, f);\n    return {\n        n1: n1,\n        r1: r1,\n    };\n}\n//IMPL: Helper function to find n2 and r2\nfunction findN2R2(x, f, roundingIncrement) {\n    var nx = x.times(Decimal.pow(10, f)).ceil();\n    var n2 = nx.div(roundingIncrement).ceil().times(roundingIncrement);\n    var r2 = ToRawFixedFn(n2, f);\n    return {\n        n2: n2,\n        r2: r2,\n    };\n}\n/**\n * https://tc39.es/ecma402/#sec-torawfixed\n * @param x a finite non-negative Number or BigInt\n * @param minFraction an integer between 0 and 20\n * @param maxFraction an integer between 0 and 20\n */\nexport function ToRawFixed(x, minFraction, maxFraction, roundingIncrement, unsignedRoundingMode) {\n    // 1. Let f be maxFraction.\n    var f = maxFraction;\n    // 2. Let n1 and r1 be the results of performing the maximized rounding of x to f fraction digits.\n    var _a = findN1R1(x, f, roundingIncrement), n1 = _a.n1, r1 = _a.r1;\n    // 3. Let n2 and r2 be the results of performing the minimized rounding of x to f fraction digits.\n    var _b = findN2R2(x, f, roundingIncrement), n2 = _b.n2, r2 = _b.r2;\n    // 4. Let r be ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode).\n    var r = ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode);\n    var n, xFinal;\n    var m;\n    // 5. If r is equal to r1, then\n    if (r.eq(r1)) {\n        // a. Let n be n1.\n        n = n1;\n        // b. Let xFinal be r1.\n        xFinal = r1;\n    }\n    else {\n        // 6. Else,\n        // a. Let n be n2.\n        n = n2;\n        // b. Let xFinal be r2.\n        xFinal = r2;\n    }\n    // 7. If n is 0, let m be \"0\".\n    if (n.isZero()) {\n        m = '0';\n    }\n    else {\n        // 8. Else, let m be the String representation of n.\n        m = n.toString();\n    }\n    var int;\n    // 9. If f is not 0, then\n    if (f !== 0) {\n        // a. Let k be the length of m.\n        var k = m.length;\n        // b. If k < f, then\n        if (k <= f) {\n            // i. Let z be the String value consisting of f + 1 - k occurrences of the character \"0\".\n            var z = repeat('0', f - k + 1);\n            // ii. Set m to the string-concatenation of z and m.\n            m = z + m;\n            // iii. Set k to f + 1.\n            k = f + 1;\n        }\n        // c. Let a be the substring of m from 0 to k - f.\n        var a = m.slice(0, k - f);\n        // d. Let b be the substring of m from k - f to k.\n        var b = m.slice(m.length - f);\n        // e. Set m to the string-concatenation of a, \".\", and b.\n        m = a + '.' + b;\n        // f. Let int be the length of a.\n        int = a.length;\n    }\n    else {\n        // 10. Else, let int be the length of m.\n        int = m.length;\n    }\n    // 11. Let cut be maxFraction - minFraction.\n    var cut = maxFraction - minFraction;\n    // 12. Repeat, while cut > 0 and the last character of m is \"0\",\n    while (cut > 0 && m[m.length - 1] === '0') {\n        // a. Remove the last character from m.\n        m = m.slice(0, m.length - 1);\n        // b. Decrease cut by 1.\n        cut--;\n    }\n    // 13. If the last character of m is \".\", then\n    if (m[m.length - 1] === '\\u002e') {\n        // a. Remove the last character from m.\n        m = m.slice(0, m.length - 1);\n    }\n    // 14. Return the Record { [[FormattedString]]: m, [[RoundedNumber]]: xFinal, [[IntegerDigitsCount]]: int, [[RoundingMagnitude]]: -f }.\n    return {\n        formattedString: m,\n        roundedNumber: xFinal,\n        integerDigitsCount: int,\n        roundingMagnitude: -f,\n    };\n}\n","import Decimal from 'decimal.js';\nimport { ZERO } from '../constants';\nimport { invariant, repeat } from '../utils';\nimport { ApplyUnsignedRoundingMode } from './ApplyUnsignedRoundingMode';\n//IMPL: Helper function to find n1, e1, and r1\nfunction findN1E1R1(x, p) {\n    var maxN1 = Decimal.pow(10, p);\n    var minN1 = Decimal.pow(10, p - 1);\n    var maxE1 = x.div(minN1).log(10).plus(p).minus(1).ceil();\n    var currentE1 = maxE1;\n    while (true) {\n        var currentN1 = x.div(Decimal.pow(10, currentE1.minus(p).plus(1))).floor();\n        if (currentN1.lessThan(maxN1) && currentN1.greaterThanOrEqualTo(minN1)) {\n            var currentR1 = currentN1.times(Decimal.pow(10, currentE1.minus(p).plus(1)));\n            if (currentR1.lessThanOrEqualTo(x)) {\n                return {\n                    n1: currentN1,\n                    e1: currentE1,\n                    r1: currentR1,\n                };\n            }\n        }\n        currentE1 = currentE1.minus(1);\n    }\n}\n//IMPL: Helper function to find n2, e2, and r2\nfunction findN2E2R2(x, p) {\n    var maxN2 = Decimal.pow(10, p);\n    var minN2 = Decimal.pow(10, p - 1);\n    var minE2 = x.div(maxN2).log(10).plus(p).minus(1).floor();\n    var currentE2 = minE2;\n    while (true) {\n        var currentN2 = x.div(Decimal.pow(10, currentE2.minus(p).plus(1))).ceil();\n        if (currentN2.lessThan(maxN2) && currentN2.greaterThanOrEqualTo(minN2)) {\n            var currentR2 = currentN2.times(Decimal.pow(10, currentE2.minus(p).plus(1)));\n            if (currentR2.greaterThanOrEqualTo(x)) {\n                return {\n                    n2: currentN2,\n                    e2: currentE2,\n                    r2: currentR2,\n                };\n            }\n        }\n        currentE2 = currentE2.plus(1);\n    }\n}\n/**\n * https://tc39.es/ecma402/#sec-torawprecision\n * @param x a finite non-negative Number or BigInt\n * @param minPrecision an integer between 1 and 21\n * @param maxPrecision an integer between 1 and 21\n */\nexport function ToRawPrecision(x, minPrecision, maxPrecision, unsignedRoundingMode) {\n    // 1. Let p be maxPrecision.\n    var p = maxPrecision;\n    var m;\n    var e;\n    var xFinal;\n    // 2. If x = 0, then\n    if (x.isZero()) {\n        // a. Let m be the String value consisting of p occurrences of the character \"0\".\n        m = repeat('0', p);\n        // b. Let e be 0.\n        e = 0;\n        // c. Let xFinal be 0.\n        xFinal = ZERO;\n    }\n    else {\n        // 3. Else,\n        // a. Let {n1, e1, r1} be the result of findN1E1R1(x, p).\n        var _a = findN1E1R1(x, p), n1 = _a.n1, e1 = _a.e1, r1 = _a.r1;\n        // b. Let {n2, e2, r2} be the result of findN2E2R2(x, p).\n        var _b = findN2E2R2(x, p), n2 = _b.n2, e2 = _b.e2, r2 = _b.r2;\n        // c. Let r be ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode).\n        var r = ApplyUnsignedRoundingMode(x, r1, r2, unsignedRoundingMode);\n        var n \n        // d. If r = r1, then\n        = void 0;\n        // d. If r = r1, then\n        if (r.eq(r1)) {\n            // i. Let n be n1.\n            n = n1;\n            // ii. Let e be e1.\n            e = e1.toNumber();\n            // iii. Let xFinal be r1.\n            xFinal = r1;\n        }\n        else {\n            // e. Else,\n            // i. Let n be n2.\n            n = n2;\n            // ii. Let e be e2.\n            e = e2.toNumber();\n            // iii. Let xFinal be r2.\n            xFinal = r2;\n        }\n        // f. Let m be the String representation of n.\n        m = n.toString();\n    }\n    var int;\n    // 4. If e ≥ p - 1, then\n    if (e >= p - 1) {\n        // a. Let m be the string-concatenation of m and p - 1 - e occurrences of the character \"0\".\n        m = m + repeat('0', e - p + 1);\n        // b. Let int be e + 1.\n        int = e + 1;\n    }\n    else if (e >= 0) {\n        // 5. Else if e ≥ 0, then\n        // a. Let m be the string-concatenation of the first e + 1 characters of m, \".\", and the remaining p - (e + 1) characters of m.\n        m = m.slice(0, e + 1) + '.' + m.slice(m.length - (p - (e + 1)));\n        // b. Let int be e + 1.\n        int = e + 1;\n    }\n    else {\n        // 6. Else,\n        // a. Assert: e < 0.\n        invariant(e < 0, 'e should be less than 0');\n        // b. Let m be the string-concatenation of \"0.\", -e - 1 occurrences of the character \"0\", and m.\n        m = '0.' + repeat('0', -e - 1) + m;\n        // c. Let int be 1.\n        int = 1;\n    }\n    // 7. If m contains \".\", and maxPrecision > minPrecision, then\n    if (m.includes('.') && maxPrecision > minPrecision) {\n        // a. Let cut be maxPrecision - minPrecision.\n        var cut = maxPrecision - minPrecision;\n        // b. Repeat, while cut > 0 and the last character of m is \"0\",\n        while (cut > 0 && m[m.length - 1] === '0') {\n            // i. Remove the last character from m.\n            m = m.slice(0, m.length - 1);\n            // ii. Decrease cut by 1.\n            cut--;\n        }\n        // c. If the last character of m is \".\", then\n        if (m[m.length - 1] === '.') {\n            // i. Remove the last character from m.\n            m = m.slice(0, m.length - 1);\n        }\n    }\n    // 8. Return the Record { [[FormattedString]]: m, [[RoundedNumber]]: xFinal, [[IntegerDigitsCount]]: int, [[RoundingMagnitude]]: e }.\n    return {\n        formattedString: m,\n        roundedNumber: xFinal,\n        integerDigitsCount: int,\n        roundingMagnitude: e,\n    };\n}\n","import { NEGATIVE_ZERO, ZERO } from '../constants';\nimport { invariant, repeat } from '../utils';\nimport { GetUnsignedRoundingMode } from './GetUnsignedRoundingMode';\nimport { ToRawFixed } from './ToRawFixed';\nimport { ToRawPrecision } from './ToRawPrecision';\n/**\n * https://tc39.es/ecma402/#sec-formatnumberstring\n */\nexport function FormatNumericToString(intlObject, _x) {\n    var x = _x;\n    var sign;\n    // -0\n    if (x.isZero() && x.isNegative()) {\n        sign = 'negative';\n        x = ZERO;\n    }\n    else {\n        invariant(x.isFinite(), 'NumberFormatDigitInternalSlots value is not finite');\n        if (x.lessThan(0)) {\n            sign = 'negative';\n        }\n        else {\n            sign = 'positive';\n        }\n        if (sign === 'negative') {\n            x = x.negated();\n        }\n    }\n    var result;\n    var roundingType = intlObject.roundingType;\n    var unsignedRoundingMode = GetUnsignedRoundingMode(intlObject.roundingMode, sign === 'negative');\n    switch (roundingType) {\n        case 'significantDigits':\n            result = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits, unsignedRoundingMode);\n            break;\n        case 'fractionDigits':\n            result = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits, intlObject.roundingIncrement, unsignedRoundingMode);\n            break;\n        default:\n            var sResult = ToRawPrecision(x, intlObject.minimumSignificantDigits, intlObject.maximumSignificantDigits, unsignedRoundingMode);\n            var fResult = ToRawFixed(x, intlObject.minimumFractionDigits, intlObject.maximumFractionDigits, intlObject.roundingIncrement, unsignedRoundingMode);\n            if (intlObject.roundingType === 'morePrecision') {\n                if (sResult.roundingMagnitude <= fResult.roundingMagnitude) {\n                    result = sResult;\n                }\n                else {\n                    result = fResult;\n                }\n            }\n            else {\n                invariant(intlObject.roundingType === 'lessPrecision', 'Invalid roundingType');\n                if (sResult.roundingMagnitude <= fResult.roundingMagnitude) {\n                    result = fResult;\n                }\n                else {\n                    result = sResult;\n                }\n            }\n            break;\n    }\n    x = result.roundedNumber;\n    var string = result.formattedString;\n    if (intlObject.trailingZeroDisplay === 'stripIfInteger' && x.isInteger()) {\n        var i = string.indexOf('.');\n        if (i > -1) {\n            string = string.slice(0, i);\n        }\n    }\n    var int = result.integerDigitsCount;\n    var minInteger = intlObject.minimumIntegerDigits;\n    if (int < minInteger) {\n        var forwardZeros = repeat('0', minInteger - int);\n        string = forwardZeros + string;\n    }\n    if (sign === 'negative') {\n        if (x.isZero()) {\n            x = NEGATIVE_ZERO;\n        }\n        else {\n            x = x.negated();\n        }\n    }\n    return { roundedNumber: x, formattedString: string };\n}\n","import Decimal from 'decimal.js';\nimport { ComputeExponentForMagnitude } from './ComputeExponentForMagnitude';\nimport { FormatNumericToString } from './FormatNumericToString';\n/**\n * The abstract operation ComputeExponent computes an exponent (power of ten) by which to scale x\n * according to the number formatting settings. It handles cases such as 999 rounding up to 1000,\n * requiring a different exponent.\n *\n * NOT IN SPEC: it returns [exponent, magnitude].\n */\nexport function ComputeExponent(internalSlots, x) {\n    if (x.isZero()) {\n        return [0, 0];\n    }\n    if (x.isNegative()) {\n        x = x.negated();\n    }\n    var magnitude = x.log(10).floor();\n    var exponent = ComputeExponentForMagnitude(internalSlots, magnitude);\n    // Preserve more precision by doing multiplication when exponent is negative.\n    x = x.times(Decimal.pow(10, -exponent));\n    var formatNumberResult = FormatNumericToString(internalSlots, x);\n    if (formatNumberResult.roundedNumber.isZero()) {\n        return [exponent, magnitude.toNumber()];\n    }\n    var newMagnitude = formatNumberResult.roundedNumber.log(10).floor();\n    if (newMagnitude.eq(magnitude.minus(exponent))) {\n        return [exponent, magnitude.toNumber()];\n    }\n    return [\n        ComputeExponentForMagnitude(internalSlots, magnitude.plus(1)),\n        magnitude.plus(1).toNumber(),\n    ];\n}\n","import { HasOwnProperty } from '../262';\n/**\n * https://tc39.es/ecma402/#sec-currencydigits\n */\nexport function CurrencyDigits(c, _a) {\n    var currencyDigitsData = _a.currencyDigitsData;\n    return HasOwnProperty(currencyDigitsData, c)\n        ? currencyDigitsData[c]\n        : 2;\n}\n","// @generated from regex-gen.ts\nexport var S_UNICODE_REGEX = /[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20BF\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2426\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFB\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E3\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC1\\uFDFC\\uFDFD\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDE8\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEE0-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF73\\uDF80-\\uDFD8\\uDFE0-\\uDFEB]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0\\uDCB1\\uDD00-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6\\uDF00-\\uDF92\\uDF94-\\uDFCA]/;\n","export var digitMapping = {\n    \"adlm\": [\n        \"𞥐\",\n        \"𞥑\",\n        \"𞥒\",\n        \"𞥓\",\n        \"𞥔\",\n        \"𞥕\",\n        \"𞥖\",\n        \"𞥗\",\n        \"𞥘\",\n        \"𞥙\"\n    ],\n    \"ahom\": [\n        \"𑜰\",\n        \"𑜱\",\n        \"𑜲\",\n        \"𑜳\",\n        \"𑜴\",\n        \"𑜵\",\n        \"𑜶\",\n        \"𑜷\",\n        \"𑜸\",\n        \"𑜹\"\n    ],\n    \"arab\": [\n        \"٠\",\n        \"١\",\n        \"٢\",\n        \"٣\",\n        \"٤\",\n        \"٥\",\n        \"٦\",\n        \"٧\",\n        \"٨\",\n        \"٩\"\n    ],\n    \"arabext\": [\n        \"۰\",\n        \"۱\",\n        \"۲\",\n        \"۳\",\n        \"۴\",\n        \"۵\",\n        \"۶\",\n        \"۷\",\n        \"۸\",\n        \"۹\"\n    ],\n    \"bali\": [\n        \"᭐\",\n        \"᭑\",\n        \"᭒\",\n        \"᭓\",\n        \"᭔\",\n        \"᭕\",\n        \"᭖\",\n        \"᭗\",\n        \"᭘\",\n        \"᭙\"\n    ],\n    \"beng\": [\n        \"০\",\n        \"১\",\n        \"২\",\n        \"৩\",\n        \"৪\",\n        \"৫\",\n        \"৬\",\n        \"৭\",\n        \"৮\",\n        \"৯\"\n    ],\n    \"bhks\": [\n        \"𑱐\",\n        \"𑱑\",\n        \"𑱒\",\n        \"𑱓\",\n        \"𑱔\",\n        \"𑱕\",\n        \"𑱖\",\n        \"𑱗\",\n        \"𑱘\",\n        \"𑱙\"\n    ],\n    \"brah\": [\n        \"𑁦\",\n        \"𑁧\",\n        \"𑁨\",\n        \"𑁩\",\n        \"𑁪\",\n        \"𑁫\",\n        \"𑁬\",\n        \"𑁭\",\n        \"𑁮\",\n        \"𑁯\"\n    ],\n    \"cakm\": [\n        \"𑄶\",\n        \"𑄷\",\n        \"𑄸\",\n        \"𑄹\",\n        \"𑄺\",\n        \"𑄻\",\n        \"𑄼\",\n        \"𑄽\",\n        \"𑄾\",\n        \"𑄿\"\n    ],\n    \"cham\": [\n        \"꩐\",\n        \"꩑\",\n        \"꩒\",\n        \"꩓\",\n        \"꩔\",\n        \"꩕\",\n        \"꩖\",\n        \"꩗\",\n        \"꩘\",\n        \"꩙\"\n    ],\n    \"deva\": [\n        \"०\",\n        \"१\",\n        \"२\",\n        \"३\",\n        \"४\",\n        \"५\",\n        \"६\",\n        \"७\",\n        \"८\",\n        \"९\"\n    ],\n    \"diak\": [\n        \"𑥐\",\n        \"𑥑\",\n        \"𑥒\",\n        \"𑥓\",\n        \"𑥔\",\n        \"𑥕\",\n        \"𑥖\",\n        \"𑥗\",\n        \"𑥘\",\n        \"𑥙\"\n    ],\n    \"fullwide\": [\n        \"０\",\n        \"１\",\n        \"２\",\n        \"３\",\n        \"４\",\n        \"５\",\n        \"６\",\n        \"７\",\n        \"８\",\n        \"９\"\n    ],\n    \"gong\": [\n        \"𑶠\",\n        \"𑶡\",\n        \"𑶢\",\n        \"𑶣\",\n        \"𑶤\",\n        \"𑶥\",\n        \"𑶦\",\n        \"𑶧\",\n        \"𑶨\",\n        \"𑶩\"\n    ],\n    \"gonm\": [\n        \"𑵐\",\n        \"𑵑\",\n        \"𑵒\",\n        \"𑵓\",\n        \"𑵔\",\n        \"𑵕\",\n        \"𑵖\",\n        \"𑵗\",\n        \"𑵘\",\n        \"𑵙\"\n    ],\n    \"gujr\": [\n        \"૦\",\n        \"૧\",\n        \"૨\",\n        \"૩\",\n        \"૪\",\n        \"૫\",\n        \"૬\",\n        \"૭\",\n        \"૮\",\n        \"૯\"\n    ],\n    \"guru\": [\n        \"੦\",\n        \"੧\",\n        \"੨\",\n        \"੩\",\n        \"੪\",\n        \"੫\",\n        \"੬\",\n        \"੭\",\n        \"੮\",\n        \"੯\"\n    ],\n    \"hanidec\": [\n        \"〇\",\n        \"一\",\n        \"二\",\n        \"三\",\n        \"四\",\n        \"五\",\n        \"六\",\n        \"七\",\n        \"八\",\n        \"九\"\n    ],\n    \"hmng\": [\n        \"𖭐\",\n        \"𖭑\",\n        \"𖭒\",\n        \"𖭓\",\n        \"𖭔\",\n        \"𖭕\",\n        \"𖭖\",\n        \"𖭗\",\n        \"𖭘\",\n        \"𖭙\"\n    ],\n    \"hmnp\": [\n        \"𞅀\",\n        \"𞅁\",\n        \"𞅂\",\n        \"𞅃\",\n        \"𞅄\",\n        \"𞅅\",\n        \"𞅆\",\n        \"𞅇\",\n        \"𞅈\",\n        \"𞅉\"\n    ],\n    \"java\": [\n        \"꧐\",\n        \"꧑\",\n        \"꧒\",\n        \"꧓\",\n        \"꧔\",\n        \"꧕\",\n        \"꧖\",\n        \"꧗\",\n        \"꧘\",\n        \"꧙\"\n    ],\n    \"kali\": [\n        \"꤀\",\n        \"꤁\",\n        \"꤂\",\n        \"꤃\",\n        \"꤄\",\n        \"꤅\",\n        \"꤆\",\n        \"꤇\",\n        \"꤈\",\n        \"꤉\"\n    ],\n    \"khmr\": [\n        \"០\",\n        \"១\",\n        \"២\",\n        \"៣\",\n        \"៤\",\n        \"៥\",\n        \"៦\",\n        \"៧\",\n        \"៨\",\n        \"៩\"\n    ],\n    \"knda\": [\n        \"೦\",\n        \"೧\",\n        \"೨\",\n        \"೩\",\n        \"೪\",\n        \"೫\",\n        \"೬\",\n        \"೭\",\n        \"೮\",\n        \"೯\"\n    ],\n    \"lana\": [\n        \"᪀\",\n        \"᪁\",\n        \"᪂\",\n        \"᪃\",\n        \"᪄\",\n        \"᪅\",\n        \"᪆\",\n        \"᪇\",\n        \"᪈\",\n        \"᪉\"\n    ],\n    \"lanatham\": [\n        \"᪐\",\n        \"᪑\",\n        \"᪒\",\n        \"᪓\",\n        \"᪔\",\n        \"᪕\",\n        \"᪖\",\n        \"᪗\",\n        \"᪘\",\n        \"᪙\"\n    ],\n    \"laoo\": [\n        \"໐\",\n        \"໑\",\n        \"໒\",\n        \"໓\",\n        \"໔\",\n        \"໕\",\n        \"໖\",\n        \"໗\",\n        \"໘\",\n        \"໙\"\n    ],\n    \"lepc\": [\n        \"᪐\",\n        \"᪑\",\n        \"᪒\",\n        \"᪓\",\n        \"᪔\",\n        \"᪕\",\n        \"᪖\",\n        \"᪗\",\n        \"᪘\",\n        \"᪙\"\n    ],\n    \"limb\": [\n        \"᥆\",\n        \"᥇\",\n        \"᥈\",\n        \"᥉\",\n        \"᥊\",\n        \"᥋\",\n        \"᥌\",\n        \"᥍\",\n        \"᥎\",\n        \"᥏\"\n    ],\n    \"mathbold\": [\n        \"𝟎\",\n        \"𝟏\",\n        \"𝟐\",\n        \"𝟑\",\n        \"𝟒\",\n        \"𝟓\",\n        \"𝟔\",\n        \"𝟕\",\n        \"𝟖\",\n        \"𝟗\"\n    ],\n    \"mathdbl\": [\n        \"𝟘\",\n        \"𝟙\",\n        \"𝟚\",\n        \"𝟛\",\n        \"𝟜\",\n        \"𝟝\",\n        \"𝟞\",\n        \"𝟟\",\n        \"𝟠\",\n        \"𝟡\"\n    ],\n    \"mathmono\": [\n        \"𝟶\",\n        \"𝟷\",\n        \"𝟸\",\n        \"𝟹\",\n        \"𝟺\",\n        \"𝟻\",\n        \"𝟼\",\n        \"𝟽\",\n        \"𝟾\",\n        \"𝟿\"\n    ],\n    \"mathsanb\": [\n        \"𝟬\",\n        \"𝟭\",\n        \"𝟮\",\n        \"𝟯\",\n        \"𝟰\",\n        \"𝟱\",\n        \"𝟲\",\n        \"𝟳\",\n        \"𝟴\",\n        \"𝟵\"\n    ],\n    \"mathsans\": [\n        \"𝟢\",\n        \"𝟣\",\n        \"𝟤\",\n        \"𝟥\",\n        \"𝟦\",\n        \"𝟧\",\n        \"𝟨\",\n        \"𝟩\",\n        \"𝟪\",\n        \"𝟫\"\n    ],\n    \"mlym\": [\n        \"൦\",\n        \"൧\",\n        \"൨\",\n        \"൩\",\n        \"൪\",\n        \"൫\",\n        \"൬\",\n        \"൭\",\n        \"൮\",\n        \"൯\"\n    ],\n    \"modi\": [\n        \"𑙐\",\n        \"𑙑\",\n        \"𑙒\",\n        \"𑙓\",\n        \"𑙔\",\n        \"𑙕\",\n        \"𑙖\",\n        \"𑙗\",\n        \"𑙘\",\n        \"𑙙\"\n    ],\n    \"mong\": [\n        \"᠐\",\n        \"᠑\",\n        \"᠒\",\n        \"᠓\",\n        \"᠔\",\n        \"᠕\",\n        \"᠖\",\n        \"᠗\",\n        \"᠘\",\n        \"᠙\"\n    ],\n    \"mroo\": [\n        \"𖩠\",\n        \"𖩡\",\n        \"𖩢\",\n        \"𖩣\",\n        \"𖩤\",\n        \"𖩥\",\n        \"𖩦\",\n        \"𖩧\",\n        \"𖩨\",\n        \"𖩩\"\n    ],\n    \"mtei\": [\n        \"꯰\",\n        \"꯱\",\n        \"꯲\",\n        \"꯳\",\n        \"꯴\",\n        \"꯵\",\n        \"꯶\",\n        \"꯷\",\n        \"꯸\",\n        \"꯹\"\n    ],\n    \"mymr\": [\n        \"၀\",\n        \"၁\",\n        \"၂\",\n        \"၃\",\n        \"၄\",\n        \"၅\",\n        \"၆\",\n        \"၇\",\n        \"၈\",\n        \"၉\"\n    ],\n    \"mymrshan\": [\n        \"႐\",\n        \"႑\",\n        \"႒\",\n        \"႓\",\n        \"႔\",\n        \"႕\",\n        \"႖\",\n        \"႗\",\n        \"႘\",\n        \"႙\"\n    ],\n    \"mymrtlng\": [\n        \"꧰\",\n        \"꧱\",\n        \"꧲\",\n        \"꧳\",\n        \"꧴\",\n        \"꧵\",\n        \"꧶\",\n        \"꧷\",\n        \"꧸\",\n        \"꧹\"\n    ],\n    \"newa\": [\n        \"𑑐\",\n        \"𑑑\",\n        \"𑑒\",\n        \"𑑓\",\n        \"𑑔\",\n        \"𑑕\",\n        \"𑑖\",\n        \"𑑗\",\n        \"𑑘\",\n        \"𑑙\"\n    ],\n    \"nkoo\": [\n        \"߀\",\n        \"߁\",\n        \"߂\",\n        \"߃\",\n        \"߄\",\n        \"߅\",\n        \"߆\",\n        \"߇\",\n        \"߈\",\n        \"߉\"\n    ],\n    \"olck\": [\n        \"᱐\",\n        \"᱑\",\n        \"᱒\",\n        \"᱓\",\n        \"᱔\",\n        \"᱕\",\n        \"᱖\",\n        \"᱗\",\n        \"᱘\",\n        \"᱙\"\n    ],\n    \"orya\": [\n        \"୦\",\n        \"୧\",\n        \"୨\",\n        \"୩\",\n        \"୪\",\n        \"୫\",\n        \"୬\",\n        \"୭\",\n        \"୮\",\n        \"୯\"\n    ],\n    \"osma\": [\n        \"𐒠\",\n        \"𐒡\",\n        \"𐒢\",\n        \"𐒣\",\n        \"𐒤\",\n        \"𐒥\",\n        \"𐒦\",\n        \"𐒧\",\n        \"𐒨\",\n        \"𐒩\"\n    ],\n    \"rohg\": [\n        \"𐴰\",\n        \"𐴱\",\n        \"𐴲\",\n        \"𐴳\",\n        \"𐴴\",\n        \"𐴵\",\n        \"𐴶\",\n        \"𐴷\",\n        \"𐴸\",\n        \"𐴹\"\n    ],\n    \"saur\": [\n        \"꣐\",\n        \"꣑\",\n        \"꣒\",\n        \"꣓\",\n        \"꣔\",\n        \"꣕\",\n        \"꣖\",\n        \"꣗\",\n        \"꣘\",\n        \"꣙\"\n    ],\n    \"segment\": [\n        \"🯰\",\n        \"🯱\",\n        \"🯲\",\n        \"🯳\",\n        \"🯴\",\n        \"🯵\",\n        \"🯶\",\n        \"🯷\",\n        \"🯸\",\n        \"🯹\"\n    ],\n    \"shrd\": [\n        \"𑇐\",\n        \"𑇑\",\n        \"𑇒\",\n        \"𑇓\",\n        \"𑇔\",\n        \"𑇕\",\n        \"𑇖\",\n        \"𑇗\",\n        \"𑇘\",\n        \"𑇙\"\n    ],\n    \"sind\": [\n        \"𑋰\",\n        \"𑋱\",\n        \"𑋲\",\n        \"𑋳\",\n        \"𑋴\",\n        \"𑋵\",\n        \"𑋶\",\n        \"𑋷\",\n        \"𑋸\",\n        \"𑋹\"\n    ],\n    \"sinh\": [\n        \"෦\",\n        \"෧\",\n        \"෨\",\n        \"෩\",\n        \"෪\",\n        \"෫\",\n        \"෬\",\n        \"෭\",\n        \"෮\",\n        \"෯\"\n    ],\n    \"sora\": [\n        \"𑃰\",\n        \"𑃱\",\n        \"𑃲\",\n        \"𑃳\",\n        \"𑃴\",\n        \"𑃵\",\n        \"𑃶\",\n        \"𑃷\",\n        \"𑃸\",\n        \"𑃹\"\n    ],\n    \"sund\": [\n        \"᮰\",\n        \"᮱\",\n        \"᮲\",\n        \"᮳\",\n        \"᮴\",\n        \"᮵\",\n        \"᮶\",\n        \"᮷\",\n        \"᮸\",\n        \"᮹\"\n    ],\n    \"takr\": [\n        \"𑛀\",\n        \"𑛁\",\n        \"𑛂\",\n        \"𑛃\",\n        \"𑛄\",\n        \"𑛅\",\n        \"𑛆\",\n        \"𑛇\",\n        \"𑛈\",\n        \"𑛉\"\n    ],\n    \"talu\": [\n        \"᧐\",\n        \"᧑\",\n        \"᧒\",\n        \"᧓\",\n        \"᧔\",\n        \"᧕\",\n        \"᧖\",\n        \"᧗\",\n        \"᧘\",\n        \"᧙\"\n    ],\n    \"tamldec\": [\n        \"௦\",\n        \"௧\",\n        \"௨\",\n        \"௩\",\n        \"௪\",\n        \"௫\",\n        \"௬\",\n        \"௭\",\n        \"௮\",\n        \"௯\"\n    ],\n    \"telu\": [\n        \"౦\",\n        \"౧\",\n        \"౨\",\n        \"౩\",\n        \"౪\",\n        \"౫\",\n        \"౬\",\n        \"౭\",\n        \"౮\",\n        \"౯\"\n    ],\n    \"thai\": [\n        \"๐\",\n        \"๑\",\n        \"๒\",\n        \"๓\",\n        \"๔\",\n        \"๕\",\n        \"๖\",\n        \"๗\",\n        \"๘\",\n        \"๙\"\n    ],\n    \"tibt\": [\n        \"༠\",\n        \"༡\",\n        \"༢\",\n        \"༣\",\n        \"༤\",\n        \"༥\",\n        \"༦\",\n        \"༧\",\n        \"༨\",\n        \"༩\"\n    ],\n    \"tirh\": [\n        \"𑓐\",\n        \"𑓑\",\n        \"𑓒\",\n        \"𑓓\",\n        \"𑓔\",\n        \"𑓕\",\n        \"𑓖\",\n        \"𑓗\",\n        \"𑓘\",\n        \"𑓙\"\n    ],\n    \"vaii\": [\n        \"ᘠ\",\n        \"ᘡ\",\n        \"ᘢ\",\n        \"ᘣ\",\n        \"ᘤ\",\n        \"ᘥ\",\n        \"ᘦ\",\n        \"ᘧ\",\n        \"ᘨ\",\n        \"ᘩ\"\n    ],\n    \"wara\": [\n        \"𑣠\",\n        \"𑣡\",\n        \"𑣢\",\n        \"𑣣\",\n        \"𑣤\",\n        \"𑣥\",\n        \"𑣦\",\n        \"𑣧\",\n        \"𑣨\",\n        \"𑣩\"\n    ],\n    \"wcho\": [\n        \"𞋰\",\n        \"𞋱\",\n        \"𞋲\",\n        \"𞋳\",\n        \"𞋴\",\n        \"𞋵\",\n        \"𞋶\",\n        \"𞋷\",\n        \"𞋸\",\n        \"𞋹\"\n    ]\n};\n","import Decimal from 'decimal.js';\nimport { S_UNICODE_REGEX } from '../regex.generated';\nimport { digitMapping } from './digit-mapping.generated';\nimport { GetUnsignedRoundingMode } from './GetUnsignedRoundingMode';\nimport { ToRawFixed } from './ToRawFixed';\n// This is from: unicode-12.1.0/General_Category/Symbol/regex.js\n// IE11 does not support unicode flag, otherwise this is just /\\p{S}/u.\n// /^\\p{S}/u\nvar CARET_S_UNICODE_REGEX = new RegExp(\"^\".concat(S_UNICODE_REGEX.source));\n// /\\p{S}$/u\nvar S_DOLLAR_UNICODE_REGEX = new RegExp(\"\".concat(S_UNICODE_REGEX.source, \"$\"));\nvar CLDR_NUMBER_PATTERN = /[#0](?:[\\.,][#0]+)*/g;\nexport default function formatToParts(numberResult, data, pl, options) {\n    var _a;\n    var sign = numberResult.sign, exponent = numberResult.exponent, magnitude = numberResult.magnitude;\n    var notation = options.notation, style = options.style, numberingSystem = options.numberingSystem;\n    var defaultNumberingSystem = data.numbers.nu[0];\n    // #region Part 1: partition and interpolate the CLDR number pattern.\n    // ----------------------------------------------------------\n    var compactNumberPattern = null;\n    if (notation === 'compact' && magnitude) {\n        compactNumberPattern = getCompactDisplayPattern(numberResult, pl, data, style, options.compactDisplay, options.currencyDisplay, numberingSystem);\n    }\n    // This is used multiple times\n    var nonNameCurrencyPart;\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var byCurrencyDisplay = data.currencies[options.currency];\n        if (byCurrencyDisplay) {\n            switch (options.currencyDisplay) {\n                case 'code':\n                    nonNameCurrencyPart = options.currency;\n                    break;\n                case 'symbol':\n                    nonNameCurrencyPart = byCurrencyDisplay.symbol;\n                    break;\n                default:\n                    nonNameCurrencyPart = byCurrencyDisplay.narrow;\n                    break;\n            }\n        }\n        else {\n            // Fallback for unknown currency\n            nonNameCurrencyPart = options.currency;\n        }\n    }\n    var numberPattern;\n    if (!compactNumberPattern) {\n        // Note: if the style is unit, or is currency and the currency display is name,\n        // its unit parts will be interpolated in part 2. So here we can fallback to decimal.\n        if (style === 'decimal' ||\n            style === 'unit' ||\n            (style === 'currency' && options.currencyDisplay === 'name')) {\n            // Shortcut for decimal\n            var decimalData = data.numbers.decimal[numberingSystem] ||\n                data.numbers.decimal[defaultNumberingSystem];\n            numberPattern = getPatternForSign(decimalData.standard, sign);\n        }\n        else if (style === 'currency') {\n            var currencyData = data.numbers.currency[numberingSystem] ||\n                data.numbers.currency[defaultNumberingSystem];\n            // We replace number pattern part with `0` for easier postprocessing.\n            numberPattern = getPatternForSign(currencyData[options.currencySign], sign);\n        }\n        else {\n            // percent\n            var percentPattern = data.numbers.percent[numberingSystem] ||\n                data.numbers.percent[defaultNumberingSystem];\n            numberPattern = getPatternForSign(percentPattern, sign);\n        }\n    }\n    else {\n        numberPattern = compactNumberPattern;\n    }\n    // Extract the decimal number pattern string. It looks like \"#,##0,00\", which will later be\n    // used to infer decimal group sizes.\n    var decimalNumberPattern = CLDR_NUMBER_PATTERN.exec(numberPattern)[0];\n    // Now we start to substitute patterns\n    // 1. replace strings like `0` and `#,##0.00` with `{0}`\n    // 2. unquote characters (invariant: the quoted characters does not contain the special tokens)\n    numberPattern = numberPattern\n        .replace(CLDR_NUMBER_PATTERN, '{0}')\n        .replace(/'(.)'/g, '$1');\n    // Handle currency spacing (both compact and non-compact).\n    if (style === 'currency' && options.currencyDisplay !== 'name') {\n        var currencyData = data.numbers.currency[numberingSystem] ||\n            data.numbers.currency[defaultNumberingSystem];\n        // See `currencySpacing` substitution rule in TR-35.\n        // Here we always assume the currencyMatch is \"[:^S:]\" and surroundingMatch is \"[:digit:]\".\n        //\n        // Example 1: for pattern \"#,##0.00¤\" with symbol \"US$\", we replace \"¤\" with the symbol,\n        // but insert an extra non-break space before the symbol, because \"[:^S:]\" matches \"U\" in\n        // \"US$\" and \"[:digit:]\" matches the latn numbering system digits.\n        //\n        // Example 2: for pattern \"¤#,##0.00\" with symbol \"US$\", there is no spacing between symbol\n        // and number, because `$` does not match \"[:^S:]\".\n        //\n        // Implementation note: here we do the best effort to infer the insertion.\n        // We also assume that `beforeInsertBetween` and `afterInsertBetween` will never be `;`.\n        var afterCurrency = currencyData.currencySpacing.afterInsertBetween;\n        if (afterCurrency && !S_DOLLAR_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('¤{0}', \"\\u00A4\".concat(afterCurrency, \"{0}\"));\n        }\n        var beforeCurrency = currencyData.currencySpacing.beforeInsertBetween;\n        if (beforeCurrency && !CARET_S_UNICODE_REGEX.test(nonNameCurrencyPart)) {\n            numberPattern = numberPattern.replace('{0}¤', \"{0}\".concat(beforeCurrency, \"\\u00A4\"));\n        }\n    }\n    // The following tokens are special: `{0}`, `¤`, `%`, `-`, `+`, `{c:...}.\n    var numberPatternParts = numberPattern.split(/({c:[^}]+}|\\{0\\}|[¤%\\-\\+])/g);\n    var numberParts = [];\n    var symbols = data.numbers.symbols[numberingSystem] ||\n        data.numbers.symbols[defaultNumberingSystem];\n    for (var _i = 0, numberPatternParts_1 = numberPatternParts; _i < numberPatternParts_1.length; _i++) {\n        var part = numberPatternParts_1[_i];\n        if (!part) {\n            continue;\n        }\n        switch (part) {\n            case '{0}': {\n                // We only need to handle scientific and engineering notation here.\n                numberParts.push.apply(numberParts, partitionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, \n                // If compact number pattern exists, do not insert group separators.\n                !compactNumberPattern && ((_a = options.useGrouping) !== null && _a !== void 0 ? _a : true), decimalNumberPattern, style, options.roundingIncrement, GetUnsignedRoundingMode(options.roundingMode, sign === -1)));\n                break;\n            }\n            case '-':\n                numberParts.push({ type: 'minusSign', value: symbols.minusSign });\n                break;\n            case '+':\n                numberParts.push({ type: 'plusSign', value: symbols.plusSign });\n                break;\n            case '%':\n                numberParts.push({ type: 'percentSign', value: symbols.percentSign });\n                break;\n            case '¤':\n                // Computed above when handling currency spacing.\n                numberParts.push({ type: 'currency', value: nonNameCurrencyPart });\n                break;\n            default:\n                if (/^\\{c:/.test(part)) {\n                    numberParts.push({\n                        type: 'compact',\n                        value: part.substring(3, part.length - 1),\n                    });\n                }\n                else {\n                    // literal\n                    numberParts.push({ type: 'literal', value: part });\n                }\n                break;\n        }\n    }\n    // #endregion\n    // #region Part 2: interpolate unit pattern if necessary.\n    // ----------------------------------------------\n    switch (style) {\n        case 'currency': {\n            // `currencyDisplay: 'name'` has similar pattern handling as units.\n            if (options.currencyDisplay === 'name') {\n                var unitPattern = (data.numbers.currency[numberingSystem] ||\n                    data.numbers.currency[defaultNumberingSystem]).unitPattern;\n                // Select plural\n                var unitName = void 0;\n                var currencyNameData = data.currencies[options.currency];\n                if (currencyNameData) {\n                    unitName = selectPlural(pl, numberResult.roundedNumber\n                        .times(Decimal.pow(10, exponent))\n                        .toNumber(), currencyNameData.displayName);\n                }\n                else {\n                    // Fallback for unknown currency\n                    unitName = options.currency;\n                }\n                // Do {0} and {1} substitution\n                var unitPatternParts = unitPattern.split(/(\\{[01]\\})/g);\n                var result = [];\n                for (var _b = 0, unitPatternParts_1 = unitPatternParts; _b < unitPatternParts_1.length; _b++) {\n                    var part = unitPatternParts_1[_b];\n                    switch (part) {\n                        case '{0}':\n                            result.push.apply(result, numberParts);\n                            break;\n                        case '{1}':\n                            result.push({ type: 'currency', value: unitName });\n                            break;\n                        default:\n                            if (part) {\n                                result.push({ type: 'literal', value: part });\n                            }\n                            break;\n                    }\n                }\n                return result;\n            }\n            else {\n                return numberParts;\n            }\n        }\n        case 'unit': {\n            var unit = options.unit, unitDisplay = options.unitDisplay;\n            var unitData = data.units.simple[unit];\n            var unitPattern = void 0;\n            if (unitData) {\n                // Simple unit pattern\n                unitPattern = selectPlural(pl, numberResult.roundedNumber\n                    .times(Decimal.pow(10, exponent))\n                    .toNumber(), data.units.simple[unit][unitDisplay]);\n            }\n            else {\n                // See: http://unicode.org/reports/tr35/tr35-general.html#perUnitPatterns\n                // If cannot find unit in the simple pattern, it must be \"per\" compound pattern.\n                // Implementation note: we are not following TR-35 here because we need to format to parts!\n                var _c = unit.split('-per-'), numeratorUnit = _c[0], denominatorUnit = _c[1];\n                unitData = data.units.simple[numeratorUnit];\n                var numeratorUnitPattern = selectPlural(pl, numberResult.roundedNumber\n                    .times(Decimal.pow(10, exponent))\n                    .toNumber(), data.units.simple[numeratorUnit][unitDisplay]);\n                var perUnitPattern = data.units.simple[denominatorUnit].perUnit[unitDisplay];\n                if (perUnitPattern) {\n                    // perUnitPattern exists, combine it with numeratorUnitPattern\n                    unitPattern = perUnitPattern.replace('{0}', numeratorUnitPattern);\n                }\n                else {\n                    // get compoundUnit pattern (e.g. \"{0} per {1}\"), repalce {0} with numerator pattern and {1} with\n                    // the denominator pattern in singular form.\n                    var perPattern = data.units.compound.per[unitDisplay];\n                    var denominatorPattern = selectPlural(pl, 1, data.units.simple[denominatorUnit][unitDisplay]);\n                    unitPattern = unitPattern = perPattern\n                        .replace('{0}', numeratorUnitPattern)\n                        .replace('{1}', denominatorPattern.replace('{0}', ''));\n                }\n            }\n            var result = [];\n            // We need spacing around \"{0}\" because they are not treated as \"unit\" parts, but \"literal\".\n            for (var _d = 0, _e = unitPattern.split(/(\\s*\\{0\\}\\s*)/); _d < _e.length; _d++) {\n                var part = _e[_d];\n                var interpolateMatch = /^(\\s*)\\{0\\}(\\s*)$/.exec(part);\n                if (interpolateMatch) {\n                    // Space before \"{0}\"\n                    if (interpolateMatch[1]) {\n                        result.push({ type: 'literal', value: interpolateMatch[1] });\n                    }\n                    // \"{0}\" itself\n                    result.push.apply(result, numberParts);\n                    // Space after \"{0}\"\n                    if (interpolateMatch[2]) {\n                        result.push({ type: 'literal', value: interpolateMatch[2] });\n                    }\n                }\n                else if (part) {\n                    result.push({ type: 'unit', value: part });\n                }\n            }\n            return result;\n        }\n        default:\n            return numberParts;\n    }\n    // #endregion\n}\n// A subset of https://tc39.es/ecma402/#sec-partitionnotationsubpattern\n// Plus the exponent parts handling.\nfunction partitionNumberIntoParts(symbols, numberResult, notation, exponent, numberingSystem, useGrouping, \n/**\n * This is the decimal number pattern without signs or symbols.\n * It is used to infer the group size when `useGrouping` is true.\n *\n * A typical value looks like \"#,##0.00\" (primary group size is 3).\n * Some locales like Hindi has secondary group size of 2 (e.g. \"#,##,##0.00\").\n */\ndecimalNumberPattern, style, roundingIncrement, unsignedRoundingMode) {\n    var result = [];\n    // eslint-disable-next-line prefer-const\n    var n = numberResult.formattedString, x = numberResult.roundedNumber;\n    if (x.isNaN()) {\n        return [{ type: 'nan', value: n }];\n    }\n    else if (!x.isFinite()) {\n        return [{ type: 'infinity', value: n }];\n    }\n    var digitReplacementTable = digitMapping[numberingSystem];\n    if (digitReplacementTable) {\n        n = n.replace(/\\d/g, function (digit) { return digitReplacementTable[+digit] || digit; });\n    }\n    // TODO: Else use an implementation dependent algorithm to map n to the appropriate\n    // representation of n in the given numbering system.\n    var decimalSepIndex = n.indexOf('.');\n    var integer;\n    var fraction;\n    if (decimalSepIndex > 0) {\n        integer = n.slice(0, decimalSepIndex);\n        fraction = n.slice(decimalSepIndex + 1);\n    }\n    else {\n        integer = n;\n    }\n    // #region Grouping integer digits\n    // The weird compact and x >= 10000 check is to ensure consistency with Node.js and Chrome.\n    // Note that `de` does not have compact form for thousands, but Node.js does not insert grouping separator\n    // unless the rounded number is greater than 10000:\n    //   NumberFormat('de', {notation: 'compact', compactDisplay: 'short'}).format(1234) //=> \"1234\"\n    //   NumberFormat('de').format(1234) //=> \"1.234\"\n    var shouldUseGrouping = false;\n    if (useGrouping === 'always') {\n        shouldUseGrouping = true;\n    }\n    else if (useGrouping === 'min2') {\n        shouldUseGrouping = x.greaterThanOrEqualTo(10000);\n    }\n    else if (useGrouping === 'auto' || useGrouping) {\n        shouldUseGrouping = notation !== 'compact' || x.greaterThanOrEqualTo(10000);\n    }\n    if (shouldUseGrouping) {\n        // a. Let groupSepSymbol be the implementation-, locale-, and numbering system-dependent (ILND) String representing the grouping separator.\n        // For currency we should use `currencyGroup` instead of generic `group`\n        var groupSepSymbol = style === 'currency' && symbols.currencyGroup != null\n            ? symbols.currencyGroup\n            : symbols.group;\n        var groups = [];\n        // > There may be two different grouping sizes: The primary grouping size used for the least\n        // > significant integer group, and the secondary grouping size used for more significant groups.\n        // > If a pattern contains multiple grouping separators, the interval between the last one and the\n        // > end of the integer defines the primary grouping size, and the interval between the last two\n        // > defines the secondary grouping size. All others are ignored.\n        var integerNumberPattern = decimalNumberPattern.split('.')[0];\n        var patternGroups = integerNumberPattern.split(',');\n        var primaryGroupingSize = 3;\n        var secondaryGroupingSize = 3;\n        if (patternGroups.length > 1) {\n            primaryGroupingSize = patternGroups[patternGroups.length - 1].length;\n        }\n        if (patternGroups.length > 2) {\n            secondaryGroupingSize = patternGroups[patternGroups.length - 2].length;\n        }\n        var i = integer.length - primaryGroupingSize;\n        if (i > 0) {\n            // Slice the least significant integer group\n            groups.push(integer.slice(i, i + primaryGroupingSize));\n            // Then iteratively push the more signicant groups\n            // TODO: handle surrogate pairs in some numbering system digits\n            for (i -= secondaryGroupingSize; i > 0; i -= secondaryGroupingSize) {\n                groups.push(integer.slice(i, i + secondaryGroupingSize));\n            }\n            groups.push(integer.slice(0, i + secondaryGroupingSize));\n        }\n        else {\n            groups.push(integer);\n        }\n        while (groups.length > 0) {\n            var integerGroup = groups.pop();\n            result.push({ type: 'integer', value: integerGroup });\n            if (groups.length > 0) {\n                result.push({ type: 'group', value: groupSepSymbol });\n            }\n        }\n    }\n    else {\n        result.push({ type: 'integer', value: integer });\n    }\n    // #endregion\n    if (fraction !== undefined) {\n        var decimalSepSymbol = style === 'currency' && symbols.currencyDecimal != null\n            ? symbols.currencyDecimal\n            : symbols.decimal;\n        result.push({ type: 'decimal', value: decimalSepSymbol }, { type: 'fraction', value: fraction });\n    }\n    if ((notation === 'scientific' || notation === 'engineering') &&\n        x.isFinite()) {\n        result.push({ type: 'exponentSeparator', value: symbols.exponential });\n        if (exponent < 0) {\n            result.push({ type: 'exponentMinusSign', value: symbols.minusSign });\n            exponent = -exponent;\n        }\n        var exponentResult = ToRawFixed(new Decimal(exponent), 0, 0, roundingIncrement, unsignedRoundingMode);\n        result.push({\n            type: 'exponentInteger',\n            value: exponentResult.formattedString,\n        });\n    }\n    return result;\n}\nfunction getPatternForSign(pattern, sign) {\n    if (pattern.indexOf(';') < 0) {\n        pattern = \"\".concat(pattern, \";-\").concat(pattern);\n    }\n    var _a = pattern.split(';'), zeroPattern = _a[0], negativePattern = _a[1];\n    switch (sign) {\n        case 0:\n            return zeroPattern;\n        case -1:\n            return negativePattern;\n        default:\n            return negativePattern.indexOf('-') >= 0\n                ? negativePattern.replace(/-/g, '+')\n                : \"+\".concat(zeroPattern);\n    }\n}\n// Find the CLDR pattern for compact notation based on the magnitude of data and style.\n//\n// Example return value: \"¤ {c:laki}000;¤{c:laki} -0\" (`sw` locale):\n// - Notice the `{c:...}` token that wraps the compact literal.\n// - The consecutive zeros are normalized to single zero to match CLDR_NUMBER_PATTERN.\n//\n// Returning null means the compact display pattern cannot be found.\nfunction getCompactDisplayPattern(numberResult, pl, data, style, compactDisplay, currencyDisplay, numberingSystem) {\n    var _a;\n    var roundedNumber = numberResult.roundedNumber, sign = numberResult.sign, magnitude = numberResult.magnitude;\n    var magnitudeKey = String(Math.pow(10, magnitude));\n    var defaultNumberingSystem = data.numbers.nu[0];\n    var pattern;\n    if (style === 'currency' && currencyDisplay !== 'name') {\n        var byNumberingSystem = data.numbers.currency;\n        var currencyData = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        // NOTE: compact notation ignores currencySign!\n        var compactPluralRules = (_a = currencyData.short) === null || _a === void 0 ? void 0 : _a[magnitudeKey];\n        if (!compactPluralRules) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber.toNumber(), compactPluralRules);\n    }\n    else {\n        var byNumberingSystem = data.numbers.decimal;\n        var byCompactDisplay = byNumberingSystem[numberingSystem] ||\n            byNumberingSystem[defaultNumberingSystem];\n        var compactPlaralRule = byCompactDisplay[compactDisplay][magnitudeKey];\n        if (!compactPlaralRule) {\n            return null;\n        }\n        pattern = selectPlural(pl, roundedNumber.toNumber(), compactPlaralRule);\n    }\n    // See https://unicode.org/reports/tr35/tr35-numbers.html#Compact_Number_Formats\n    // > If the value is precisely “0”, either explicit or defaulted, then the normal number format\n    // > pattern for that sort of object is supplied.\n    if (pattern === '0') {\n        return null;\n    }\n    pattern = getPatternForSign(pattern, sign)\n        // Extract compact literal from the pattern\n        .replace(/([^\\s;\\-\\+\\d¤]+)/g, '{c:$1}')\n        // We replace one or more zeros with a single zero so it matches `CLDR_NUMBER_PATTERN`.\n        .replace(/0+/, '0');\n    return pattern;\n}\nfunction selectPlural(pl, x, rules) {\n    return rules[pl.select(x)] || rules.other;\n}\n","/**\n * https://tc39.es/ecma402/#sec-formatapproximately\n */\nexport function FormatApproximately(internalSlots, result) {\n    var symbols = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem];\n    var approximatelySign = symbols.approximatelySign;\n    result.push({ type: 'approximatelySign', value: approximatelySign });\n    return result;\n}\n","import Decimal from 'decimal.js';\nimport { invariant } from '../utils';\nimport { ComputeExponent } from './ComputeExponent';\nimport formatToParts from './format_to_parts';\nimport { FormatNumericToString } from './FormatNumericToString';\n/**\n * https://tc39.es/ecma402/#sec-partitionnumberpattern\n */\nexport function PartitionNumberPattern(internalSlots, _x) {\n    var _a;\n    var x = _x;\n    // IMPL: We need to record the magnitude of the number\n    var magnitude = 0;\n    // 2. Let dataLocaleData be internalSlots.[[dataLocaleData]].\n    var pl = internalSlots.pl, dataLocaleData = internalSlots.dataLocaleData, numberingSystem = internalSlots.numberingSystem;\n    // 3. Let symbols be dataLocaleData.[[numbers]].[[symbols]][internalSlots.[[numberingSystem]]].\n    var symbols = dataLocaleData.numbers.symbols[numberingSystem] ||\n        dataLocaleData.numbers.symbols[dataLocaleData.numbers.nu[0]];\n    // 4. Let exponent be 0.\n    var exponent = 0;\n    // 5. Let n be ! ToString(x).\n    var n;\n    // 6. If x is NaN, then\n    if (x.isNaN()) {\n        // 6.a. Let n be symbols.[[nan]].\n        n = symbols.nan;\n    }\n    else if (!x.isFinite()) {\n        // 7. Else if x is a non-finite Number, then\n        // 7.a. Let n be symbols.[[infinity]].\n        n = symbols.infinity;\n    }\n    else {\n        // 8. Else,\n        if (!x.isZero()) {\n            // 8.a. If x < 0, let x be -x.\n            invariant(x.isFinite(), 'Input must be a mathematical value');\n            // 8.b. If internalSlots.[[style]] is \"percent\", let x be 100 × x.\n            if (internalSlots.style == 'percent') {\n                x = x.times(100);\n            }\n            // 8.c. Let exponent be ComputeExponent(numberFormat, x).\n            ;\n            _a = ComputeExponent(internalSlots, x), exponent = _a[0], \n            // IMPL: We need to record the magnitude of the number\n            magnitude = _a[1];\n            // 8.d. Let x be x × 10^(-exponent).\n            x = x.times(Decimal.pow(10, -exponent));\n        }\n        // 8.e. Let formatNumberResult be FormatNumericToString(internalSlots, x).\n        var formatNumberResult = FormatNumericToString(internalSlots, x);\n        // 8.f. Let n be formatNumberResult.[[formattedString]].\n        n = formatNumberResult.formattedString;\n        // 8.g. Let x be formatNumberResult.[[roundedNumber]].\n        x = formatNumberResult.roundedNumber;\n    }\n    // 9. Let sign be 0.\n    var sign;\n    // 10. If x is negative, then\n    var signDisplay = internalSlots.signDisplay;\n    switch (signDisplay) {\n        case 'never':\n            // 10.a. If internalSlots.[[signDisplay]] is \"never\", then\n            // 10.a.i. Let sign be 0.\n            sign = 0;\n            break;\n        case 'auto':\n            // 10.b. Else if internalSlots.[[signDisplay]] is \"auto\", then\n            if (x.isPositive() || x.isNaN()) {\n                // 10.b.i. If x is positive or x is NaN, let sign be 0.\n                sign = 0;\n            }\n            else {\n                // 10.b.ii. Else, let sign be -1.\n                sign = -1;\n            }\n            break;\n        case 'always':\n            // 10.c. Else if internalSlots.[[signDisplay]] is \"always\", then\n            if (x.isPositive() || x.isNaN()) {\n                // 10.c.i. If x is positive or x is NaN, let sign be 1.\n                sign = 1;\n            }\n            else {\n                // 10.c.ii. Else, let sign be -1.\n                sign = -1;\n            }\n            break;\n        case 'exceptZero':\n            // 10.d. Else if internalSlots.[[signDisplay]] is \"exceptZero\", then\n            if (x.isZero()) {\n                // 10.d.i. If x is 0, let sign be 0.\n                sign = 0;\n            }\n            else if (x.isNegative()) {\n                // 10.d.ii. Else if x is negative, let sign be -1.\n                sign = -1;\n            }\n            else {\n                // 10.d.iii. Else, let sign be 1.\n                sign = 1;\n            }\n            break;\n        default:\n            // 10.e. Else,\n            invariant(signDisplay === 'negative', 'signDisplay must be \"negative\"');\n            if (x.isNegative() && !x.isZero()) {\n                // 10.e.i. If x is negative and x is not 0, let sign be -1.\n                sign = -1;\n            }\n            else {\n                // 10.e.ii. Else, let sign be 0.\n                sign = 0;\n            }\n            break;\n    }\n    // 11. Return ? FormatNumberToParts(numberFormat, x, n, exponent, sign).\n    return formatToParts({\n        roundedNumber: x,\n        formattedString: n,\n        exponent: exponent,\n        // IMPL: We're returning this for our implementation of formatToParts\n        magnitude: magnitude,\n        sign: sign,\n    }, internalSlots.dataLocaleData, pl, internalSlots);\n}\n","import { PartitionNumberPattern } from './PartitionNumberPattern';\nexport function FormatNumeric(internalSlots, x) {\n    var parts = PartitionNumberPattern(internalSlots, x);\n    return parts.map(function (p) { return p.value; }).join('');\n}\n","import { invariant } from '../utils';\nimport { CollapseNumberRange } from './CollapseNumberRange';\nimport { FormatApproximately } from './FormatApproximately';\nimport { FormatNumeric } from './FormatNumeric';\nimport { PartitionNumberPattern } from './PartitionNumberPattern';\n/**\n * https://tc39.es/ecma402/#sec-partitionnumberrangepattern\n */\nexport function PartitionNumberRangePattern(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    // 1. Assert: x and y are both mathematical values.\n    invariant(!x.isNaN() && !y.isNaN(), 'Input must be a number', RangeError);\n    var internalSlots = getInternalSlots(numberFormat);\n    // 3. Let xResult be ? PartitionNumberPattern(numberFormat, x).\n    var xResult = PartitionNumberPattern(internalSlots, x);\n    // 4. Let yResult be ? PartitionNumberPattern(numberFormat, y).\n    var yResult = PartitionNumberPattern(internalSlots, y);\n    if (FormatNumeric(internalSlots, x) === FormatNumeric(internalSlots, y)) {\n        var appxResult = FormatApproximately(internalSlots, xResult);\n        appxResult.forEach(function (el) {\n            el.source = 'shared';\n        });\n        return appxResult;\n    }\n    var result = [];\n    xResult.forEach(function (el) {\n        el.source = 'startRange';\n        result.push(el);\n    });\n    // 9. Let symbols be internalSlots.[[dataLocaleData]].[[numbers]].[[symbols]][internalSlots.[[numberingSystem]]].\n    var rangeSeparator = internalSlots.dataLocaleData.numbers.symbols[internalSlots.numberingSystem]\n        .rangeSign;\n    result.push({ type: 'literal', value: rangeSeparator, source: 'shared' });\n    yResult.forEach(function (el) {\n        el.source = 'endRange';\n        result.push(el);\n    });\n    // 13. Return ? CollapseNumberRange(numberFormat, result).\n    return CollapseNumberRange(numberFormat, result, { getInternalSlots: getInternalSlots });\n}\n","import { PartitionNumberRangePattern } from './PartitionNumberRangePattern';\n/**\n * https://tc39.es/ecma402/#sec-formatnumericrange\n */\nexport function FormatNumericRange(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var parts = PartitionNumberRangePattern(numberFormat, x, y, {\n        getInternalSlots: getInternalSlots,\n    });\n    return parts.map(function (part) { return part.value; }).join('');\n}\n","import { PartitionNumberRangePattern } from './PartitionNumberRangePattern';\n/**\n * https://tc39.es/ecma402/#sec-formatnumericrangetoparts\n */\nexport function FormatNumericRangeToParts(numberFormat, x, y, _a) {\n    var getInternalSlots = _a.getInternalSlots;\n    var parts = PartitionNumberRangePattern(numberFormat, x, y, {\n        getInternalSlots: getInternalSlots,\n    });\n    return parts.map(function (part, index) { return ({\n        type: part.type,\n        value: part.value,\n        source: part.source,\n        result: index.toString(),\n    }); });\n}\n","import { ArrayCreate } from '../262';\nimport { PartitionNumberPattern } from './PartitionNumberPattern';\nexport function FormatNumericToParts(nf, x, implDetails) {\n    var parts = PartitionNumberPattern(implDetails.getInternalSlots(nf), x);\n    var result = ArrayCreate(0);\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n        var part = parts_1[_i];\n        result.push({\n            type: part.type,\n            value: part.value,\n        });\n    }\n    return result;\n}\n","import { DefaultNumberOption } from '../DefaultNumberOption';\nimport { GetNumberOption } from '../GetNumberOption';\nimport { GetOption } from '../GetOption';\nimport { invariant } from '../utils';\n//IMPL: Valid rounding increments as per implementation\nvar VALID_ROUNDING_INCREMENTS = new Set([\n    1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000,\n]);\n/**\n * https://tc39.es/ecma402/#sec-setnfdigitoptions\n */\nexport function SetNumberFormatDigitOptions(internalSlots, opts, mnfdDefault, mxfdDefault, notation) {\n    // 1. Let mnid be ? GetNumberOption(opts, \"minimumIntegerDigits\", 1, 21, 1).\n    var mnid = GetNumberOption(opts, 'minimumIntegerDigits', 1, 21, 1);\n    // 2. Let mnfd be opts.[[MinimumFractionDigits]].\n    var mnfd = opts.minimumFractionDigits;\n    // 3. Let mxfd be opts.[[MaximumFractionDigits]].\n    var mxfd = opts.maximumFractionDigits;\n    // 4. Let mnsd be opts.[[MinimumSignificantDigits]].\n    var mnsd = opts.minimumSignificantDigits;\n    // 5. Let mxsd be opts.[[MaximumSignificantDigits]].\n    var mxsd = opts.maximumSignificantDigits;\n    // 6. Set internalSlots.[[MinimumIntegerDigits]] to mnid.\n    internalSlots.minimumIntegerDigits = mnid;\n    // 7. Let roundingIncrement be ? GetNumberOption(opts, \"roundingIncrement\", 1, 5000, 1).\n    var roundingIncrement = GetNumberOption(opts, 'roundingIncrement', 1, 5000, 1);\n    // 8. If roundingIncrement is not an element of the list {1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000}, throw a RangeError exception.\n    invariant(VALID_ROUNDING_INCREMENTS.has(roundingIncrement), \"Invalid rounding increment value: \".concat(roundingIncrement, \".\\nValid values are \").concat(Array.from(VALID_ROUNDING_INCREMENTS).join(', '), \".\"));\n    // 9. Let roundingMode be ? GetOption(opts, \"roundingMode\", \"string\", « \"ceil\", \"floor\", \"expand\", \"trunc\", \"halfCeil\", \"halfFloor\", \"halfExpand\", \"halfTrunc\", \"halfEven\" », \"halfExpand\").\n    var roundingMode = GetOption(opts, 'roundingMode', 'string', [\n        'ceil',\n        'floor',\n        'expand',\n        'trunc',\n        'halfCeil',\n        'halfFloor',\n        'halfExpand',\n        'halfTrunc',\n        'halfEven',\n    ], 'halfExpand');\n    // 10. Let roundingPriority be ? GetOption(opts, \"roundingPriority\", \"string\", « \"auto\", \"morePrecision\", \"lessPrecision\" », \"auto\").\n    var roundingPriority = GetOption(opts, 'roundingPriority', 'string', ['auto', 'morePrecision', 'lessPrecision'], 'auto');\n    // 11. Let trailingZeroDisplay be ? GetOption(opts, \"trailingZeroDisplay\", \"string\", « \"auto\", \"stripIfInteger\" », \"auto\").\n    var trailingZeroDisplay = GetOption(opts, 'trailingZeroDisplay', 'string', ['auto', 'stripIfInteger'], 'auto');\n    // 12. If roundingIncrement is not 1, then\n    if (roundingIncrement !== 1) {\n        // 12.a. Set mxfdDefault to mnfdDefault.\n        mxfdDefault = mnfdDefault;\n    }\n    // 13. Set internalSlots.[[RoundingIncrement]] to roundingIncrement.\n    internalSlots.roundingIncrement = roundingIncrement;\n    // 14. Set internalSlots.[[RoundingMode]] to roundingMode.\n    internalSlots.roundingMode = roundingMode;\n    // 15. Set internalSlots.[[TrailingZeroDisplay]] to trailingZeroDisplay.\n    internalSlots.trailingZeroDisplay = trailingZeroDisplay;\n    // 16. Let hasSd be true if mnsd is not undefined or mxsd is not undefined; otherwise, let hasSd be false.\n    var hasSd = mnsd !== undefined || mxsd !== undefined;\n    // 17. Let hasFd be true if mnfd is not undefined or mxfd is not undefined; otherwise, let hasFd be false.\n    var hasFd = mnfd !== undefined || mxfd !== undefined;\n    // 18. Let needSd be true.\n    var needSd = true;\n    // 19. Let needFd be true.\n    var needFd = true;\n    // 20. If roundingPriority is \"auto\", then\n    if (roundingPriority === 'auto') {\n        // 20.a. Set needSd to hasSd.\n        needSd = hasSd;\n        // 20.b. If hasSd is true or hasFd is false and notation is \"compact\", then\n        if (hasSd || (!hasFd && notation === 'compact')) {\n            // 20.b.i. Set needFd to false.\n            needFd = false;\n        }\n    }\n    // 21. If needSd is true, then\n    if (needSd) {\n        // 21.a. If hasSd is true, then\n        if (hasSd) {\n            // 21.a.i. Set internalSlots.[[MinimumSignificantDigits]] to ? DefaultNumberOption(mnsd, 1, 21, 1).\n            internalSlots.minimumSignificantDigits = DefaultNumberOption(mnsd, 1, 21, 1);\n            // 21.a.ii. Set internalSlots.[[MaximumSignificantDigits]] to ? DefaultNumberOption(mxsd, internalSlots.[[MinimumSignificantDigits]], 21, 21).\n            internalSlots.maximumSignificantDigits = DefaultNumberOption(mxsd, internalSlots.minimumSignificantDigits, 21, 21);\n        }\n        else {\n            // 21.b. Else,\n            // 21.b.i. Set internalSlots.[[MinimumSignificantDigits]] to 1.\n            internalSlots.minimumSignificantDigits = 1;\n            // 21.b.ii. Set internalSlots.[[MaximumSignificantDigits]] to 21.\n            internalSlots.maximumSignificantDigits = 21;\n        }\n    }\n    // 22. If needFd is true, then\n    if (needFd) {\n        // 22.a. If hasFd is true, then\n        if (hasFd) {\n            // 22.a.i. Set mnfd to ? DefaultNumberOption(mnfd, 0, 100, undefined).\n            mnfd = DefaultNumberOption(mnfd, 0, 100, undefined);\n            // 22.a.ii. Set mxfd to ? DefaultNumberOption(mxfd, 0, 100, undefined).\n            mxfd = DefaultNumberOption(mxfd, 0, 100, undefined);\n            // 22.a.iii. If mnfd is undefined, then\n            if (mnfd === undefined) {\n                // 22.a.iii.1. Assert: mxfd is not undefined.\n                invariant(mxfd !== undefined, 'maximumFractionDigits must be defined');\n                // 22.a.iii.2. Set mnfd to min(mnfdDefault, mxfd).\n                mnfd = Math.min(mnfdDefault, mxfd);\n            }\n            else if (mxfd === undefined) {\n                // 22.a.iv. Else if mxfd is undefined, then\n                // 22.a.iv.1. Set mxfd to max(mxfdDefault, mnfd).\n                mxfd = Math.max(mxfdDefault, mnfd);\n            }\n            else if (mnfd > mxfd) {\n                // 22.a.v. Else if mnfd > mxfd, throw a RangeError exception.\n                throw new RangeError(\"Invalid range, \".concat(mnfd, \" > \").concat(mxfd));\n            }\n            // 22.a.vi. Set internalSlots.[[MinimumFractionDigits]] to mnfd.\n            internalSlots.minimumFractionDigits = mnfd;\n            // 22.a.vii. Set internalSlots.[[MaximumFractionDigits]] to mxfd.\n            internalSlots.maximumFractionDigits = mxfd;\n        }\n        else {\n            // 22.b. Else,\n            // 22.b.i. Set internalSlots.[[MinimumFractionDigits]] to mnfdDefault.\n            internalSlots.minimumFractionDigits = mnfdDefault;\n            // 22.b.ii. Set internalSlots.[[MaximumFractionDigits]] to mxfdDefault.\n            internalSlots.maximumFractionDigits = mxfdDefault;\n        }\n    }\n    // 23. If needSd is false and needFd is false, then\n    if (!needSd && !needFd) {\n        // 23.a. Set internalSlots.[[MinimumFractionDigits]] to 0.\n        internalSlots.minimumFractionDigits = 0;\n        // 23.b. Set internalSlots.[[MaximumFractionDigits]] to 0.\n        internalSlots.maximumFractionDigits = 0;\n        // 23.c. Set internalSlots.[[MinimumSignificantDigits]] to 1.\n        internalSlots.minimumSignificantDigits = 1;\n        // 23.d. Set internalSlots.[[MaximumSignificantDigits]] to 2.\n        internalSlots.maximumSignificantDigits = 2;\n        // 23.e. Set internalSlots.[[RoundingType]] to \"morePrecision\".\n        internalSlots.roundingType = 'morePrecision';\n        // 23.f. Set internalSlots.[[RoundingPriority]] to \"morePrecision\".\n        internalSlots.roundingPriority = 'morePrecision';\n    }\n    else if (roundingPriority === 'morePrecision') {\n        // 24. Else if roundingPriority is \"morePrecision\", then\n        // 24.a. Set internalSlots.[[RoundingType]] to \"morePrecision\".\n        internalSlots.roundingType = 'morePrecision';\n        // 24.b. Set internalSlots.[[RoundingPriority]] to \"morePrecision\".\n        internalSlots.roundingPriority = 'morePrecision';\n    }\n    else if (roundingPriority === 'lessPrecision') {\n        // 25. Else if roundingPriority is \"lessPrecision\", then\n        // 25.a. Set internalSlots.[[RoundingType]] to \"lessPrecision\".\n        internalSlots.roundingType = 'lessPrecision';\n        // 25.b. Set internalSlots.[[RoundingPriority]] to \"lessPrecision\".\n        internalSlots.roundingPriority = 'lessPrecision';\n    }\n    else if (hasSd) {\n        // 26. Else if hasSd is true, then\n        // 26.a. Set internalSlots.[[RoundingType]] to \"significantDigits\".\n        internalSlots.roundingType = 'significantDigits';\n        // 26.b. Set internalSlots.[[RoundingPriority]] to \"auto\".\n        internalSlots.roundingPriority = 'auto';\n    }\n    else {\n        // 27. Else,\n        // 27.a. Set internalSlots.[[RoundingType]] to \"fractionDigits\".\n        internalSlots.roundingType = 'fractionDigits';\n        // 27.b. Set internalSlots.[[RoundingPriority]] to \"auto\".\n        internalSlots.roundingPriority = 'auto';\n    }\n    // 28. If roundingIncrement is not 1, then\n    if (roundingIncrement !== 1) {\n        // 28.a. Assert: internalSlots.[[RoundingType]] is \"fractionDigits\".\n        invariant(internalSlots.roundingType === 'fractionDigits', 'Invalid roundingType', TypeError);\n        // 28.b. Assert: internalSlots.[[MaximumFractionDigits]] is equal to internalSlots.[[MinimumFractionDigits]].\n        invariant(internalSlots.maximumFractionDigits ===\n            internalSlots.minimumFractionDigits, 'With roundingIncrement > 1, maximumFractionDigits and minimumFractionDigits must be equal.', RangeError);\n    }\n}\n","import { GetOption } from '../GetOption';\nimport { IsWellFormedCurrencyCode } from '../IsWellFormedCurrencyCode';\nimport { IsWellFormedUnitIdentifier } from '../IsWellFormedUnitIdentifier';\nimport { invariant } from '../utils';\n/**\n * https://tc39.es/ecma402/#sec-setnumberformatunitoptions\n */\nexport function SetNumberFormatUnitOptions(internalSlots, options) {\n    if (options === void 0) { options = Object.create(null); }\n    // 1. Let style be ? GetOption(options, \"style\", \"string\", « \"decimal\", \"percent\", \"currency\", \"unit\" », \"decimal\").\n    var style = GetOption(options, 'style', 'string', ['decimal', 'percent', 'currency', 'unit'], 'decimal');\n    // 2. Set internalSlots.[[Style]] to style.\n    internalSlots.style = style;\n    // 3. Let currency be ? GetOption(options, \"currency\", \"string\", undefined, undefined).\n    var currency = GetOption(options, 'currency', 'string', undefined, undefined);\n    // 4. If currency is not undefined, then\n    // a. If the result of IsWellFormedCurrencyCode(currency) is false, throw a RangeError exception.\n    invariant(currency === undefined || IsWellFormedCurrencyCode(currency), 'Malformed currency code', RangeError);\n    // 5. If style is \"currency\" and currency is undefined, throw a TypeError exception.\n    invariant(style !== 'currency' || currency !== undefined, 'currency cannot be undefined', TypeError);\n    // 6. Let currencyDisplay be ? GetOption(options, \"currencyDisplay\", \"string\", « \"code\", \"symbol\", \"narrowSymbol\", \"name\" », \"symbol\").\n    var currencyDisplay = GetOption(options, 'currencyDisplay', 'string', ['code', 'symbol', 'narrowSymbol', 'name'], 'symbol');\n    // 7. Let currencySign be ? GetOption(options, \"currencySign\", \"string\", « \"standard\", \"accounting\" », \"standard\").\n    var currencySign = GetOption(options, 'currencySign', 'string', ['standard', 'accounting'], 'standard');\n    // 8. Let unit be ? GetOption(options, \"unit\", \"string\", undefined, undefined).\n    var unit = GetOption(options, 'unit', 'string', undefined, undefined);\n    // 9. If unit is not undefined, then\n    // a. If the result of IsWellFormedUnitIdentifier(unit) is false, throw a RangeError exception.\n    invariant(unit === undefined || IsWellFormedUnitIdentifier(unit), 'Invalid unit argument for Intl.NumberFormat()', RangeError);\n    // 10. If style is \"unit\" and unit is undefined, throw a TypeError exception.\n    invariant(style !== 'unit' || unit !== undefined, 'unit cannot be undefined', TypeError);\n    // 11. Let unitDisplay be ? GetOption(options, \"unitDisplay\", \"string\", « \"short\", \"narrow\", \"long\" », \"short\").\n    var unitDisplay = GetOption(options, 'unitDisplay', 'string', ['short', 'narrow', 'long'], 'short');\n    // 12. If style is \"currency\", then\n    if (style === 'currency') {\n        // a. Set internalSlots.[[Currency]] to the result of converting currency to upper case as specified in 6.1.\n        internalSlots.currency = currency.toUpperCase();\n        // b. Set internalSlots.[[CurrencyDisplay]] to currencyDisplay.\n        internalSlots.currencyDisplay = currencyDisplay;\n        // c. Set internalSlots.[[CurrencySign]] to currencySign.\n        internalSlots.currencySign = currencySign;\n    }\n    // 13. If style is \"unit\", then\n    if (style === 'unit') {\n        // a. Set internalSlots.[[Unit]] to unit.\n        internalSlots.unit = unit;\n        // b. Set internalSlots.[[UnitDisplay]] to unitDisplay.\n        internalSlots.unitDisplay = unitDisplay;\n    }\n}\n","import { ResolveLocale } from '@formatjs/intl-localematcher';\nimport { CanonicalizeLocaleList } from '../CanonicalizeLocaleList';\nimport { CoerceOptionsToObject } from '../CoerceOptionsToObject';\nimport { GetOption } from '../GetOption';\nimport { GetStringOrBooleanOption } from '../GetStringOrBooleanOption';\nimport { invariant } from '../utils';\nimport { CurrencyDigits } from './CurrencyDigits';\nimport { SetNumberFormatDigitOptions } from './SetNumberFormatDigitOptions';\nimport { SetNumberFormatUnitOptions } from './SetNumberFormatUnitOptions';\n/**\n * https://tc39.es/ecma402/#sec-initializenumberformat\n */\nexport function InitializeNumberFormat(nf, locales, opts, _a) {\n    var getInternalSlots = _a.getInternalSlots, localeData = _a.localeData, availableLocales = _a.availableLocales, numberingSystemNames = _a.numberingSystemNames, getDefaultLocale = _a.getDefaultLocale, currencyDigitsData = _a.currencyDigitsData;\n    var requestedLocales = CanonicalizeLocaleList(locales);\n    var options = CoerceOptionsToObject(opts);\n    var opt = Object.create(null);\n    var matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    opt.localeMatcher = matcher;\n    var numberingSystem = GetOption(options, 'numberingSystem', 'string', undefined, undefined);\n    if (numberingSystem !== undefined &&\n        numberingSystemNames.indexOf(numberingSystem) < 0) {\n        // 8.a. If numberingSystem does not match the Unicode Locale Identifier type nonterminal,\n        // throw a RangeError exception.\n        throw RangeError(\"Invalid numberingSystems: \".concat(numberingSystem));\n    }\n    opt.nu = numberingSystem;\n    var r = ResolveLocale(Array.from(availableLocales), requestedLocales, opt, \n    // [[RelevantExtensionKeys]] slot, which is a constant\n    ['nu'], localeData, getDefaultLocale);\n    var dataLocaleData = localeData[r.dataLocale];\n    invariant(!!dataLocaleData, \"Missing locale data for \".concat(r.dataLocale));\n    var internalSlots = getInternalSlots(nf);\n    internalSlots.locale = r.locale;\n    internalSlots.dataLocale = r.dataLocale;\n    internalSlots.numberingSystem = r.nu;\n    internalSlots.dataLocaleData = dataLocaleData;\n    SetNumberFormatUnitOptions(internalSlots, options);\n    var style = internalSlots.style;\n    var notation = GetOption(options, 'notation', 'string', ['standard', 'scientific', 'engineering', 'compact'], 'standard');\n    internalSlots.notation = notation;\n    var mnfdDefault;\n    var mxfdDefault;\n    if (style === 'currency' && notation === 'standard') {\n        var currency = internalSlots.currency;\n        var cDigits = CurrencyDigits(currency, { currencyDigitsData: currencyDigitsData });\n        mnfdDefault = cDigits;\n        mxfdDefault = cDigits;\n    }\n    else {\n        mnfdDefault = 0;\n        mxfdDefault = style === 'percent' ? 0 : 3;\n    }\n    SetNumberFormatDigitOptions(internalSlots, options, mnfdDefault, mxfdDefault, notation);\n    var compactDisplay = GetOption(options, 'compactDisplay', 'string', ['short', 'long'], 'short');\n    var defaultUseGrouping = 'auto';\n    if (notation === 'compact') {\n        internalSlots.compactDisplay = compactDisplay;\n        defaultUseGrouping = 'min2';\n    }\n    var useGrouping = GetStringOrBooleanOption(options, 'useGrouping', ['min2', 'auto', 'always'], 'always', false, defaultUseGrouping);\n    internalSlots.useGrouping = useGrouping;\n    var signDisplay = GetOption(options, 'signDisplay', 'string', ['auto', 'never', 'always', 'exceptZero', 'negative'], 'auto');\n    internalSlots.signDisplay = signDisplay;\n    return nf;\n}\n","import { invariant } from './utils';\n/**\n * https://tc39.es/ecma402/#sec-partitionpattern\n * @param pattern\n */\nexport function PartitionPattern(pattern) {\n    var result = [];\n    var beginIndex = pattern.indexOf('{');\n    var endIndex = 0;\n    var nextIndex = 0;\n    var length = pattern.length;\n    while (beginIndex < pattern.length && beginIndex > -1) {\n        endIndex = pattern.indexOf('}', beginIndex);\n        invariant(endIndex > beginIndex, \"Invalid pattern \".concat(pattern));\n        if (beginIndex > nextIndex) {\n            result.push({\n                type: 'literal',\n                value: pattern.substring(nextIndex, beginIndex),\n            });\n        }\n        result.push({\n            type: pattern.substring(beginIndex + 1, endIndex),\n            value: undefined,\n        });\n        nextIndex = endIndex + 1;\n        beginIndex = pattern.indexOf('{', nextIndex);\n    }\n    if (nextIndex < length) {\n        result.push({\n            type: 'literal',\n            value: pattern.substring(nextIndex, length),\n        });\n    }\n    return result;\n}\n","import { LookupSupportedLocales } from '@formatjs/intl-localematcher';\nimport { ToObject } from './262';\nimport { GetOption } from './GetOption';\n/**\n * https://tc39.es/ecma402/#sec-supportedlocales\n * @param availableLocales\n * @param requestedLocales\n * @param options\n */\nexport function SupportedLocales(availableLocales, requestedLocales, options) {\n    var matcher = 'best fit';\n    if (options !== undefined) {\n        options = ToObject(options);\n        matcher = GetOption(options, 'localeMatcher', 'string', ['lookup', 'best fit'], 'best fit');\n    }\n    if (matcher === 'best fit') {\n        return LookupSupportedLocales(Array.from(availableLocales), requestedLocales);\n    }\n    return LookupSupportedLocales(Array.from(availableLocales), requestedLocales);\n}\n","import { __extends } from \"tslib\";\nvar MissingLocaleDataError = /** @class */ (function (_super) {\n    __extends(MissingLocaleDataError, _super);\n    function MissingLocaleDataError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'MISSING_LOCALE_DATA';\n        return _this;\n    }\n    return MissingLocaleDataError;\n}(Error));\nexport function isMissingLocaleDataError(e) {\n    return e.type === 'MISSING_LOCALE_DATA';\n}\n","export var RangePatternType;\n(function (RangePatternType) {\n    RangePatternType[\"startRange\"] = \"startRange\";\n    RangePatternType[\"shared\"] = \"shared\";\n    RangePatternType[\"endRange\"] = \"endRange\";\n})(RangePatternType || (RangePatternType = {}));\n","import Decimal from 'decimal.js';\nimport { ToPrimitive } from './262';\nexport function ToIntlMathematicalValue(input) {\n    var primValue = ToPrimitive(input, 'number');\n    if (typeof primValue === 'bigint') {\n        return new Decimal(primValue);\n    }\n    // IMPL\n    if (primValue === undefined) {\n        return new Decimal(NaN);\n    }\n    if (primValue === true) {\n        return new Decimal(1);\n    }\n    if (primValue === false) {\n        return new Decimal(0);\n    }\n    if (primValue === null) {\n        return new Decimal(0);\n    }\n    try {\n        return new Decimal(primValue);\n    }\n    catch (e) {\n        return new Decimal(NaN);\n    }\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.InitializePluralRules = InitializePluralRules;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar intl_localematcher_1 = require(\"@formatjs/intl-localematcher\");\nfunction InitializePluralRules(pl, locales, options, _a) {\n    var availableLocales = _a.availableLocales, relevantExtensionKeys = _a.relevantExtensionKeys, localeData = _a.localeData, getDefaultLocale = _a.getDefaultLocale, getInternalSlots = _a.getInternalSlots;\n    var requestedLocales = (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales);\n    var opt = Object.create(null);\n    var opts = (0, ecma402_abstract_1.CoerceOptionsToObject)(options);\n    var internalSlots = getInternalSlots(pl);\n    internalSlots.initializedPluralRules = true;\n    var matcher = (0, ecma402_abstract_1.GetOption)(opts, 'localeMatcher', 'string', ['best fit', 'lookup'], 'best fit');\n    opt.localeMatcher = matcher;\n    var r = (0, intl_localematcher_1.ResolveLocale)(availableLocales, requestedLocales, opt, relevantExtensionKeys, localeData, getDefaultLocale);\n    internalSlots.locale = r.locale;\n    internalSlots.type = (0, ecma402_abstract_1.GetOption)(opts, 'type', 'string', ['cardinal', 'ordinal'], 'cardinal');\n    (0, ecma402_abstract_1.SetNumberFormatDigitOptions)(internalSlots, opts, 0, 3, 'standard');\n    return pl;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GetOperands = GetOperands;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-getoperands\n * @param s\n */\nfunction GetOperands(s) {\n    (0, ecma402_abstract_1.invariant)(typeof s === 'string', \"GetOperands should have been called with a string\");\n    var n = (0, ecma402_abstract_1.ToNumber)(s);\n    (0, ecma402_abstract_1.invariant)(n.isFinite(), 'n should be finite');\n    var dp = s.indexOf('.');\n    var iv;\n    var f;\n    var v;\n    var fv = '';\n    if (dp === -1) {\n        iv = n;\n        f = ecma402_abstract_1.ZERO;\n        v = 0;\n    }\n    else {\n        iv = s.slice(0, dp);\n        fv = s.slice(dp, s.length);\n        f = (0, ecma402_abstract_1.ToNumber)(fv);\n        v = fv.length;\n    }\n    var i = (0, ecma402_abstract_1.ToNumber)(iv).abs();\n    var w;\n    var t;\n    if (!f.isZero()) {\n        var ft = fv.replace(/0+$/, '');\n        w = ft.length;\n        t = (0, ecma402_abstract_1.ToNumber)(ft);\n    }\n    else {\n        w = 0;\n        t = ecma402_abstract_1.ZERO;\n    }\n    return {\n        Number: n,\n        IntegerDigits: i.toNumber(),\n        NumberOfFractionDigits: v,\n        NumberOfFractionDigitsWithoutTrailing: w,\n        FractionDigits: f.toNumber(),\n        FractionDigitsWithoutTrailing: t.toNumber(),\n    };\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ResolvePlural = ResolvePlural;\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar GetOperands_1 = require(\"./GetOperands\");\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-resolveplural\n * @param pl\n * @param n\n * @param PluralRuleSelect Has to pass in bc it's implementation-specific\n */\nfunction ResolvePlural(pl, n, _a) {\n    var getInternalSlots = _a.getInternalSlots, PluralRuleSelect = _a.PluralRuleSelect;\n    var internalSlots = getInternalSlots(pl);\n    (0, ecma402_abstract_1.invariant)((0, ecma402_abstract_1.Type)(internalSlots) === 'Object', 'pl has to be an object');\n    (0, ecma402_abstract_1.invariant)('initializedPluralRules' in internalSlots, 'pluralrules must be initialized');\n    if (!n.isFinite()) {\n        return 'other';\n    }\n    var locale = internalSlots.locale, type = internalSlots.type;\n    var res = (0, ecma402_abstract_1.FormatNumericToString)(internalSlots, n);\n    var s = res.formattedString;\n    var operands = (0, GetOperands_1.GetOperands)(s);\n    return PluralRuleSelect(locale, type, n, operands);\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = getInternalSlots;\nvar internalSlotMap = new WeakMap();\nfunction getInternalSlots(x) {\n    var internalSlots = internalSlotMap.get(x);\n    if (!internalSlots) {\n        internalSlots = Object.create(null);\n        internalSlotMap.set(x, internalSlots);\n    }\n    return internalSlots;\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.PluralRules = void 0;\nvar tslib_1 = require(\"tslib\");\nvar ecma402_abstract_1 = require(\"@formatjs/ecma402-abstract\");\nvar InitializePluralRules_1 = require(\"./abstract/InitializePluralRules\");\nvar ResolvePlural_1 = require(\"./abstract/ResolvePlural\");\nvar get_internal_slots_1 = tslib_1.__importDefault(require(\"./get_internal_slots\"));\nfunction validateInstance(instance, method) {\n    if (!(instance instanceof PluralRules)) {\n        throw new TypeError(\"Method Intl.PluralRules.prototype.\".concat(method, \" called on incompatible receiver \").concat(String(instance)));\n    }\n}\n/**\n * http://ecma-international.org/ecma-402/7.0/index.html#sec-pluralruleselect\n * @param locale\n * @param type\n * @param _n\n * @param param3\n */\nfunction PluralRuleSelect(locale, type, _n, _a) {\n    var IntegerDigits = _a.IntegerDigits, NumberOfFractionDigits = _a.NumberOfFractionDigits, FractionDigits = _a.FractionDigits;\n    return PluralRules.localeData[locale].fn(NumberOfFractionDigits\n        ? \"\".concat(IntegerDigits, \".\").concat(FractionDigits)\n        : IntegerDigits, type === 'ordinal');\n}\nvar PluralRules = /** @class */ (function () {\n    function PluralRules(locales, options) {\n        // test262/test/intl402/RelativeTimeFormat/constructor/constructor/newtarget-undefined.js\n        // Cannot use `new.target` bc of IE11 & TS transpiles it to something else\n        var newTarget = this && this instanceof PluralRules ? this.constructor : void 0;\n        if (!newTarget) {\n            throw new TypeError(\"Intl.PluralRules must be called with 'new'\");\n        }\n        return (0, InitializePluralRules_1.InitializePluralRules)(this, locales, options, {\n            availableLocales: PluralRules.availableLocales,\n            relevantExtensionKeys: PluralRules.relevantExtensionKeys,\n            localeData: PluralRules.localeData,\n            getDefaultLocale: PluralRules.getDefaultLocale,\n            getInternalSlots: get_internal_slots_1.default,\n        });\n    }\n    PluralRules.prototype.resolvedOptions = function () {\n        validateInstance(this, 'resolvedOptions');\n        var opts = Object.create(null);\n        var internalSlots = (0, get_internal_slots_1.default)(this);\n        opts.locale = internalSlots.locale;\n        opts.type = internalSlots.type;\n        [\n            'minimumIntegerDigits',\n            'minimumFractionDigits',\n            'maximumFractionDigits',\n            'minimumSignificantDigits',\n            'maximumSignificantDigits',\n        ].forEach(function (field) {\n            var val = internalSlots[field];\n            if (val !== undefined) {\n                opts[field] = val;\n            }\n        });\n        opts.pluralCategories = tslib_1.__spreadArray([], PluralRules.localeData[opts.locale].categories[opts.type], true);\n        return opts;\n    };\n    PluralRules.prototype.select = function (val) {\n        var pr = this;\n        validateInstance(pr, 'select');\n        var n = (0, ecma402_abstract_1.ToNumber)(val);\n        return (0, ResolvePlural_1.ResolvePlural)(pr, n, { getInternalSlots: get_internal_slots_1.default, PluralRuleSelect: PluralRuleSelect });\n    };\n    PluralRules.prototype.toString = function () {\n        return '[object Intl.PluralRules]';\n    };\n    PluralRules.supportedLocalesOf = function (locales, options) {\n        return (0, ecma402_abstract_1.SupportedLocales)(PluralRules.availableLocales, (0, ecma402_abstract_1.CanonicalizeLocaleList)(locales), options);\n    };\n    PluralRules.__addLocaleData = function () {\n        var data = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            data[_i] = arguments[_i];\n        }\n        for (var _a = 0, data_1 = data; _a < data_1.length; _a++) {\n            var _b = data_1[_a], d = _b.data, locale = _b.locale;\n            PluralRules.localeData[locale] = d;\n            PluralRules.availableLocales.add(locale);\n            if (!PluralRules.__defaultLocale) {\n                PluralRules.__defaultLocale = locale;\n            }\n        }\n    };\n    PluralRules.getDefaultLocale = function () {\n        return PluralRules.__defaultLocale;\n    };\n    PluralRules.localeData = {};\n    PluralRules.availableLocales = new Set();\n    PluralRules.__defaultLocale = '';\n    PluralRules.relevantExtensionKeys = [];\n    PluralRules.polyfilled = true;\n    return PluralRules;\n}());\nexports.PluralRules = PluralRules;\ntry {\n    // IE11 does not have Symbol\n    if (typeof Symbol !== 'undefined') {\n        Object.defineProperty(PluralRules.prototype, Symbol.toStringTag, {\n            value: 'Intl.PluralRules',\n            writable: false,\n            enumerable: false,\n            configurable: true,\n        });\n    }\n    try {\n        // https://github.com/tc39/test262/blob/master/test/intl402/PluralRules/length.js\n        Object.defineProperty(PluralRules, 'length', {\n            value: 0,\n            writable: false,\n            enumerable: false,\n            configurable: true,\n        });\n    }\n    catch (error) {\n        // IE 11 sets Function.prototype.length to be non-configurable which will cause the\n        // above Object.defineProperty to throw an error.\n    }\n    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/length.js\n    Object.defineProperty(PluralRules.prototype.constructor, 'length', {\n        value: 0,\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n    // https://github.com/tc39/test262/blob/master/test/intl402/RelativeTimeFormat/constructor/supportedLocalesOf/length.js\n    Object.defineProperty(PluralRules.supportedLocalesOf, 'length', {\n        value: 1,\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n    Object.defineProperty(PluralRules, 'name', {\n        value: 'PluralRules',\n        writable: false,\n        enumerable: false,\n        configurable: true,\n    });\n}\ncatch (ex) {\n    // Meta fixes for test262\n}\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _1 = require(\"./\");\nObject.defineProperty(Intl, 'PluralRules', {\n    value: _1.PluralRules,\n    writable: true,\n    enumerable: false,\n    configurable: true,\n});\n"],"names":["CanonicalizeLocaleList","locales","CanonicalizeTimeZoneName","tz","_a","zoneNames","uppercaseLinks","uppercasedTz","uppercasedZones","all","z","ianaTimeZone","EXP_LIMIT","MAX_DIGITS","NUMERALS","LN10","PI","DEFAULTS","inexact","quadrant","external","decimalError","invalidArgument","precisionLimitExceeded","cryptoUnavailable","tag","mathfloor","mathpow","isBinary","isHex","isOctal","isDecimal","BASE","LOG_BASE","MAX_SAFE_INTEGER","LN10_PRECISION","PI_PRECISION","P","x","finalise","min","max","k","Ctor","y","i","j","xdL","ydL","xd","yd","xs","ys","pr","rm","cosine","toLessThanHalfPi","m","r","rep","s","sd","t","t3","t3plusx","digitsToString","divide","w","d","n","len","one","tinyPow","taylorSeries","cosh2_x","d8","sinh2_x","d5","d16","d20","getPi","wpr","xsd","halfPi","px","x2","base","isBase10","denominator","inf","num","arg","guard","naturalLogarithm","getLn10","checkRoundingDigits","e","xe","xLTy","getBase10Exponent","q","naturalExponential","carry","getPrecision","sine","rL","toStringBinary","dp","checkInt32","str","finiteToString","maxD","d0","d1","d2","n0","n1","yn","intPow","ws","indexOfLastWord","getZeroString","repeating","di","rd","convertBase","baseIn","baseOut","arr","arrL","strL","cos2x","multiplyInteger","temp","compare","a","b","aL","bL","subtract","cmp","logBase","more","prod","prodL","qd","rem","remL","rem0","xi","xL","yd0","yL","yz","sign","isTruncated","digits","roundUp","xdi","out","isExp","nonFiniteToString","zs","truncate","isOdd","maxOrMin","args","pow","sum","c","c0","numerator","x1","parseDecimal","parseOther","divisor","isFloat","p","Decimal","sin2_x","isHyperbolic","u","isNeg","pi","abs","acos","acosh","add","asin","asinh","atan","atanh","atan2","cbrt","ceil","clamp","config","obj","v","useDefaults","ps","cos","cosh","clone","isDecimalInstance","div","exp","floor","hypot","ln","log","log10","log2","mod","mul","random","round","sin","sinh","sqrt","sub","tan","tanh","trunc","ZERO","NEGATIVE_ZERO","repeat","times","setInternalSlot","map","pl","field","value","slots","setMultiInternalSlots","props","_i","getInternalSlot","getMultiInternalSlots","fields","f","isLiteralPart","patternPart","defineProperty","target","name","createDataProperty","invariant","condition","message","Err","createMemoizedNumberFormat","memoize","__spreadArray","strategies","createMemoizedDateTimeFormat","createMemoizedPluralRules","createMemoizedLocale","createMemoizedListFormat","ToString","o","ToNumber","primValue","ToPrimitive","ToInteger","number","integer","TimeClip","time","ToObject","SameValue","ArrayCreate","HasOwnProperty","prop","Type","MS_PER_DAY","Day","WeekDay","DayFromYear","TimeFromYear","YearFromTime","DaysInYear","DayWithinYear","InLeapYear","MonthFromTime","dwy","leap","DateFromTime","mft","HOURS_PER_DAY","MINUTES_PER_HOUR","SECONDS_PER_MINUTE","MS_PER_SECOND","MS_PER_MINUTE","MS_PER_HOUR","HourFromTime","MinFromTime","SecFromTime","IsCallable","fn","OrdinaryHasInstance","C","O","internalSlots","BC","msFromTime","OrdinaryToPrimitive","hint","methodNames","methodNames_1","name_1","method","result","input","preferredType","exoticToPrim","CoerceOptionsToObject","options","DefaultNumberOption","inputVal","fallback","val","GetNumberOption","property","minimum","maximum","GetOption","opts","type","values","GetOptionsObject","GetStringOrBooleanOption","trueValue","falsyValue","valueBoolean","SANCTIONED_UNITS","removeUnitNamespace","unit","SIMPLE_UNITS","IsSanctionedSimpleUnitIdentifier","unitIdentifier","IsValidTimeZoneName","zoneNamesFromData","linkNames","linkName","toUpperCase","_","NOT_A_Z_REGEX","IsWellFormedCurrencyCode","currency","toLowerCase","IsWellFormedUnitIdentifier","units","ApplyUnsignedRoundingMode","r1","r2","unsignedRoundingMode","cardinality","PART_TYPES_TO_COLLAPSE","CollapseNumberRange","numberFormat","getInternalSlots","symbols","rangeSignRegex","rangeSignIndex","prefixSignParts","newResult","suffixSignParts","ComputeExponentForMagnitude","magnitude","notation","dataLocaleData","numberingSystem","thousands","compactDisplay","style","currencyDisplay","thresholdMap","decimal","thresholds","magnitudeKey","compactPattern","negativeMapping","positiveMapping","GetUnsignedRoundingMode","roundingMode","isNegative","ToRawFixedFn","findN1R1","roundingIncrement","nx","findN2R2","n2","ToRawFixed","minFraction","maxFraction","_b","xFinal","int","cut","findN1E1R1","maxN1","minN1","maxE1","currentE1","currentN1","currentR1","findN2E2R2","maxN2","minN2","minE2","currentE2","currentN2","currentR2","ToRawPrecision","minPrecision","maxPrecision","e1","e2","FormatNumericToString","intlObject","_x","roundingType","sResult","fResult","string","minInteger","forwardZeros","ComputeExponent","exponent","formatNumberResult","newMagnitude","CurrencyDigits","currencyDigitsData","S_UNICODE_REGEX","digitMapping","CARET_S_UNICODE_REGEX","S_DOLLAR_UNICODE_REGEX","CLDR_NUMBER_PATTERN","formatToParts","numberResult","data","defaultNumberingSystem","compactNumberPattern","getCompactDisplayPattern","nonNameCurrencyPart","byCurrencyDisplay","numberPattern","decimalData","getPatternForSign","currencyData","percentPattern","decimalNumberPattern","afterCurrency","beforeCurrency","numberPatternParts","numberParts","numberPatternParts_1","part","partitionNumberIntoParts","unitPattern","unitName","currencyNameData","selectPlural","unitPatternParts","unitPatternParts_1","unitDisplay","unitData","_c","numeratorUnit","denominatorUnit","numeratorUnitPattern","perUnitPattern","perPattern","denominatorPattern","_d","_e","interpolateMatch","useGrouping","digitReplacementTable","digit","decimalSepIndex","fraction","shouldUseGrouping","groupSepSymbol","groups","integerNumberPattern","patternGroups","primaryGroupingSize","secondaryGroupingSize","integerGroup","decimalSepSymbol","exponentResult","pattern","zeroPattern","negativePattern","roundedNumber","byNumberingSystem","compactPluralRules","byCompactDisplay","compactPlaralRule","rules","FormatApproximately","approximatelySign","PartitionNumberPattern","signDisplay","FormatNumeric","parts","PartitionNumberRangePattern","xResult","yResult","appxResult","el","rangeSeparator","FormatNumericRange","FormatNumericRangeToParts","index","FormatNumericToParts","nf","implDetails","parts_1","VALID_ROUNDING_INCREMENTS","SetNumberFormatDigitOptions","mnfdDefault","mxfdDefault","mnid","mnfd","mxfd","mnsd","mxsd","roundingPriority","trailingZeroDisplay","hasSd","hasFd","needSd","needFd","SetNumberFormatUnitOptions","currencySign","InitializeNumberFormat","localeData","availableLocales","numberingSystemNames","getDefaultLocale","requestedLocales","opt","matcher","ResolveLocale","cDigits","defaultUseGrouping","PartitionPattern","beginIndex","endIndex","nextIndex","length","SupportedLocales","LookupSupportedLocales","_super","__extends","MissingLocaleDataError","_this","isMissingLocaleDataError","RangePatternType","ToIntlMathematicalValue","InitializePluralRules_1","InitializePluralRules","ecma402_abstract_1","require$$0","intl_localematcher_1","require$$1","relevantExtensionKeys","GetOperands_1","GetOperands","iv","fv","ft","ResolvePlural_1","ResolvePlural","PluralRuleSelect","locale","res","operands","get_internal_slots","internalSlotMap","intlPluralrules","tslib_1","require$$2","require$$3","get_internal_slots_1","require$$4","validateInstance","instance","PluralRules","_n","IntegerDigits","NumberOfFractionDigits","FractionDigits","newTarget","data_1","polyfillForce","_1"],"mappings":"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KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,SAAY,CACR,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,QAAW,CACP,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,SAAY,CACR,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,SAAY,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,QAAW,CACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,SAAY,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,SAAY,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,SAAY,CACR,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,SAAY,CACR,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,SAAY,CACR,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,QAAW,CACP,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,QAAW,CACP,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,GACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,EACI,KAAQ,CACJ,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,IACR,CACA,ECrwBIC,GAAwB,IAAI,OAAO,IAAI,OAAOF,GAAgB,MAAM,CAAC,EAErEG,GAAyB,IAAI,OAAO,GAAG,OAAOH,GAAgB,OAAQ,GAAG,CAAC,EAC1EI,GAAsB,uBACX,SAASC,GAAcC,EAAcC,EAAMnN,EAAIuF,EAAS,CACnE,IAAIzT,EACAsJ,EAAO8R,EAAa,KAAMX,EAAWW,EAAa,SAAUvE,EAAYuE,EAAa,UACrFtE,EAAWrD,EAAQ,SAAU0D,EAAQ1D,EAAQ,MAAOuD,EAAkBvD,EAAQ,gBAC9E6H,EAAyBD,EAAK,QAAQ,GAAG,CAAC,EAG1CE,EAAuB,KACvBzE,IAAa,WAAaD,IAC1B0E,EAAuBC,GAAyBJ,EAAclN,EAAImN,EAAMlE,EAAO1D,EAAQ,eAAgBA,EAAQ,gBAAiBuD,CAAe,GAGnJ,IAAIyE,EACJ,GAAItE,IAAU,YAAc1D,EAAQ,kBAAoB,OAAQ,CAC5D,IAAIiI,EAAoBL,EAAK,WAAW5H,EAAQ,QAAQ,EACxD,GAAIiI,EACA,OAAQjI,EAAQ,gBAAe,CAC3B,IAAK,OACDgI,EAAsBhI,EAAQ,SAC9B,MACJ,IAAK,SACDgI,EAAsBC,EAAkB,OACxC,MACJ,QACID,EAAsBC,EAAkB,OACxC,KACpB,MAIYD,EAAsBhI,EAAQ,QAE1C,CACI,IAAIkI,EACJ,GAAKJ,EAyBDI,EAAgBJ,UAtBZpE,IAAU,WACVA,IAAU,QACTA,IAAU,YAAc1D,EAAQ,kBAAoB,OAAS,CAE9D,IAAImI,EAAcP,EAAK,QAAQ,QAAQrE,CAAe,GAClDqE,EAAK,QAAQ,QAAQC,CAAsB,EAC/CK,EAAgBE,GAAkBD,EAAY,SAAUtS,CAAI,CACxE,SACiB6N,IAAU,WAAY,CAC3B,IAAI2E,EAAeT,EAAK,QAAQ,SAASrE,CAAe,GACpDqE,EAAK,QAAQ,SAASC,CAAsB,EAEhDK,EAAgBE,GAAkBC,EAAarI,EAAQ,YAAY,EAAGnK,CAAI,CACtF,KACa,CAED,IAAIyS,EAAiBV,EAAK,QAAQ,QAAQrE,CAAe,GACrDqE,EAAK,QAAQ,QAAQC,CAAsB,EAC/CK,EAAgBE,GAAkBE,EAAgBzS,CAAI,CAClE,CAOI,IAAI0S,EAAuBd,GAAoB,KAAKS,CAAa,EAAE,CAAC,EAQpE,GAJAA,EAAgBA,EACX,QAAQT,GAAqB,KAAK,EAClC,QAAQ,SAAU,IAAI,EAEvB/D,IAAU,YAAc1D,EAAQ,kBAAoB,OAAQ,CAC5D,IAAIqI,EAAeT,EAAK,QAAQ,SAASrE,CAAe,GACpDqE,EAAK,QAAQ,SAASC,CAAsB,EAa5CW,EAAgBH,EAAa,gBAAgB,mBAC7CG,GAAiB,CAAChB,GAAuB,KAAKQ,CAAmB,IACjEE,EAAgBA,EAAc,QAAQ,OAAQ,IAAS,OAAOM,EAAe,KAAK,CAAC,GAEvF,IAAIC,EAAiBJ,EAAa,gBAAgB,oBAC9CI,GAAkB,CAAClB,GAAsB,KAAKS,CAAmB,IACjEE,EAAgBA,EAAc,QAAQ,OAAQ,MAAM,OAAOO,EAAgB,GAAQ,CAAC,EAEhG,CAMI,QAJIC,EAAqBR,EAAc,MAAM,6BAA6B,EACtES,EAAc,CAAA,EACd9F,EAAU+E,EAAK,QAAQ,QAAQrE,CAAe,GAC9CqE,EAAK,QAAQ,QAAQC,CAAsB,EACtC9M,EAAK,EAAG6N,EAAuBF,EAAoB3N,EAAK6N,EAAqB,OAAQ7N,IAAM,CAChG,IAAI8N,EAAOD,EAAqB7N,CAAE,EAClC,GAAK8N,EAGL,OAAQA,EAAI,CACR,IAAK,MAAO,CAERF,EAAY,KAAK,MAAMA,EAAaG,GAAyBjG,EAAS8E,EAActE,EAAU2D,EAAUzD,EAExG,CAACuE,KAA0Bvb,EAAKyT,EAAQ,eAAiB,MAAQzT,IAAO,OAASA,EAAK,IAAOgc,EAAsB7E,EAAO1D,EAAQ,kBAAmBmE,GAAwBnE,EAAQ,aAAcnK,IAAS,EAAE,CAAC,CAAC,EAChN,KAChB,CACY,IAAK,IACD8S,EAAY,KAAK,CAAE,KAAM,YAAa,MAAO9F,EAAQ,UAAW,EAChE,MACJ,IAAK,IACD8F,EAAY,KAAK,CAAE,KAAM,WAAY,MAAO9F,EAAQ,SAAU,EAC9D,MACJ,IAAK,IACD8F,EAAY,KAAK,CAAE,KAAM,cAAe,MAAO9F,EAAQ,YAAa,EACpE,MACJ,IAAK,IAED8F,EAAY,KAAK,CAAE,KAAM,WAAY,MAAOX,EAAqB,EACjE,MACJ,QACQ,QAAQ,KAAKa,CAAI,EACjBF,EAAY,KAAK,CACb,KAAM,UACN,MAAOE,EAAK,UAAU,EAAGA,EAAK,OAAS,CAAC,CAChE,CAAqB,EAIDF,EAAY,KAAK,CAAE,KAAM,UAAW,MAAOE,EAAM,EAErD,KAChB,CACA,CAII,OAAQnF,EAAK,CACT,IAAK,WAED,GAAI1D,EAAQ,kBAAoB,OAAQ,CACpC,IAAI+I,GAAenB,EAAK,QAAQ,SAASrE,CAAe,GACpDqE,EAAK,QAAQ,SAASC,CAAsB,GAAG,YAE/CmB,EAAW,OACXC,EAAmBrB,EAAK,WAAW5H,EAAQ,QAAQ,EACnDiJ,EACAD,EAAWE,GAAazO,EAAIkN,EAAa,cACpC,MAAMtQ,EAAQ,IAAI,GAAI2P,CAAQ,CAAC,EAC/B,SAAQ,EAAIiC,EAAiB,WAAW,EAI7CD,EAAWhJ,EAAQ,SAKvB,QAFImJ,EAAmBJ,EAAY,MAAM,aAAa,EAClDpJ,EAAS,CAAA,EACJoF,GAAK,EAAGqE,GAAqBD,EAAkBpE,GAAKqE,GAAmB,OAAQrE,KAAM,CAC1F,IAAI8D,EAAOO,GAAmBrE,EAAE,EAChC,OAAQ8D,EAAI,CACR,IAAK,MACDlJ,EAAO,KAAK,MAAMA,EAAQgJ,CAAW,EACrC,MACJ,IAAK,MACDhJ,EAAO,KAAK,CAAE,KAAM,WAAY,MAAOqJ,EAAU,EACjD,MACJ,QACQH,GACAlJ,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOkJ,EAAM,EAEhD,KAC5B,CACA,CACgB,OAAOlJ,CACvB,KAEgB,QAAOgJ,EAGf,IAAK,OAAQ,CACT,IAAIvH,GAAOpB,EAAQ,KAAMqJ,GAAcrJ,EAAQ,YAC3CsJ,GAAW1B,EAAK,MAAM,OAAOxG,EAAI,EACjC2H,EAAc,OAClB,GAAIO,GAEAP,EAAcG,GAAazO,EAAIkN,EAAa,cACvC,MAAMtQ,EAAQ,IAAI,GAAI2P,CAAQ,CAAC,EAC/B,SAAQ,EAAIY,EAAK,MAAM,OAAOxG,EAAI,EAAEiI,EAAW,CAAC,MAEpD,CAID,IAAIE,GAAKnI,GAAK,MAAM,OAAO,EAAGoI,GAAgBD,GAAG,CAAC,EAAGE,GAAkBF,GAAG,CAAC,EAC3ED,GAAW1B,EAAK,MAAM,OAAO4B,EAAa,EAC1C,IAAIE,GAAuBR,GAAazO,EAAIkN,EAAa,cACpD,MAAMtQ,EAAQ,IAAI,GAAI2P,CAAQ,CAAC,EAC/B,SAAQ,EAAIY,EAAK,MAAM,OAAO4B,EAAa,EAAEH,EAAW,CAAC,EAC1DM,GAAiB/B,EAAK,MAAM,OAAO6B,EAAe,EAAE,QAAQJ,EAAW,EAC3E,GAAIM,GAEAZ,EAAcY,GAAe,QAAQ,MAAOD,EAAoB,MAE/D,CAGD,IAAIE,GAAahC,EAAK,MAAM,SAAS,IAAIyB,EAAW,EAChDQ,GAAqBX,GAAazO,EAAI,EAAGmN,EAAK,MAAM,OAAO6B,EAAe,EAAEJ,EAAW,CAAC,EAC5FN,EAAcA,EAAca,GACvB,QAAQ,MAAOF,EAAoB,EACnC,QAAQ,MAAOG,GAAmB,QAAQ,MAAO,EAAE,CAAC,CAC7E,CACA,CAGY,QAFIlK,EAAS,CAAA,EAEJmK,GAAK,EAAGC,GAAKhB,EAAY,MAAM,eAAe,EAAGe,GAAKC,GAAG,OAAQD,KAAM,CAC5E,IAAIjB,EAAOkB,GAAGD,EAAE,EACZE,GAAmB,oBAAoB,KAAKnB,CAAI,EAChDmB,IAEIA,GAAiB,CAAC,GAClBrK,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOqK,GAAiB,CAAC,EAAG,EAG/DrK,EAAO,KAAK,MAAMA,EAAQgJ,CAAW,EAEjCqB,GAAiB,CAAC,GAClBrK,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOqK,GAAiB,CAAC,EAAG,GAG1DnB,GACLlJ,EAAO,KAAK,CAAE,KAAM,OAAQ,MAAOkJ,EAAM,CAE7D,CACY,OAAOlJ,CACnB,CACQ,QACI,OAAOgJ,CACnB,CAEA,CAGA,SAASG,GAAyBjG,EAAS8E,EAActE,EAAU2D,EAAUzD,EAAiB0G,EAQ9F1B,EAAsB7E,EAAOc,EAAmBjC,EAAsB,CAClE,IAAI5C,EAAS,CAAA,EAETnP,EAAImX,EAAa,gBAAiBlZ,EAAIkZ,EAAa,cACvD,GAAIlZ,EAAE,QACF,MAAO,CAAC,CAAE,KAAM,MAAO,MAAO+B,CAAC,CAAE,EAEhC,GAAI,CAAC/B,EAAE,WACR,MAAO,CAAC,CAAE,KAAM,WAAY,MAAO+B,CAAC,CAAE,EAE1C,IAAI0Z,EAAwB5C,GAAa/D,CAAe,EACpD2G,IACA1Z,EAAIA,EAAE,QAAQ,MAAO,SAAU2Z,EAAO,CAAE,OAAOD,EAAsB,CAACC,CAAK,GAAKA,CAAM,CAAE,GAI5F,IAAIC,EAAkB5Z,EAAE,QAAQ,GAAG,EAC/BqM,EACAwN,EACAD,EAAkB,GAClBvN,EAAUrM,EAAE,MAAM,EAAG4Z,CAAe,EACpCC,EAAW7Z,EAAE,MAAM4Z,EAAkB,CAAC,GAGtCvN,EAAUrM,EAQd,IAAI8Z,EAAoB,GAUxB,GATIL,IAAgB,SAChBK,EAAoB,GAEfL,IAAgB,OACrBK,EAAoB7b,EAAE,qBAAqB,GAAK,GAE3Cwb,IAAgB,QAAUA,KAC/BK,EAAoBjH,IAAa,WAAa5U,EAAE,qBAAqB,GAAK,GAE1E6b,EAAmB,CAGnB,IAAIC,EAAiB7G,IAAU,YAAcb,EAAQ,eAAiB,KAChEA,EAAQ,cACRA,EAAQ,MACV2H,EAAS,CAAA,EAMTC,EAAuBlC,EAAqB,MAAM,GAAG,EAAE,CAAC,EACxDmC,EAAgBD,EAAqB,MAAM,GAAG,EAC9CE,EAAsB,EACtBC,EAAwB,EACxBF,EAAc,OAAS,IACvBC,EAAsBD,EAAcA,EAAc,OAAS,CAAC,EAAE,QAE9DA,EAAc,OAAS,IACvBE,EAAwBF,EAAcA,EAAc,OAAS,CAAC,EAAE,QAEpE,IAAI1b,EAAI6N,EAAQ,OAAS8N,EACzB,GAAI3b,EAAI,EAAG,CAKP,IAHAwb,EAAO,KAAK3N,EAAQ,MAAM7N,EAAGA,EAAI2b,CAAmB,CAAC,EAGhD3b,GAAK4b,EAAuB5b,EAAI,EAAGA,GAAK4b,EACzCJ,EAAO,KAAK3N,EAAQ,MAAM7N,EAAGA,EAAI4b,CAAqB,CAAC,EAE3DJ,EAAO,KAAK3N,EAAQ,MAAM,EAAG7N,EAAI4b,CAAqB,CAAC,CACnE,MAEYJ,EAAO,KAAK3N,CAAO,EAEvB,KAAO2N,EAAO,OAAS,GAAG,CACtB,IAAIK,EAAeL,EAAO,IAAG,EAC7B7K,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOkL,EAAc,EAChDL,EAAO,OAAS,GAChB7K,EAAO,KAAK,CAAE,KAAM,QAAS,MAAO4K,EAAgB,CAEpE,CACA,MAEQ5K,EAAO,KAAK,CAAE,KAAM,UAAW,MAAO9C,EAAS,EAGnD,GAAIwN,IAAa,OAAW,CACxB,IAAIS,EAAmBpH,IAAU,YAAcb,EAAQ,iBAAmB,KACpEA,EAAQ,gBACRA,EAAQ,QACdlD,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOmL,CAAgB,EAAI,CAAE,KAAM,WAAY,MAAOT,CAAQ,CAAE,CACvG,CACI,IAAKhH,IAAa,cAAgBA,IAAa,gBAC3C5U,EAAE,SAAQ,EAAI,CACdkR,EAAO,KAAK,CAAE,KAAM,oBAAqB,MAAOkD,EAAQ,YAAa,EACjEmE,EAAW,IACXrH,EAAO,KAAK,CAAE,KAAM,oBAAqB,MAAOkD,EAAQ,UAAW,EACnEmE,EAAW,CAACA,GAEhB,IAAI+D,EAAiBnG,GAAW,IAAIvN,EAAQ2P,CAAQ,EAAG,EAAG,EAAGxC,EAAmBjC,CAAoB,EACpG5C,EAAO,KAAK,CACR,KAAM,kBACN,MAAOoL,EAAe,eAClC,CAAS,CACT,CACI,OAAOpL,CACX,CACA,SAASyI,GAAkB4C,EAASnV,EAAM,CAClCmV,EAAQ,QAAQ,GAAG,EAAI,IACvBA,EAAU,GAAG,OAAOA,EAAS,IAAI,EAAE,OAAOA,CAAO,GAErD,IAAIze,EAAKye,EAAQ,MAAM,GAAG,EAAGC,EAAc1e,EAAG,CAAC,EAAG2e,EAAkB3e,EAAG,CAAC,EACxE,OAAQsJ,EAAI,CACR,IAAK,GACD,OAAOoV,EACX,IAAK,GACD,OAAOC,EACX,QACI,OAAOA,EAAgB,QAAQ,GAAG,GAAK,EACjCA,EAAgB,QAAQ,KAAM,GAAG,EACjC,IAAI,OAAOD,CAAW,CACxC,CACA,CAQA,SAASlD,GAAyBJ,EAAclN,EAAImN,EAAMlE,EAAOD,EAAgBE,EAAiBJ,EAAiB,CAC/G,IAAIhX,EACA4e,EAAgBxD,EAAa,cAAe9R,EAAO8R,EAAa,KAAMvE,EAAYuE,EAAa,UAC/F5D,EAAe,OAAO,KAAK,IAAI,GAAIX,CAAS,CAAC,EAC7CyE,EAAyBD,EAAK,QAAQ,GAAG,CAAC,EAC1CoD,EACJ,GAAItH,IAAU,YAAcC,IAAoB,OAAQ,CACpD,IAAIyH,EAAoBxD,EAAK,QAAQ,SACjCS,EAAe+C,EAAkB7H,CAAe,GAChD6H,EAAkBvD,CAAsB,EAExCwD,GAAsB9e,EAAK8b,EAAa,SAAW,MAAQ9b,IAAO,OAAS,OAASA,EAAGwX,CAAY,EACvG,GAAI,CAACsH,EACD,OAAO,KAEXL,EAAU9B,GAAazO,EAAI0Q,EAAc,SAAQ,EAAIE,CAAkB,CAC/E,KACS,CACD,IAAID,EAAoBxD,EAAK,QAAQ,QACjC0D,EAAmBF,EAAkB7H,CAAe,GACpD6H,EAAkBvD,CAAsB,EACxC0D,EAAoBD,EAAiB7H,CAAc,EAAEM,CAAY,EACrE,GAAI,CAACwH,EACD,OAAO,KAEXP,EAAU9B,GAAazO,EAAI0Q,EAAc,SAAQ,EAAII,CAAiB,CAC9E,CAII,OAAIP,IAAY,IACL,MAEXA,EAAU5C,GAAkB4C,EAASnV,CAAI,EAEpC,QAAQ,oBAAqB,QAAQ,EAErC,QAAQ,KAAM,GAAG,EACfmV,EACX,CACA,SAAS9B,GAAazO,EAAIhM,EAAG+c,EAAO,CAChC,OAAOA,EAAM/Q,EAAG,OAAOhM,CAAC,CAAC,GAAK+c,EAAM,KACxC,CC3bO,SAASC,GAAoBvM,EAAeS,EAAQ,CACvD,IAAIkD,EAAU3D,EAAc,eAAe,QAAQ,QAAQA,EAAc,eAAe,EACpFwM,EAAoB7I,EAAQ,kBAChC,OAAAlD,EAAO,KAAK,CAAE,KAAM,oBAAqB,MAAO+L,EAAmB,EAC5D/L,CACX,CCAO,SAASgM,GAAuBzM,EAAesH,EAAI,CACtD,IAAIja,EACAkC,EAAI+X,EAEJpD,EAAY,EAEZ3I,EAAKyE,EAAc,GAAIoE,EAAiBpE,EAAc,eAAgBqE,EAAkBrE,EAAc,gBAEtG2D,EAAUS,EAAe,QAAQ,QAAQC,CAAe,GACxDD,EAAe,QAAQ,QAAQA,EAAe,QAAQ,GAAG,CAAC,CAAC,EAE3D0D,EAAW,EAEXxW,EAEJ,GAAI/B,EAAE,QAEF+B,EAAIqS,EAAQ,YAEP,CAACpU,EAAE,WAGR+B,EAAIqS,EAAQ,aAEX,CAEIpU,EAAE,WAEHiN,EAAUjN,EAAE,SAAQ,EAAI,oCAAoC,EAExDyQ,EAAc,OAAS,YACvBzQ,EAAIA,EAAE,MAAM,GAAG,GAInBlC,EAAKwa,GAAgB7H,EAAezQ,CAAC,EAAGuY,EAAWza,EAAG,CAAC,EAEvD6W,EAAY7W,EAAG,CAAC,EAEhBkC,EAAIA,EAAE,MAAM4I,EAAQ,IAAI,GAAI,CAAC2P,CAAQ,CAAC,GAG1C,IAAIC,EAAqBX,GAAsBpH,EAAezQ,CAAC,EAE/D+B,EAAIyW,EAAmB,gBAEvBxY,EAAIwY,EAAmB,aAC/B,CAEI,IAAIpR,EAEA+V,EAAc1M,EAAc,YAChC,OAAQ0M,EAAW,CACf,IAAK,QAGD/V,EAAO,EACP,MACJ,IAAK,OAEGpH,EAAE,WAAU,GAAMA,EAAE,MAAK,EAEzBoH,EAAO,EAIPA,EAAO,GAEX,MACJ,IAAK,SAEGpH,EAAE,WAAU,GAAMA,EAAE,MAAK,EAEzBoH,EAAO,EAIPA,EAAO,GAEX,MACJ,IAAK,aAEGpH,EAAE,SAEFoH,EAAO,EAEFpH,EAAE,aAEPoH,EAAO,GAIPA,EAAO,EAEX,MACJ,QAEI6F,EAAUkQ,IAAgB,WAAY,gCAAgC,EAClEnd,EAAE,WAAU,GAAM,CAACA,EAAE,OAAM,EAE3BoH,EAAO,GAIPA,EAAO,EAEX,KACZ,CAEI,OAAO6R,GAAc,CACjB,cAAejZ,EACf,gBAAiB+B,EACjB,SAAUwW,EAEV,UAAW5D,EACX,KAAMvN,CACd,EAAOqJ,EAAc,eAAgBzE,EAAIyE,CAAa,CACtD,CC5HO,SAAS2M,GAAc3M,EAAezQ,EAAG,CAC5C,IAAIqd,EAAQH,GAAuBzM,EAAezQ,CAAC,EACnD,OAAOqd,EAAM,IAAI,SAAU1U,EAAG,CAAE,OAAOA,EAAE,KAAM,CAAE,EAAE,KAAK,EAAE,CAC9D,CCIO,SAAS2U,GAA4BpJ,EAAclU,EAAGM,EAAGxC,EAAI,CAChE,IAAIqW,EAAmBrW,EAAG,iBAE1BmP,EAAU,CAACjN,EAAE,MAAK,GAAM,CAACM,EAAE,MAAK,EAAI,yBAA0B,UAAU,EACxE,IAAImQ,EAAgB0D,EAAiBD,CAAY,EAE7CqJ,EAAUL,GAAuBzM,EAAezQ,CAAC,EAEjDwd,EAAUN,GAAuBzM,EAAenQ,CAAC,EACrD,GAAI8c,GAAc3M,EAAezQ,CAAC,IAAMod,GAAc3M,EAAenQ,CAAC,EAAG,CACrE,IAAImd,EAAaT,GAAoBvM,EAAe8M,CAAO,EAC3D,OAAAE,EAAW,QAAQ,SAAUC,EAAI,CAC7BA,EAAG,OAAS,QACxB,CAAS,EACMD,CACf,CACI,IAAIvM,EAAS,CAAA,EACbqM,EAAQ,QAAQ,SAAUG,EAAI,CAC1BA,EAAG,OAAS,aACZxM,EAAO,KAAKwM,CAAE,CACtB,CAAK,EAED,IAAIC,EAAiBlN,EAAc,eAAe,QAAQ,QAAQA,EAAc,eAAe,EAC1F,UACL,OAAAS,EAAO,KAAK,CAAE,KAAM,UAAW,MAAOyM,EAAgB,OAAQ,SAAU,EACxEH,EAAQ,QAAQ,SAAUE,EAAI,CAC1BA,EAAG,OAAS,WACZxM,EAAO,KAAKwM,CAAE,CACtB,CAAK,EAEMzJ,GAAoBC,EAAchD,EAAQ,CAAE,iBAAkBiD,CAAgB,CAAE,CAC3F,CCnCO,SAASyJ,GAAmB1J,EAAclU,EAAGM,EAAGxC,EAAI,CACvD,IAAIqW,EAAmBrW,EAAG,iBACtBuf,EAAQC,GAA4BpJ,EAAclU,EAAGM,EAAG,CACxD,iBAAkB6T,CAC1B,CAAK,EACD,OAAOkJ,EAAM,IAAI,SAAUjD,EAAM,CAAE,OAAOA,EAAK,KAAM,CAAE,EAAE,KAAK,EAAE,CACpE,CCNO,SAASyD,GAA0B3J,EAAclU,EAAGM,EAAGxC,EAAI,CAC9D,IAAIqW,EAAmBrW,EAAG,iBACtBuf,EAAQC,GAA4BpJ,EAAclU,EAAGM,EAAG,CACxD,iBAAkB6T,CAC1B,CAAK,EACD,OAAOkJ,EAAM,IAAI,SAAUjD,EAAM0D,EAAO,CAAE,MAAQ,CAC9C,KAAM1D,EAAK,KACX,MAAOA,EAAK,MACZ,OAAQA,EAAK,OACb,OAAQ0D,EAAM,SAAQ,CAC9B,EAAS,CACT,CCbO,SAASC,GAAqBC,EAAIhe,EAAGie,EAAa,CAGrD,QAFIZ,EAAQH,GAAuBe,EAAY,iBAAiBD,CAAE,EAAGhe,CAAC,EAClEkR,EAASzC,GAAY,CAAC,EACjBnC,EAAK,EAAG4R,EAAUb,EAAO/Q,EAAK4R,EAAQ,OAAQ5R,IAAM,CACzD,IAAI8N,EAAO8D,EAAQ5R,CAAE,EACrB4E,EAAO,KAAK,CACR,KAAMkJ,EAAK,KACX,MAAOA,EAAK,KACxB,CAAS,CACT,CACI,OAAOlJ,CACX,CCRA,IAAIiN,GAA4B,IAAI,IAAI,CACpC,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,IAAK,IAAK,IAAK,IAAK,IAAM,IAAM,KAAM,GACnE,CAAC,EAIM,SAASC,GAA4B3N,EAAewB,EAAMoM,EAAaC,EAAa1J,EAAU,CAEjG,IAAI2J,EAAO3M,GAAgBK,EAAM,uBAAwB,EAAG,GAAI,CAAC,EAE7DuM,EAAOvM,EAAK,sBAEZwM,EAAOxM,EAAK,sBAEZyM,EAAOzM,EAAK,yBAEZ0M,EAAO1M,EAAK,yBAEhBxB,EAAc,qBAAuB8N,EAErC,IAAIxI,EAAoBnE,GAAgBK,EAAM,oBAAqB,EAAG,IAAM,CAAC,EAE7EhF,EAAUkR,GAA0B,IAAIpI,CAAiB,EAAG,qCAAqC,OAAOA,EAAmB;AAAA,kBAAsB,EAAE,OAAO,MAAM,KAAKoI,EAAyB,EAAE,KAAK,IAAI,EAAG,GAAG,CAAC,EAEhN,IAAIxI,EAAe3D,EAAUC,EAAM,eAAgB,SAAU,CACzD,OACA,QACA,SACA,QACA,WACA,YACA,aACA,YACA,UACR,EAAO,YAAY,EAEX2M,EAAmB5M,EAAUC,EAAM,mBAAoB,SAAU,CAAC,OAAQ,gBAAiB,eAAe,EAAG,MAAM,EAEnH4M,EAAsB7M,EAAUC,EAAM,sBAAuB,SAAU,CAAC,OAAQ,gBAAgB,EAAG,MAAM,EAEzG8D,IAAsB,IAEtBuI,EAAcD,GAGlB5N,EAAc,kBAAoBsF,EAElCtF,EAAc,aAAekF,EAE7BlF,EAAc,oBAAsBoO,EAEpC,IAAIC,EAAQJ,IAAS,QAAaC,IAAS,OAEvCI,EAAQP,IAAS,QAAaC,IAAS,OAEvCO,EAAS,GAETC,EAAS,GA6Bb,GA3BIL,IAAqB,SAErBI,EAASF,GAELA,GAAU,CAACC,GAASnK,IAAa,aAEjCqK,EAAS,KAIbD,IAEIF,GAEArO,EAAc,yBAA2Be,GAAoBkN,EAAM,EAAG,GAAI,CAAC,EAE3EjO,EAAc,yBAA2Be,GAAoBmN,EAAMlO,EAAc,yBAA0B,GAAI,EAAE,IAKjHA,EAAc,yBAA2B,EAEzCA,EAAc,yBAA2B,KAI7CwO,EAEA,GAAIF,EAAO,CAMP,GAJAP,EAAOhN,GAAoBgN,EAAM,EAAG,IAAK,MAAS,EAElDC,EAAOjN,GAAoBiN,EAAM,EAAG,IAAK,MAAS,EAE9CD,IAAS,OAETvR,EAAUwR,IAAS,OAAW,uCAAuC,EAErED,EAAO,KAAK,IAAIH,EAAaI,CAAI,UAE5BA,IAAS,OAGdA,EAAO,KAAK,IAAIH,EAAaE,CAAI,UAE5BA,EAAOC,EAEZ,MAAM,IAAI,WAAW,kBAAkB,OAAOD,EAAM,KAAK,EAAE,OAAOC,CAAI,CAAC,EAG3EhO,EAAc,sBAAwB+N,EAEtC/N,EAAc,sBAAwBgO,CAClD,MAIYhO,EAAc,sBAAwB4N,EAEtC5N,EAAc,sBAAwB6N,EAI1C,CAACU,GAAU,CAACC,GAEZxO,EAAc,sBAAwB,EAEtCA,EAAc,sBAAwB,EAEtCA,EAAc,yBAA2B,EAEzCA,EAAc,yBAA2B,EAEzCA,EAAc,aAAe,gBAE7BA,EAAc,iBAAmB,iBAE5BmO,IAAqB,iBAG1BnO,EAAc,aAAe,gBAE7BA,EAAc,iBAAmB,iBAE5BmO,IAAqB,iBAG1BnO,EAAc,aAAe,gBAE7BA,EAAc,iBAAmB,iBAE5BqO,GAGLrO,EAAc,aAAe,oBAE7BA,EAAc,iBAAmB,SAKjCA,EAAc,aAAe,iBAE7BA,EAAc,iBAAmB,QAGjCsF,IAAsB,IAEtB9I,EAAUwD,EAAc,eAAiB,iBAAkB,uBAAwB,SAAS,EAE5FxD,EAAUwD,EAAc,wBACpBA,EAAc,sBAAuB,6FAA8F,UAAU,EAEzJ,CC3KO,SAASyO,GAA2BzO,EAAec,EAAS,CAC3DA,IAAY,SAAUA,EAAU,OAAO,OAAO,IAAI,GAEtD,IAAI0D,EAAQjD,EAAUT,EAAS,QAAS,SAAU,CAAC,UAAW,UAAW,WAAY,MAAM,EAAG,SAAS,EAEvGd,EAAc,MAAQwE,EAEtB,IAAI1B,EAAWvB,EAAUT,EAAS,WAAY,SAAU,OAAW,MAAS,EAG5EtE,EAAUsG,IAAa,QAAaD,GAAyBC,CAAQ,EAAG,0BAA2B,UAAU,EAE7GtG,EAAUgI,IAAU,YAAc1B,IAAa,OAAW,+BAAgC,SAAS,EAEnG,IAAI2B,EAAkBlD,EAAUT,EAAS,kBAAmB,SAAU,CAAC,OAAQ,SAAU,eAAgB,MAAM,EAAG,QAAQ,EAEtH4N,EAAenN,EAAUT,EAAS,eAAgB,SAAU,CAAC,WAAY,YAAY,EAAG,UAAU,EAElGoB,EAAOX,EAAUT,EAAS,OAAQ,SAAU,OAAW,MAAS,EAGpEtE,EAAU0F,IAAS,QAAac,GAA2Bd,CAAI,EAAG,gDAAiD,UAAU,EAE7H1F,EAAUgI,IAAU,QAAUtC,IAAS,OAAW,2BAA4B,SAAS,EAEvF,IAAIiI,EAAc5I,EAAUT,EAAS,cAAe,SAAU,CAAC,QAAS,SAAU,MAAM,EAAG,OAAO,EAE9F0D,IAAU,aAEVxE,EAAc,SAAW8C,EAAS,YAAW,EAE7C9C,EAAc,gBAAkByE,EAEhCzE,EAAc,aAAe0O,GAG7BlK,IAAU,SAEVxE,EAAc,KAAOkC,EAErBlC,EAAc,YAAcmK,EAEpC,CCrCO,SAASwE,GAAuBpB,EAAIrgB,EAASsU,EAAMnU,EAAI,CAC1D,IAAIqW,EAAmBrW,EAAG,iBAAkBuhB,EAAavhB,EAAG,WAAYwhB,EAAmBxhB,EAAG,iBAAkByhB,EAAuBzhB,EAAG,qBAAsB0hB,EAAmB1hB,EAAG,iBAAkB6a,EAAqB7a,EAAG,mBAC5N2hB,EAAmB/hB,GAAuBC,CAAO,EACjD4T,EAAUD,GAAsBW,CAAI,EACpCyN,EAAM,OAAO,OAAO,IAAI,EACxBC,EAAU3N,EAAUT,EAAS,gBAAiB,SAAU,CAAC,SAAU,UAAU,EAAG,UAAU,EAC9FmO,EAAI,cAAgBC,EACpB,IAAI7K,EAAkB9C,EAAUT,EAAS,kBAAmB,SAAU,OAAW,MAAS,EAC1F,GAAIuD,IAAoB,QACpByK,EAAqB,QAAQzK,CAAe,EAAI,EAGhD,MAAM,WAAW,6BAA6B,OAAOA,CAAe,CAAC,EAEzE4K,EAAI,GAAK5K,EACT,IAAI1T,EAAIwe,GAAc,MAAM,KAAKN,CAAgB,EAAGG,EAAkBC,EAEtE,CAAC,IAAI,EAAGL,EAAYG,CAAgB,EAChC3K,EAAiBwK,EAAWje,EAAE,UAAU,EAC5C6L,EAAU,CAAC,CAAC4H,EAAgB,2BAA2B,OAAOzT,EAAE,UAAU,CAAC,EAC3E,IAAIqP,EAAgB0D,EAAiB6J,CAAE,EACvCvN,EAAc,OAASrP,EAAE,OACzBqP,EAAc,WAAarP,EAAE,WAC7BqP,EAAc,gBAAkBrP,EAAE,GAClCqP,EAAc,eAAiBoE,EAC/BqK,GAA2BzO,EAAec,CAAO,EACjD,IAAI0D,EAAQxE,EAAc,MACtBmE,EAAW5C,EAAUT,EAAS,WAAY,SAAU,CAAC,WAAY,aAAc,cAAe,SAAS,EAAG,UAAU,EACxHd,EAAc,SAAWmE,EACzB,IAAIyJ,EACAC,EACJ,GAAIrJ,IAAU,YAAcL,IAAa,WAAY,CACjD,IAAIrB,EAAW9C,EAAc,SACzBoP,EAAUnH,GAAenF,EAAU,CAAE,mBAAoBoF,CAAkB,CAAE,EACjF0F,EAAcwB,EACdvB,EAAcuB,CACtB,MAEQxB,EAAc,EACdC,EAAcrJ,IAAU,UAAY,EAAI,EAE5CmJ,GAA4B3N,EAAec,EAAS8M,EAAaC,EAAa1J,CAAQ,EACtF,IAAII,EAAiBhD,EAAUT,EAAS,iBAAkB,SAAU,CAAC,QAAS,MAAM,EAAG,OAAO,EAC1FuO,EAAqB,OACrBlL,IAAa,YACbnE,EAAc,eAAiBuE,EAC/B8K,EAAqB,QAEzB,IAAItE,EAAcnJ,GAAyBd,EAAS,cAAe,CAAC,OAAQ,OAAQ,QAAQ,EAAG,SAAU,GAAOuO,CAAkB,EAClIrP,EAAc,YAAc+K,EAC5B,IAAI2B,EAAcnL,EAAUT,EAAS,cAAe,SAAU,CAAC,OAAQ,QAAS,SAAU,aAAc,UAAU,EAAG,MAAM,EAC3H,OAAAd,EAAc,YAAc0M,EACrBa,CACX,CC5DO,SAAS+B,GAAiBxD,EAAS,CAMtC,QALIrL,EAAS,CAAA,EACT8O,EAAazD,EAAQ,QAAQ,GAAG,EAChC0D,EAAW,EACXC,EAAY,EACZC,EAAS5D,EAAQ,OACdyD,EAAazD,EAAQ,QAAUyD,EAAa,IAC/CC,EAAW1D,EAAQ,QAAQ,IAAKyD,CAAU,EAC1C/S,EAAUgT,EAAWD,EAAY,mBAAmB,OAAOzD,CAAO,CAAC,EAC/DyD,EAAaE,GACbhP,EAAO,KAAK,CACR,KAAM,UACN,MAAOqL,EAAQ,UAAU2D,EAAWF,CAAU,CAC9D,CAAa,EAEL9O,EAAO,KAAK,CACR,KAAMqL,EAAQ,UAAUyD,EAAa,EAAGC,CAAQ,EAChD,MAAO,MACnB,CAAS,EACDC,EAAYD,EAAW,EACvBD,EAAazD,EAAQ,QAAQ,IAAK2D,CAAS,EAE/C,OAAIA,EAAYC,GACZjP,EAAO,KAAK,CACR,KAAM,UACN,MAAOqL,EAAQ,UAAU2D,EAAWC,CAAM,CACtD,CAAS,EAEEjP,CACX,CCzBO,SAASkP,GAAiBd,EAAkBG,EAAkBlO,EAAS,CAC1E,IAAIoO,EAAU,WAKd,OAJIpO,IAAY,SACZA,EAAUhD,GAASgD,CAAO,EAC1BoO,EAAU3N,EAAUT,EAAS,gBAAiB,SAAU,CAAC,SAAU,UAAU,EAAG,UAAU,GAE1FoO,IAAY,WACLU,GAAuB,MAAM,KAAKf,CAAgB,EAAGG,CAAgB,EAEzEY,GAAuB,MAAM,KAAKf,CAAgB,EAAGG,CAAgB,CAChF,EClB4C,SAAUa,EAAQ,CAC1DC,GAAUC,EAAwBF,CAAM,EACxC,SAASE,GAAyB,CAC9B,IAAIC,EAAQH,IAAW,MAAQA,EAAO,MAAM,KAAM,SAAS,GAAK,KAChE,OAAAG,EAAM,KAAO,sBACNA,CACf,CACI,OAAOD,CACX,GAAE,KAAK,EACA,SAASE,GAAyB,EAAG,CACxC,OAAO,EAAE,OAAS,qBACtB,CCZO,IAAIC,IACV,SAAUA,EAAkB,CACzBA,EAAiB,WAAgB,aACjCA,EAAiB,OAAY,SAC7BA,EAAiB,SAAc,UACnC,GAAGA,KAAqBA,GAAmB,CAAA,EAAG,ECHvC,SAASC,GAAwBzP,EAAO,CAC3C,IAAInD,EAAYC,GAAYkD,EAAO,QAAQ,EAC3C,GAAI,OAAOnD,GAAc,SACrB,OAAO,IAAIpF,EAAQoF,CAAS,EAGhC,GAAIA,IAAc,OACd,OAAO,IAAIpF,EAAQ,GAAG,EAE1B,GAAIoF,IAAc,GACd,OAAO,IAAIpF,EAAQ,CAAC,EAExB,GAAIoF,IAAc,GACd,OAAO,IAAIpF,EAAQ,CAAC,EAExB,GAAIoF,IAAc,KACd,OAAO,IAAIpF,EAAQ,CAAC,EAExB,GAAI,CACA,OAAO,IAAIA,EAAQoF,CAAS,CACpC,MACc,CACN,OAAO,IAAIpF,EAAQ,GAAG,CAC9B,CACA,0tDCzBA,OAAO,eAAeiY,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,sBAAgCC,EAChC,IAAIC,EAAqBC,GACrBC,EAAuBC,GAC3B,SAASJ,EAAsB9U,EAAIrO,EAAS4T,EAASzT,EAAI,CACrD,IAAIwhB,EAAmBxhB,EAAG,iBAAkBqjB,EAAwBrjB,EAAG,sBAAuBuhB,EAAavhB,EAAG,WAAY0hB,EAAmB1hB,EAAG,iBAAkBqW,EAAmBrW,EAAG,iBACpL2hB,KAAuBsB,EAAmB,wBAAwBpjB,CAAO,EACzE+hB,EAAM,OAAO,OAAO,IAAI,EACxBzN,KAAW8O,EAAmB,uBAAuBxP,CAAO,EAC5Dd,EAAgB0D,EAAiBnI,CAAE,EACvCyE,EAAc,uBAAyB,GACvC,IAAIkP,KAAcoB,EAAmB,WAAW9O,EAAM,gBAAiB,SAAU,CAAC,WAAY,QAAQ,EAAG,UAAU,EACnHyN,EAAI,cAAgBC,EACpB,IAAIve,KAAQ6f,EAAqB,eAAe3B,EAAkBG,EAAkBC,EAAKyB,EAAuB9B,EAAYG,CAAgB,EAC5I,OAAA/O,EAAc,OAASrP,EAAE,OACzBqP,EAAc,QAAWsQ,EAAmB,WAAW9O,EAAM,OAAQ,SAAU,CAAC,WAAY,SAAS,EAAG,UAAU,KAC9G8O,EAAmB,6BAA6BtQ,EAAewB,EAAM,EAAG,EAAG,UAAU,EAClFjG,CACX,iEClBA,OAAO,eAAeoV,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,YAAsBC,EACtB,IAAIN,EAAqBC,GAKzB,SAASK,EAAY/f,EAAG,IAChByf,EAAmB,WAAW,OAAOzf,GAAM,SAAU,mDAAmD,EAC5G,IAAIS,KAAQgf,EAAmB,UAAUzf,CAAC,KACtCyf,EAAmB,WAAWhf,EAAE,SAAQ,EAAI,oBAAoB,EACpE,IAAIsC,EAAK/C,EAAE,QAAQ,GAAG,EAClBggB,EACA5U,EACA1C,EACAuX,EAAK,GACLld,IAAO,IACPid,EAAKvf,EACL2K,EAAIqU,EAAmB,KACvB/W,EAAI,IAGJsX,EAAKhgB,EAAE,MAAM,EAAG+C,CAAE,EAClBkd,EAAKjgB,EAAE,MAAM+C,EAAI/C,EAAE,MAAM,EACzBoL,KAAQqU,EAAmB,UAAUQ,CAAE,EACvCvX,EAAIuX,EAAG,QAEX,IAAIhhB,KAAQwgB,EAAmB,UAAUO,CAAE,EAAE,IAAG,EAC5Czf,EACAL,EACJ,GAAKkL,EAAE,SAMH7K,EAAI,EACJL,EAAIuf,EAAmB,SAPV,CACb,IAAIS,EAAKD,EAAG,QAAQ,MAAO,EAAE,EAC7B1f,EAAI2f,EAAG,OACPhgB,KAAQuf,EAAmB,UAAUS,CAAE,CAC/C,CAKI,MAAO,CACH,OAAQzf,EACR,cAAexB,EAAE,SAAQ,EACzB,uBAAwByJ,EACxB,sCAAuCnI,EACvC,eAAgB6K,EAAE,SAAQ,EAC1B,8BAA+BlL,EAAE,SAAQ,EAEjD,qDC/CA,OAAO,eAAeigB,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,cAAwBC,EACxB,IAAIX,EAAqBC,GACrBI,EAAgBF,GAAA,EAOpB,SAASQ,EAAc1V,EAAIjK,EAAGjE,EAAI,CAC9B,IAAIqW,EAAmBrW,EAAG,iBAAkB6jB,EAAmB7jB,EAAG,iBAC9D2S,EAAgB0D,EAAiBnI,CAAE,EAGvC,MAFI+U,EAAmB,cAAeA,EAAmB,MAAMtQ,CAAa,IAAM,SAAU,wBAAwB,KAChHsQ,EAAmB,WAAW,2BAA4BtQ,EAAe,iCAAiC,EAC1G,CAAC1O,EAAE,WACH,MAAO,QAEX,IAAI6f,EAASnR,EAAc,OAAQyB,EAAOzB,EAAc,KACpDoR,KAAUd,EAAmB,uBAAuBtQ,EAAe1O,CAAC,EACpET,EAAIugB,EAAI,gBACRC,KAAeV,EAAc,aAAa9f,CAAC,EAC/C,OAAOqgB,EAAiBC,EAAQ1P,EAAMnQ,EAAG+f,CAAQ,CACrD,2DCvBA,OAAO,eAAeC,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,QAAkB5N,EAClB,IAAI6N,EAAkB,IAAI,QAC1B,SAAS7N,EAAiBnU,EAAG,CACzB,IAAIyQ,EAAgBuR,EAAgB,IAAIhiB,CAAC,EACzC,OAAKyQ,IACDA,EAAgB,OAAO,OAAO,IAAI,EAClCuR,EAAgB,IAAIhiB,EAAGyQ,CAAa,GAEjCA,CACX,qDCVA,OAAO,eAAewR,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5DA,GAAA,YAAsB,OACtB,IAAIC,EAAUlB,GACVD,EAAqBG,GACrBL,EAA0BsB,GAAA,EAC1BV,EAAkBW,GAAA,EAClBC,EAAuBH,EAAQ,gBAAgBI,IAA+B,EAClF,SAASC,EAAiBC,EAAUvR,EAAQ,CACxC,GAAI,EAAEuR,aAAoBC,GACtB,MAAM,IAAI,UAAU,qCAAqC,OAAOxR,EAAQ,mCAAmC,EAAE,OAAO,OAAOuR,CAAQ,CAAC,CAAC,CAE7I,CAQA,SAASb,EAAiBC,EAAQ1P,EAAMwQ,EAAI5kB,EAAI,CAC5C,IAAI6kB,EAAgB7kB,EAAG,cAAe8kB,EAAyB9kB,EAAG,uBAAwB+kB,EAAiB/kB,EAAG,eAC9G,OAAO2kB,EAAY,WAAWb,CAAM,EAAE,GAAGgB,EACnC,GAAG,OAAOD,EAAe,GAAG,EAAE,OAAOE,CAAc,EACnDF,EAAezQ,IAAS,SAAS,CAC3C,CACA,IAAIuQ,EAA6B,UAAY,CACzC,SAASA,EAAY9kB,EAAS4T,EAAS,CAGnC,IAAIuR,EAAY,MAAQ,gBAAgBL,EAAc,KAAK,YAAc,OACzE,GAAI,CAACK,EACD,MAAM,IAAI,UAAU,4CAA4C,EAEpE,SAAWjC,EAAwB,uBAAuB,KAAMljB,EAAS4T,EAAS,CAC9E,iBAAkBkR,EAAY,iBAC9B,sBAAuBA,EAAY,sBACnC,WAAYA,EAAY,WACxB,iBAAkBA,EAAY,iBAC9B,iBAAkBJ,EAAqB,OACnD,CAAS,CACT,CACI,OAAAI,EAAY,UAAU,gBAAkB,UAAY,CAChDF,EAAiB,KAAM,iBAAiB,EACxC,IAAItQ,EAAO,OAAO,OAAO,IAAI,EACzBxB,KAAoB4R,EAAqB,SAAS,IAAI,EAC1D,OAAApQ,EAAK,OAASxB,EAAc,OAC5BwB,EAAK,KAAOxB,EAAc,KAC1B,CACI,uBACA,wBACA,wBACA,2BACA,0BACZ,EAAU,QAAQ,SAAUxE,EAAO,CACvB,IAAI0F,EAAMlB,EAAcxE,CAAK,EACzB0F,IAAQ,SACRM,EAAKhG,CAAK,EAAI0F,EAE9B,CAAS,EACDM,EAAK,iBAAmBiQ,EAAQ,cAAc,CAAA,EAAIO,EAAY,WAAWxQ,EAAK,MAAM,EAAE,WAAWA,EAAK,IAAI,EAAG,EAAI,EAC1GA,GAEXwQ,EAAY,UAAU,OAAS,SAAU9Q,EAAK,CAC1C,IAAI5Q,EAAK,KACTwhB,EAAiBxhB,EAAI,QAAQ,EAC7B,IAAIgB,KAAQgf,EAAmB,UAAUpP,CAAG,EAC5C,SAAW8P,EAAgB,eAAe1gB,EAAIgB,EAAG,CAAE,iBAAkBsgB,EAAqB,QAAS,iBAAkBV,CAAgB,CAAE,GAE3Ic,EAAY,UAAU,SAAW,UAAY,CACzC,MAAO,6BAEXA,EAAY,mBAAqB,SAAU9kB,EAAS4T,EAAS,CACzD,SAAWwP,EAAmB,kBAAkB0B,EAAY,oBAAsB1B,EAAmB,wBAAwBpjB,CAAO,EAAG4T,CAAO,GAElJkR,EAAY,gBAAkB,UAAY,CAEtC,QADItJ,EAAO,CAAA,EACF7M,EAAK,EAAGA,EAAK,UAAU,OAAQA,IACpC6M,EAAK7M,CAAE,EAAI,UAAUA,CAAE,EAE3B,QAASxO,EAAK,EAAGilB,EAAS5J,EAAMrb,EAAKilB,EAAO,OAAQjlB,IAAM,CACtD,IAAIwY,EAAKyM,EAAOjlB,CAAE,EAAGgE,EAAIwU,EAAG,KAAMsL,EAAStL,EAAG,OAC9CmM,EAAY,WAAWb,CAAM,EAAI9f,EACjC2gB,EAAY,iBAAiB,IAAIb,CAAM,EAClCa,EAAY,kBACbA,EAAY,gBAAkBb,EAE9C,GAEIa,EAAY,iBAAmB,UAAY,CACvC,OAAOA,EAAY,iBAEvBA,EAAY,WAAa,CAAA,EACzBA,EAAY,iBAAmB,IAAI,IACnCA,EAAY,gBAAkB,GAC9BA,EAAY,sBAAwB,CAAA,EACpCA,EAAY,WAAa,GAClBA,CACX,IACAR,GAAA,YAAsBQ,EACtB,GAAI,CAEI,OAAO,OAAW,KAClB,OAAO,eAAeA,EAAY,UAAW,OAAO,YAAa,CAC7D,MAAO,mBACP,SAAU,GACV,WAAY,GACZ,aAAc,EAC1B,CAAS,EAEL,GAAI,CAEA,OAAO,eAAeA,EAAa,SAAU,CACzC,MAAO,EACP,SAAU,GACV,WAAY,GACZ,aAAc,EAC1B,CAAS,CACT,MACkB,CAGlB,CAEI,OAAO,eAAeA,EAAY,UAAU,YAAa,SAAU,CAC/D,MAAO,EACP,SAAU,GACV,WAAY,GACZ,aAAc,EACtB,CAAK,EAED,OAAO,eAAeA,EAAY,mBAAoB,SAAU,CAC5D,MAAO,EACP,SAAU,GACV,WAAY,GACZ,aAAc,EACtB,CAAK,EACD,OAAO,eAAeA,EAAa,OAAQ,CACvC,MAAO,cACP,SAAU,GACV,WAAY,GACZ,aAAc,EACtB,CAAK,CACL,MACW,CAEX,qDCjJA,OAAO,eAAeO,GAAS,aAAc,CAAE,MAAO,GAAM,EAC5D,IAAIC,EAAKjC,GAAA,EACT,cAAO,eAAe,KAAM,cAAe,CACvC,MAAOiC,EAAG,YACV,SAAU,GACV,WAAY,GACZ,aAAc,EAClB,CAAC","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48]}