{"version":3,"mappings":"2iDAeA,MAAMA,EAAiBA,CACrBC,EACAC,EACAC,IAEI,OAAOD,GAAY,SACdD,EAAKG,cAAcF,EAASC,CAAM,EAGpCD,EAGHG,GAGDA,CAAC,CACJC,MAAO,CAAEC,MAAKC,QAAON,UAASC,SAAQM,SAAQC,WAC9CC,cACF,IAAM,CACJ,MAAMC,EAAWC,IACXZ,EAAOa,IACP,CAACC,EAAQC,CAAS,EAAIC,WAAS,EAAK,EAE1CC,mBAAU,IAAM,CACd,MAAMC,EAAmBC,WAAW,IAAM,CACxCJ,EAAU,EAAI,GACb,CAAC,EAEJ,MAAO,IAAM,CACXK,aAAaF,CAAgB,EAC/B,EACC,EAAE,EAELD,YAAU,IAAM,CACd,MAAMI,EAAiBF,WAAW,IAAM,CACtCJ,EAAU,EAAK,EAGfI,WAAW,IAAM,CACfR,EAASW,GAAa,CAAEhB,MAAK,CAAC,GAC7B,GAAG,GACLI,CAAY,EAEf,MAAO,IAAM,CACXU,aAAaC,CAAc,EAC7B,EACC,CAACV,EAAUI,EAAWT,EAAKI,CAAY,CAAC,EAGzCa,MAAC,OACC,UAAWC,EAAW,mBAAoB,CACxC,0BAA2BV,EAC5B,EAED,SAAAW,OAAC,OAAI,UAAU,2BACZlB,aACCgB,MAAC,QAAK,UAAU,yBACbxB,WAAeC,EAAMO,EAAOL,CAAM,EACrC,EAGFqB,MAAC,QAAK,UAAU,2BACbxB,WAAeC,EAAMC,EAASC,CAAM,EACvC,EAECM,GACCe,MAAC,UAAO,UAAU,0BAA0B,QAAAd,EACzCV,WAAeC,EAAMQ,EAAQN,CAAM,EACtC,GAEJ,EACF,CAEJ,EAEawB,GAA6BA,IAAM,CAC9C,MAAMC,EAASC,EAAgBC,GAAUA,EAAMF,MAAM,EAErD,OAAIA,EAAOG,SAAW,EACb,WAIN,OAAI,UAAU,oBACZH,WAAOI,IAAI,CAAC1B,EAAO2B,UACjB5B,GAAA,CAAsB,MAAAC,EAAc,aAAc,IAAO2B,EAAM,KAApD3B,EAAMC,IACnB,EACH,CAEJ,ECxGa2B,GAAuB,uBACvBC,GAAuB,uBACvBC,GAAoB,oBAE1B,SAASC,GAAmBC,EAAa,CAC9C,MAAO,CACLC,KAAML,GACNI,cAEJ,CAEO,SAASE,GAAmBF,EAAa,CAC9C,MAAO,CACLC,KAAMJ,GACNG,cAEJ,CAEO,SAASG,GAAgBC,EAAOJ,EAAa,CAClD,MAAO,CACLC,KAAMH,GACNM,QACAJ,cAEJ,CCnBA,MAAMK,GAAqB/B,IAAa,CACtCgC,SAAW,CACThC,EAASyB,GAAkB,CAAE,GAE/BQ,gBAAkB,CAChBjC,EAAS4B,GAAkB,CAAE,GAE/BM,YAAaJ,EAAO,CAClB9B,EAAS6B,GAAgBC,CAAK,CAAC,CACjC,CACF,GAEAK,GAAeC,EAAQ,KAAML,EAAkB,EAAEM,EAAM,ECbjDC,GAAkBA,CAACpB,EAAOqB,KAAc,CAC5CC,QAAStB,EAAMuB,IAAI,YAAY,EAAEF,EAASG,OAAS,SAAS,CAC9D,GAEAC,GAAeP,EAAQE,EAAe,EAAEM,GAAWC,gBAAgB,ECP7DC,GAAmBC,GAA0BC,gBAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,gBAAoB,OAAQ,CAAE,EAAG,mTAAmT,CAAE,CAAC,ECWphBC,GAAWC,EAAe,CAC9BC,KAAM,CAAEC,GAAE,oBAAuBC,eAAc,OACjD,CAAC,EAEYC,GAAuBA,IAAM,CACxC,MAAMjE,EAAOa,IACP,CAACqD,EAAMC,CAAO,EAAInD,WAAS,EAAK,EAChCoD,EAAaC,SAA0B,IAAI,EAC3CC,EAAkBC,UAElBC,EAAcC,cAAY,IAAM,CACpCN,EAAQ,CAACD,CAAI,GACZ,CAACA,EAAMC,CAAO,CAAC,EAEZ,CAACO,EAAiBC,CAAa,EAAIC,GAAmBJ,CAAW,EAEvE,OACE/C,OAAAoD,WAAA,CACE,UAAAtD,MAAC,UACC,KAAK,SACL,UAAWC,EAAW,cAAe,CAAEV,OAAQoD,EAAM,EACrD,IAAKE,EACL,QAASI,EACT,gBAAeN,EACf,gBAAeI,EACf,aAAYtE,EAAKG,cAAcyD,GAASE,IAAI,EAE5C,SAAAvC,MAACuD,GAAK,GAAG,GAAG,KAAMC,GAAiB,EACrC,QAECC,GAAA,CACC,KAAMd,EACN,UAAS,GACT,UAAU,MACV,OAAQM,EACR,OAAQ,CAAC,EAAG,CAAC,EACb,OAAQJ,EAEP,UAAC,CAAEV,WACFnC,MAAC,OACC,GAAImC,EACJ,UAAU,gDACV,KAAK,SACL,GAAIY,EACJ,YAAaI,EACb,UAAWC,EAEX,eAACM,EAAA,CACC,GAAE,+BACF,eAAe;;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAaf,OAAQ,CACNC,GAAKC,GAAS5D,MAAC,MAAI4D,WAAK,EACxBC,EAAID,GAAS5D,MAAC,KAAG4D,WAAK,EACtBE,GAAKF,GAAS5D,MAAC,MAAI4D,WAAK,EACxBG,GAAKH,GAAS5D,MAAC,MAAI4D,WAAK,EAC1B,CAAE,GAEN,CAEJ,GACF,CAEJ,EClDMvB,EAAWC,EAAe,CAC9B0B,kBAAmB,CACjBxB,GAAE,6DACFC,eAAc,qDAEhBwB,mBAAoB,CAClBzB,GAAE,8DACFC,eAAc,sDAEhByB,eAAgB,CACd1B,GAAE,2CACFC,eAAc,sFAGhB0B,eAAgB,CACd3B,GAAE,2CACFC,eAAc,UAElB,CAAC,EAEK2B,GAAa,KAIbC,GAIDA,CAAC,CAAEC,WAAUC,eAAcC,WAAU,IAAM,CAC9C,MAAMC,EAAU3B,SAAyB,IAAI,EAEvCG,EAAcC,cAAY,IAAM,QACpCuB,IAAQC,UAARD,QAAiBE,OAAM,EACtB,EAAE,EAECC,EAAe1B,cAClB2B,GAA2C,OAC1C,MAAMC,GAAOD,IAAEE,OAAOC,QAATH,cAAiB,GAE1BC,GACFP,EAAaO,CAAI,CACnB,EAEF,CAACP,CAAY,CACf,EAEA,cACG,SACC,UAAAvE,MAACiF,EAAA,CAAO,QAAShC,EAAcqB,WAAS,EAExCtE,MAAC,SACC,GAAG,0BACH,IAAKyE,EACL,KAAK,OACL,OAAQD,EACR,SAAUI,EACV,MAAO,CAAEM,QAAS,OAAO,CAAE,GAE/B,CAEJ,EAEMC,GAIDA,CAAC,CAAEC,UAASC,WAAUC,kBAAiB,IAAM,CAChD,MAAMC,EAAczC,SAAgB,EAAK,EACnC0C,EAAU1C,SAAmD,IAAI,EAEjE,CAAC2C,EAAGC,CAAC,EAAIL,EACTM,EAAQC,GAAU,CACtBC,GAAI,CACFC,KAAM,GAAGL,EAAI,GAAG,IAChBM,IAAK,GAAGL,EAAI,GAAG,KAEjBM,UAAWT,EAAYb,QACxB,EACKuB,EAAQ5F,EAAgBC,GAEzBA,EAAM4F,QAA0CrE,IAC/C,mBACF,EACAsE,KAAMV,GAAMA,EAAE5D,IAAI,IAAI,IAAMuD,CAAO,CACvC,EACMgB,EAAU/F,EAAgBC,GAC9B+F,GAAK/F,EAAMgG,SAASzE,IAAIwE,EAAE,EAAIE,MAChC,EAEM,CAACC,EAAUC,CAAW,EAAIhH,WAAS,EAAK,EAExCiH,EAASxD,cACZ2B,GAAkD,CACjDW,EAAQd,QAAUG,GAEpB,EACF,EAEM1B,EAAkBD,cACrB2B,GAAwB,CACvB,GAAIA,EAAE8B,SAAW,EACf,OAGF,MAAMC,EAAmB/B,GAAkB,CACzC,KAAM,CAAEY,IAAGC,KAAMmB,EAAmBrB,EAAQd,QAASG,CAAC,EACtDU,EAAYb,QAAU,GACtBY,EAAiB,CAACG,EAAGC,CAAC,CAAC,GAGnBtC,EAAgBA,IAAM,CAC1BqD,EAAY,EAAK,EACjBlB,EAAYb,QAAU,GACtBoC,SAASC,oBAAoB,UAAW3D,CAAa,EACrD0D,SAASC,oBAAoB,YAAaH,CAAe,GAGrD,CAAEnB,IAAGC,KAAMmB,EAAmBrB,EAAQd,QAASG,EAAEmC,WAAW,EAElEP,EAAY,EAAI,EAChBnB,EAAiB,CAACG,EAAGC,CAAC,CAAC,EAEvBoB,SAASG,iBAAiB,UAAW7D,CAAa,EAClD0D,SAASG,iBAAiB,YAAaL,CAAe,GAExD,CAACH,EAAanB,CAAgB,CAChC,EAEA,OAAKW,EAIDA,EAAMpE,IAAI,MAAM,IAAM,QAEtB3B,OAAC,OAAI,UAAWD,EAAW,cAAe,CAAEuG,WAAU,EACpD,UAAAxG,MAAC,OACC,IAAK0G,EACL,UAAW,GACX,IAAKT,EAAMpE,IAAI,KAAK,EACpB,IAAI,GACJ,KAAK,eACL,YAAasB,EAAgB,QAE9B+D,EAAS,IAAT,CAAa,UAAU,uBAAuB,MAAAvB,CAAA,CAAa,GAC9D,EAEOM,EAAMpE,IAAI,MAAM,IAAM,OAE7B3B,OAAC,OAAI,UAAWD,EAAW,cAAe,CAAEuG,WAAU,EACpD,UAAAxG,MAACmH,GAAA,CACC,IAAKT,EACL,IAAKT,EAAMpE,IAAI,KAAK,EACpB,IAAI,GACJ,YAAasB,EAAgB,QAE9B+D,EAAS,IAAT,CAAa,UAAU,uBAAuB,MAAAvB,CAAA,CAAa,GAC9D,EAEOM,EAAMpE,IAAI,MAAM,IAAM,QAE7B7B,MAACoH,IACC,QAASnB,EAAMpE,IAAI,aAAa,EAChC,UAAWoE,EAAMoB,MAAM,CAAC,OAAQ,WAAY,YAAY,CAAC,EACzD,YAAa,GAAGpB,EAAMoB,MAAM,CAAC,OAAQ,WAAY,OAAO,CAAC,CAAW,MAAMpB,EAAMoB,MAAM,CAAC,OAAQ,WAAY,QAAQ,CAAC,CAAW,GAC/H,SAAUpB,EAAMpE,IAAI,UAAU,EAC9B,IAAKoE,EAAMpE,IAAI,KAAK,EACpB,SAAQ,GACR,SAAQ,KAGHoE,EAAMpE,IAAI,MAAM,IAAM,QAE7B7B,MAACsH,GAAA,CACC,IAAKrB,EAAMpE,IAAI,KAAK,EACpB,OACGoE,EAAMpE,IAAI,aAAa,IACxBuE,iBAASmB,eAEX,SAAUtB,EAAMoB,MAAM,CAAC,OAAQ,WAAY,UAAU,EAAG,CAAC,EACzD,gBACEpB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,YAAY,CAAC,EAE9C,gBACEpB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,YAAY,CAAC,EAE9C,YAAapB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,QAAQ,CAAC,EACrD,SAAQ,KAIL,KA7DA,IA+DX,EAsBaG,GAAeC,aAC1B,CAAC,CAAErC,UAASsC,sBAAqBC,mBAAkBC,SAAQ,EAAGC,IAAQ,CACpE,MAAMpJ,EAAOa,IACPF,EAAWC,IACX4G,EAAQ5F,EAAgBC,GAEzBA,EAAM4F,QAA0CrE,IAC/C,mBACF,EACAsE,QAAYV,EAAE5D,IAAI,IAAI,IAAMuD,CAAO,CACvC,EACM0C,EAAOzH,EACVC,GACEA,EAAM4F,QAA0CrE,IAAI,MAAM,CAC/D,EACMkG,GACH9B,iBAAOoB,MAAM,CAAC,OAAQ,QAAS,GAAG,EAAG,KAA6B,EAC/DW,GACH/B,iBAAOoB,MAAM,CAAC,OAAQ,QAAS,GAAG,EAAG,KAA6B,EAC/D,CAACY,EAAaC,CAAc,EAAIzI,WACpCiI,IACGzB,iBAAOpE,IAAI,iBACZ,EACJ,EACM,CAACwD,EAAU8C,CAAW,EAAI1I,WAC9BkI,GAAoB,CAACI,EAAS,EAAI,GAAKC,EAAS,GAAK,EAAG,CAC1D,EACM,CAACI,EAAaC,CAAc,EAAI5I,WAAS,EAAK,EAC9C,CAAC6I,EAAUC,CAAW,EAAI9I,WAAS,EAAK,EACxC+I,EAAW1F,SACf4E,MAAuBC,EACzB,EACM5G,EAAOkF,iBAAOpE,IAAI,QAClB4G,EAAQlI,UAAO0H,CAAW,GAAK7D,GAE/BsE,GAA0BxF,cAC7B2B,GAA8C,CAC7CqD,EAAerD,EAAEE,OAAO4D,KAAK,EAC7BH,EAAS9D,QAAU,IAErB,CAACwD,CAAc,CACjB,EAEMU,GAAwB1F,cAC3B4B,GAAe,CACd1F,EAASyJ,GAAgBzD,EAASN,CAAI,CAAC,GAEzC,CAAC1F,EAAUgG,CAAO,CACpB,EAEM0D,GAAuB5F,cAC1BmC,GAAyB,CACxB8C,EAAY9C,CAAQ,EACpBmD,EAAS9D,QAAU,IAErB,CAACyD,CAAW,CACd,EAEMY,EAAe7F,cAAY,IAAM,CACrCqF,EAAY,EAAI,EAEhBnJ,EACE4J,GAAoB,CAClBxG,GAAI4C,EACJ6C,cACAgB,MAAO,KAAK5D,EAAS,CAAC,EAAI,IAAO,GAAG6D,QAAQ,CAAC,CAAC,MAAM7D,EAAS,CAAC,EAAI,IAAO,IAAI6D,QAAQ,CAAC,CAAC,GACxF,CACH,EACGC,KAAK,KACJZ,EAAY,EAAK,EACjBC,EAAS9D,QAAU,GACnBkD,IACO,GACR,EACAwB,MAAOC,GAAiB,CACvBd,EAAY,EAAK,EACjBnJ,EAASkK,GAAkBD,CAAG,CAAC,EAChC,GACF,CAACjK,EAAUmJ,EAAanD,EAASwC,EAASvC,EAAU4C,CAAW,CAAC,EAE7DsB,GAAcrG,cACjB2B,GAA2B,EACrBA,EAAE2E,SAAW3E,EAAE4E,UAAY5E,EAAE9F,MAAQ,UACxC8F,EAAE6E,iBAEEjB,GACFM,IAEJ,EAEF,CAACA,EAAcN,CAAK,CACtB,EAEMkB,GAAoBzG,cAAY,IAAM,CAC1CmF,EAAe,EAAI,EAEnBuB,KACGT,KAAK,MAAO,CAAEU,kBAAmB,CAChC,KAAM,CAACC,EAAqBC,EAAiB,EAAI,MAAMC,QAAQC,IAAI,CAAAC,EAAA,IAEjE,OAAO,0BAAqC,MAAAA,EAAA,IAE5C,OAAO,mCAA8C,MACtD,EACKC,EAAS,MAAMN,EAAa,MAAO,EAAG,CAC1CO,WAAYN,EAAoBO,QAChCC,SAAUP,GAAkBM,QAC5BE,SAAU,GAAGC,EAAS,iBACtBC,YAAa,QACd,EAEKC,GAAQC,IAAIC,gBAAgB3E,iBAAOpE,IAAI,OAAe,EACtDgJ,GAAS,MAAMV,EAAOW,UAAUJ,EAAK,EAE3CxC,SAAe2C,GAAOE,KAAKC,IAAI,EAC/B3C,EAAe,EAAK,EAEpB,MAAM8B,EAAOc,YAEN,GACR,EACA7B,MAAM,IAAM,CACXf,EAAe,EAAK,EACrB,GACF,CAACH,EAAgBG,EAAgBpC,CAAK,CAAC,EAE1CiF,6BACErD,EACA,KAAO,CACLsD,4BAA6BA,IACvB3C,EAAS9D,QACJ,CACLhG,QAASD,EAAKG,cAAcyD,EAAS6B,cAAc,EACnDkH,QAAS3M,EAAKG,cAAcyD,EAAS8B,cAAc,EACnDhC,MAAO,CACLuF,oBAAqBO,EACrBN,iBAAkBtC,EACpB,EAIG,IACT,GAEF,CAAC5G,EAAMwJ,EAAa5C,CAAQ,CAC9B,EAGEnF,OAAC,OAAI,UAAU,iCACb,UAAAA,OAAC,OAAI,UAAU,uBACb,UAAAF,MAACiF,GAAO,QAAS8D,EAAc,SAAU,CAACN,EACvCH,WACCtI,MAACqL,GAAA,UAEA3H,EAAA,CACC,GAAE,sBACF,eAAe,OAAM,EAG3B,EAEA1D,MAAC,QAAK,UAAU,8BACd,SAAAA,MAAC0D,GACC,iCACA,eAAe,eAAc,EAEjC,EAEA1D,MAACiF,EAAA,CAAO,UAAS,GAAC,QAAS2C,EACzB,SAAA5H,MAAC0D,EAAA,CACC,2BACA,eAAe,SAAQ,EAE3B,GACF,EAEAxD,OAAC,OAAI,UAAU,wBACb,UAAAA,OAAC,OAAI,UAAU,iCACb,UAAAF,MAACmF,GAAA,CACC,QAAAC,EACA,SAAAC,EACA,iBAAkByD,GAAqB,GAGvC/H,IAAS,SAAWA,IAAS,UAC7Bf,MAACqE,IACC,aAAcuE,GACd,UAAU,6EAEV,eAAClF,EAAA,CACC,qCACA,eAAe,mBAAkB,EAErC,GAEJ,EAEA1D,MAAC,QACC,UAAU,0CACV,SAAU+I,EAEV,SAAA7I,OAAC,OAAI,UAAU,QACb,UAAAA,OAAC,OAAI,UAAU,cACb,UAAAF,MAACsL,GAAA,CACC,GAAG,cACH,MAAOlD,EAAc,IAAMH,EAC3B,SAAUS,GACV,QAASa,GACT,KAAAzB,EACA,YAAarJ,EAAKG,cAChBmC,IAAS,QACLsB,EAAS4B,mBACT5B,EAAS2B,iBACf,EACA,QAAS,EACT,SAAUoE,EAAY,EAGvBA,GACClI,OAAC,OAAI,UAAU,iCACb,UAAAF,MAACuL,EAAA,CAAS,MAAM,OAAM,EACtBvL,MAACuL,EAAA,CAAS,MAAM,OAAM,EACtBvL,MAACuL,EAAA,CAAS,MAAM,MAAK,GACvB,GAEJ,EAEArL,OAAC,OAAI,UAAU,iBACb,UAAAF,MAACwL,IACC,IAAKpH,GACL,KAAMgE,EAAc,GAAKH,EAAY,EAGvCjI,MAAC,OAAI,UAAU,SAAQ,QAEtB,UACC,UAAU,cACV,QAAS2J,GACT,SAAU5I,IAAS,SAAWqH,EAE9B,eAAC1E,EAAA,CACC,wCACA,eAAe,sBAAqB,EAExC,QAEChB,GAAA,EAAU,GACb,GACF,EACF,GACF,GACF,CAEJ,CACF,EACA8E,GAAaiE,YAAc,eChfpB,MAAMC,GAGRA,CAAC,CAAEC,UAASzM,SAAQ,IACvBc,MAAC,OAAI,UAAU,kCACb,SAAAA,MAAC,MACE2L,WAAQnL,IAAI,CAACoL,EAAQC,IAAc,CAClC,GAAID,IAAW,KACb,aAAQ,MAAoB,UAAU,4BAAtB,OAAOC,CAAC,EAAwC,EAGlE,KAAM,CAAEb,OAAMc,aAAcF,EAE5B,IAAIG,EAEJ,OAAIC,GAAaJ,CAAM,EACrBG,EACE/L,MAAC,UAAO,QAAAd,EAAkB,aAAY2M,EACnCb,WACH,EAEOiB,GAAmBL,CAAM,EAClCG,QACG,KACC,KAAMH,EAAOM,KACb,OAAQN,EAAO7G,QAAU,UACzB,cAAa6G,EAAOO,OACpB,IAAI,WACJ,QAAAjN,EACA,aAAY2M,EAEXb,WACH,EAGFe,EACE/L,MAACoM,IAAK,GAAIR,EAAO/F,GAAI,QAAA3G,EAAkB,aAAY2M,EAChDb,WACH,EAKFhL,MAAC,MACC,UAAWC,EAAW,CACpB,iCAAkC6L,EACnC,EAGAC,YAFI,GAAGf,CAAI,IAAIa,CAAC,EAGnB,CAEJ,CAAC,EACH,EACF,ECtDIQ,GAQDA,CAAC,CAAEpG,QAAOqG,WAAUC,UAAS3E,UAAS4E,yBAAwB,IAAM,CACvE,MAAMC,EAASpM,EAAgBC,GAAUA,EAAMoM,SAAS7K,IAAIyK,CAAQ,CAAC,EAC/DK,EAAYF,iBAAQ5K,IAAI,WACxB+K,EAAsBvM,EAAgBC,UAC1CqM,UAAYrM,IAAMgG,SAASzE,IAAI8K,CAAS,IAA5BrM,cAA+BiH,cAAgBhB,OAC7D,EAEA7G,YAAU,IAAM,CACd,MAAMmN,EAAkBC,GACtB7G,EAAMpE,IAAI,UAAU,CACtB,EAEA2K,SAAwBK,GAAmB,CAAEE,EAAG,IAAKC,EAAG,IAAKC,EAAG,IAAK,EAE9D,IAAM,CACXT,EAAwB,IAAI,EAC9B,EACC,CAACvG,EAAOuG,CAAuB,CAAC,EAEnC,MAAMU,GAAYT,iBAAQpF,MAAM,CAAC,cAAe,UAAU,MACxDoF,iBAAQ5K,IAAI,aACRoG,EAAehC,EAAMoB,MAAM,CAAC,cAAe,aAAa,CAAC,GAC7DpB,EAAMpE,IAAI,aAAa,EAEzB,OACE3B,OAAC,OAAI,UAAU,gCACb,UAAAF,MAAC,OAAI,UAAU,yBACb,SAAAA,MAACsH,GAAA,CACC,IAAKrB,EAAMpE,IAAI,KAAK,EACpB,IAAKoG,EACL,KAAMiF,EACN,OACGjH,EAAMpE,IAAI,aAAa,GAAuB+K,EAEjD,SAAU3G,EAAMoB,MAAM,CAAC,OAAQ,WAAY,UAAU,EAAG,CAAC,EACzD,gBACEpB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,YAAY,CAAC,EAE9C,gBACEpB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,YAAY,CAAC,EAE9C,YAAapB,EAAMoB,MAAM,CAAC,OAAQ,SAAU,QAAQ,CAAC,EACrD,aAAckF,EAAQY,SAAS,EAEnC,EAEAnN,MAAC,OAAI,UAAU,uBACZyM,YACCzM,MAACoN,GAAA,CACC,SAAUX,EAAO5K,IAAI,IAAI,EACzB,eAAc,GACd,QAAA+F,EAAiB,EAGvB,GACF,CAEJ,EC5DMvF,GAAWC,EAAe,CAC9B+K,cAAe,CACb7K,GAAE,+BACFC,eAAc,WAEhB6K,OAAQ,CAAE9K,GAAE,gBAAmBC,eAAc,QAC/C,CAAC,EAEY8K,GAIRA,CAAC,CAAEd,SAAQe,WAAU5F,SAAQ,IAAM,CACtC,MAAMnJ,EAAOa,IAEPmO,EAAiBpN,EACpBC,GAAUA,EAAM4F,QAAQrE,IAAI,iBAAiB,CAChD,EAEMyK,EAAWG,EAAO5K,IAAI,IAAI,EAC1B6L,EAAmBjB,EAAO5K,IAAI,YAAY,EAE1C,CAAC8L,EAASC,CAAU,EAAInO,WAC5BiO,IAAqB,UAAY,UAAYD,CAC/C,EAEMI,EAAkB3K,cAAayF,GAA4B,CAC/DiF,EAAWjF,CAAK,GACf,EAAE,EAECmF,EAAe5K,cAAY,IAAM,CACrCsK,EAASf,EAAQkB,CAAO,EACxB/F,GAAQ,EACP,CAACA,EAAS4F,EAAUf,EAAQkB,CAAO,CAAC,EAEjCI,EAAe7K,cAAY,IAAM,CACrC0E,GAAQ,EACP,CAACA,CAAO,CAAC,EAENoG,EAAgB9K,cACpB,IAAM4D,SAASmH,uBAAuB,uBAAuB,EAAE,CAAC,EAChE,EACF,EAEA,OACE/N,OAAC,OAAI,UAAU,wCACb,UAAAA,OAAC,OAAI,UAAU,2BACb,UAAAA,OAAC,OAAI,UAAU,8BACb,UAAAF,MAAC,OAAI,UAAU,oCACb,SAAAA,MAACuD,GAAK,KAAM2K,EAAY,GAAG,UAAS,EACtC,SAEC,OACC,UAAAlO,MAAC,MACEyM,WAAO5K,IAAI,WAAW,EACrB7B,MAAC0D,GACC,GAAE,0BACF,eAAe,gBAAe,EAGhC1D,MAAC0D,EAAA,CACC,GAAE,qBACF,eAAe,cAAa,EAGlC,EACA1D,MAAC,OACC,SAAAA,MAAC0D,EAAA,CACC,GAAE,oBACF,eAAe,+CACf,OAAQ,CACNyK,MACEjO,OAAC,QAAK,UAAU,qBACd,UAAAF,MAAC,OAAI,iBAAK,EAAM,IAACA,MAACuD,EAAA,CAAK,GAAG,UAAU,KAAM2K,EAAW,GACvD,GAEF,EAEN,GACF,GACF,QAEC,OAAI,UAAU,8BACb,SAAAlO,MAACoO,GAAA,CAAe,SAAA9B,EAAmB,EACrC,GACF,EAEAtM,MAAC,OAAI,UAAWC,EAAW,6BAA6B,EACtD,SAAAC,OAAC,OAAI,UAAU,+BACZ,WAACuM,EAAO5K,IAAI,WAAW,GACtB7B,MAACqO,IACC,SAAQ,GACR,MAAOV,EACP,UAAWK,EACX,SAAUH,EACV,SAAUH,IAAqB,UAAU,EAI7C1N,MAAC,OAAI,UAAU,SAAQ,EAEvBA,MAAC,UAAO,QAAS+N,EAAc,UAAU,cACvC,SAAA/N,MAAC0D,EAAA,CACC,+BACA,eAAe,SAAQ,EAE3B,EAEA1D,MAACiF,EAAA,CACC,QAAS6I,EACT,KAAMrP,EAAKG,cACT6N,EAAO5K,IAAI,WAAW,EAClBQ,GAASgL,cACThL,GAASiL,MACf,EAEA,UAAS,MAEb,EACF,GACF,CAEJ,EC9HagB,EAUTA,CAAC,CACHtP,QACAN,UACA0M,UACAxD,UACA2G,YACAC,YACAC,cACAC,mBAAmB,EACrB,IAAM,CACJ,MAAMzL,EAAcC,cAAY,IAAM,CAChCwL,GACF9G,IAGF2G,GAAU,EACT,CAAC3G,EAAS2G,EAAWG,CAAgB,CAAC,EAEnCC,EAAkBzL,cAAY,IAAM,CACxC0E,IACA6G,YAAc,EACb,CAAC7G,EAAS6G,CAAW,CAAC,EAEnBV,EAAe7K,cAAY,IAAM,CACrC0E,GAAQ,EACP,CAACA,CAAO,CAAC,EAEZ,OACE1H,OAAC,OAAI,UAAU,wCACb,UAAAF,MAAC,OAAI,UAAU,2BACb,SAAAE,OAAC,OAAI,UAAU,oCACb,UAAAF,MAAC,MAAIhB,WAAM,EACXgB,MAAC,KAAGtB,WAAQ,GACd,EACF,QAEC,OAAI,UAAU,8BACb,SAAAwB,OAAC,OAAI,UAAU,+BACb,UAAAF,MAAC,UAAO,QAAS+N,EAAc,UAAU,cACvC,SAAA/N,MAAC0D,EAAA,CACC,+BACA,eAAe,SAAQ,EAE3B,EAEC8K,GACCtO,OAAAoD,WAAA,CACE,UAAAtD,MAAC,OAAI,UAAU,SAAQ,QACtB,UAAO,QAAS2O,EAAiB,UAAU,cACzCH,WACH,GACF,QAIDvJ,EAAA,CAAO,QAAShC,EAAa,UAAS,GACpCmI,WACH,GACF,EACF,GACF,CAEJ,ECxEM/I,EAAWC,EAAe,CAC9BsM,sBAAuB,CACrBpM,GAAE,8BACFC,eAAc,0BAEhBoM,wBAAyB,CACvBrM,GAAE,gCACFC,eAAc,sJAGhBqM,wBAAyB,CACvBtM,GAAE,gCACFC,eAAc,oBAEhBsM,YAAa,CACXvM,GAAE,6BACFC,eAAc,gBAEhBuM,cAAe,CACbxM,GAAE,+BACFC,eAAc,gDAEhBwM,cAAe,CACbzM,GAAE,+BACFC,eAAc,SAElB,CAAC,EAEYyM,GAKTA,CAAC,CAAE5C,WAAU6C,cAAavH,SAAQ,IAAM,CAC1C,MAAMnJ,EAAOa,IACPF,EAAWC,IAEXkP,EAAYrL,cAAY,IAAM,CAClC9D,EAASgQ,GAAa9C,EAAU6C,CAAW,CAAC,GAC3C,CAAC/P,EAAUkN,EAAU6C,CAAW,CAAC,EAEpC,OACEnP,MAACsO,EAAA,CACC,MAAO7P,EAAKG,cACVuQ,EAAc9M,EAASuM,sBAAwBvM,EAAS0M,WAC1D,EACA,QAAStQ,EAAKG,cACZuQ,EAAc9M,EAASwM,wBAA0BxM,EAAS2M,aAC5D,EACA,QAASvQ,EAAKG,cACZuQ,EAAc9M,EAASyM,wBAA0BzM,EAAS4M,aAC5D,EACA,UAAAV,EACA,QAAA3G,EAAiB,CAGvB,ECrDMvF,EAAWC,EAAe,CAC9B+M,gBAAiB,CACf7M,GAAE,kCACFC,eAAc,gBAEhB6M,kBAAmB,CACjB9M,GAAE,oCACFC,eAAc,0DAEhB8M,kBAAmB,CACjB/M,GAAE,oCACFC,eAAc,SAElB,CAAC,EAEY+M,GAKTA,CAAC,CAAEC,SAAQC,WAAU9H,SAAQ,IAAM,CACrC,MAAMnJ,EAAOa,IACPF,EAAWC,IACXsQ,EAAUC,KAEVrB,EAAYrL,cAAY,IAAM,CAClC9D,EAASyQ,GAAWJ,CAAM,CAAC,EAEvBC,EACFtQ,EAAS0Q,GAAaJ,CAAQ,CAAC,EAE/BC,EAAQI,KAAK,QAAQ,CACvB,EACC,CAAC3Q,EAAUuQ,EAASD,EAAUD,CAAM,CAAC,EAExC,OACEzP,MAACsO,GACC,MAAO7P,EAAKG,cAAcyD,EAASgN,eAAe,EAClD,QAAS5Q,EAAKG,cAAcyD,EAASiN,iBAAiB,EACtD,QAAS7Q,EAAKG,cAAcyD,EAASkN,iBAAiB,EACtD,UAAAhB,EACA,QAAA3G,EAAiB,CAGvB,EC9CMvF,EAAWC,EAAe,CAC9B0N,WAAY,CACVxN,GAAE,4BACFC,eAAc,mBAEhBwN,aAAc,CAAEzN,GAAE,8BAAiCC,eAAc,SACjEyN,aAAc,CACZ1N,GAAE,8BACFC,eAAc,yGAGlB,CAAC,EAEY0N,GAITA,CAAC,CAAE1D,SAAQ7E,SAAQ,IAAM,CAC3B,MAAMnJ,EAAOa,IACPF,EAAWC,IAEXkP,EAAYrL,cAAY,IAAM,CAClC9D,EAASgR,GAAa3D,CAAM,CAAC,GAC5B,CAACrN,EAAUqN,CAAM,CAAC,EAErB,OACEzM,MAACsO,GACC,MAAO7P,EAAKG,cAAcyD,EAAS2N,UAAU,EAC7C,QAASvR,EAAKG,cAAcyD,EAAS6N,YAAY,EACjD,QAASzR,EAAKG,cAAcyD,EAAS4N,YAAY,EACjD,UAAA1B,EACA,QAAA3G,EAAiB,CAGvB,ECnCMvF,EAAWC,EAAe,CAC9B+N,UAAW,CACT7N,GAAE,2BACFC,eAAc,mBAEhB6N,YAAa,CAAE9N,GAAE,6BAAgCC,eAAc,QAC/D8N,YAAa,CACX/N,GAAE,6BACFC,eAAc,wGAGlB,CAAC,EAEY+N,GAITA,CAAC,CAAElE,WAAU1E,SAAQ,IAAM,CAC7B,MAAMnJ,EAAOa,IACPF,EAAWC,IAEXkP,EAAYrL,cAAY,IAAM,CAClC9D,EAASqR,GAAWnE,CAAQ,CAAC,GAC5B,CAAClN,EAAUkN,CAAQ,CAAC,EAEvB,OACEtM,MAACsO,GACC,MAAO7P,EAAKG,cAAcyD,EAASgO,SAAS,EAC5C,QAAS5R,EAAKG,cAAcyD,EAASkO,WAAW,EAChD,QAAS9R,EAAKG,cAAcyD,EAASiO,WAAW,EAChD,UAAA/B,EACA,QAAA3G,EAAiB,CAGvB,ECjCMvF,GAAWC,EAAe,CAC9BoO,cAAe,CACblO,GAAE,+BACFC,eAAc,kBAEhBkO,gBAAiB,CACfnO,GAAE,iCACFC,eAAc,WAElB,CAAC,EAEYmO,GAITA,CAAC,CAAExK,UAASwB,SAAQ,IAAM,CAC5B,MAAMnJ,EAAOa,IACPF,EAAWC,IAEXkP,EAAYrL,cAAY,IAAM,CAClC9D,EAASyR,GAAgBzK,EAAQ5D,EAAE,CAAC,GACnC,CAACpD,EAAUgH,EAAQ5D,EAAE,CAAC,EAEzB,OACExC,MAACsO,EAAA,CACC,MAAO7P,EAAKG,cAAcyD,GAASqO,aAAa,EAChD,cACGhN,EAAA,CACC,GAAE,iCACF,eAAe,4CACf,OAAQ,CAAEoN,YAAO,UAAO,cAAE1K,EAAQ2K,MAAK,GAAY,EAGvD,QAAStS,EAAKG,cAAcyD,GAASsO,eAAe,EACpD,UAAApC,EACA,QAAA3G,EAAiB,CAGvB,ECvCMvF,EAAWC,EAAe,CAC9B0O,WAAY,CACVxO,GAAE,4BACFC,eAAc,wBAEhBwO,aAAc,CACZzO,GAAE,mCACFC,eAAc,sEAGhByO,aAAc,CACZ1O,GAAE,sBACFC,eAAc,sBAElB,CAAC,EAEY0O,GAETA,CAAC,CAAEvJ,SAAQ,IAAM,CACnB,MAAMnJ,EAAOa,IACPF,EAAWC,IAEXkP,EAAYrL,cAAY,IAAM,CAC7B9D,EAASgS,IAAoB,GACjC,CAAChS,CAAQ,CAAC,EAEb,OACEY,MAACsO,GACC,MAAO7P,EAAKG,cAAcyD,EAAS2O,UAAU,EAC7C,QAASvS,EAAKG,cAAcyD,EAAS4O,YAAY,EACjD,QAASxS,EAAKG,cAAcyD,EAAS6O,YAAY,EACjD,UAAA3C,EACA,QAAA3G,EAAiB,CAGvB,EC3CA,eAAsByJ,IAAS,CAC7B,GAAI,CACF,MAAMC,EAAW,MAAMC,GAAI,EAAK,EAAEC,OAChC,iBACA,CAAEC,QAAS,CAAEC,OAAQ,oBAAsBC,gBAAiB,GAC9D,EAEIL,EAAS7E,SAAW,KAAO6E,EAASvG,KAAK6G,YAC3CC,OAAOC,SAAS5F,KAAOoF,EAASvG,KAAK6G,YAErCG,QAAQ7Q,MACN,6EACAoQ,CACF,QACKpQ,EAAO,CACd6Q,QAAQ7Q,MAAM,2CAA4CA,CAAK,EAEnE,CCVA,MAAMmB,EAAWC,EAAe,CAC9B0P,YAAa,CAAExP,GAAE,6BAAgCC,eAAc,YAC/DwP,cAAe,CACbzP,GAAE,+BACFC,eAAc,qCAEhByP,cAAe,CACb1P,GAAE,+BACFC,eAAc,UAElB,CAAC,EAEY0P,GAA2DA,CAAC,CACvEvK,SACF,IAAM,CACJ,MAAMnJ,EAAOa,IAEPiP,EAAYrL,cAAY,IAAM,CAC7BmO,IAAO,EACX,EAAE,EAEL,OACErR,MAACsO,GACC,MAAO7P,EAAKG,cAAcyD,EAAS2P,WAAW,EAC9C,QAASvT,EAAKG,cAAcyD,EAAS4P,aAAa,EAClD,QAASxT,EAAKG,cAAcyD,EAAS6P,aAAa,EAClD,UAAA3D,EACA,QAAA3G,EAAiB,CAGvB,EChCMvF,GAAWC,EAAe,CAC9BtD,MAAO,CACLwD,GAAE,qCACFC,eAAc,gBAEhB2I,QAAS,CACP5I,GAAE,uCACFC,eAAc,yBAElB,CAAC,EAEY2P,GAKTA,CAAC,CAAEzF,YAAW4B,YAAW3G,SAAQ,IAAM,CACzC,MAAMnJ,EAAOa,IACP8G,EAAU/F,EAAgBC,GAAUA,EAAMgG,SAASzE,IAAI8K,CAAS,CAAC,EAEvE,OACE3M,MAACsO,EAAA,CACC,MAAO7P,EAAKG,cAAcyD,GAASrD,KAAK,EACxC,cACG0E,EAAA,CACC,GAAE,uCACF,eAAe,yDACf,OAAQ,CAAEoN,YAAO,UAAO,cAAE1K,iBAAS2K,MAAK,GAAY,EAGxD,QAAStS,EAAKG,cAAcyD,GAAS+I,OAAO,EAC5C,UAAAmD,EACA,QAAA3G,EAAiB,CAGvB,EC5BMvF,EAAWC,EAAe,CAC9BtD,MAAO,CACLwD,GAAE,uCACFC,eAAc,iBAEhB2I,QAAS,CACP5I,GAAE,yCACFC,eAAc,gBAEhB/D,QAAS,CACP8D,GAAE,yCACFC,eAAc,qHAGhB+L,UAAW,CACThM,GAAE,2CACFC,eAAc,cAElB,CAAC,EAEY4P,GAETA,CAAC,CAAEzK,SAAQ,IAAM,CACnB,MAAMnJ,EAAOa,IACPF,EAAWC,IACX+F,EAAU/E,EACbC,UAEIA,WAAM4F,QAA0CrE,IAC/C,mBACF,EAECsE,KACEF,GACC,CAAC,QAAS,MAAM,EAAEqM,SAASrM,EAAMpE,IAAI,MAAM,CAAW,IACpDoE,EAAMpE,IAAI,aAAa,GAAK,IAAetB,SAAW,CAC5D,IARCD,cASCuB,IAAI,MACZ,EAEM0Q,EAAgBrP,cAAY,IAAM,CACtC9D,EACEoT,GAAU,CACRC,UAAW,cACXC,WAAY,CACVtN,UACF,CACD,CACH,GACC,CAAChG,EAAUgG,CAAO,CAAC,EAEhBuJ,EAAkBzL,cAAY,IAAM,CACxC9D,EAASuT,IAAe,GACvB,CAACvT,CAAQ,CAAC,EAEb,OACEY,MAACsO,EAAA,CACC,MAAO7P,EAAKG,cAAcyD,EAASrD,KAAK,EACxC,QAASP,EAAKG,cAAcyD,EAAS3D,OAAO,EAC5C,QAASD,EAAKG,cAAcyD,EAAS+I,OAAO,EAC5C,UAAW3M,EAAKG,cAAcyD,EAASmM,SAAS,EAChD,UAAW+D,EACX,YAAa5D,EACb,QAAA/G,CAAA,CAAiB,CAGvB,ECrEMvF,GAAWC,EAAe,CAC9BsQ,MAAO,CAAEpQ,GAAE,iBAAoBC,eAAc,QAC/C,CAAC,EAEYoQ,GAIRA,CAAC,CAAEC,MAAKC,MAAKnL,SAAQ,IAAM,CAC9B,MAAMnJ,EAAOa,IACP,CAAC0T,EAAkBC,CAAmB,EAAIxT,WAAS,EAAK,EAExDyT,EAAmBhQ,cAAY,IAAM,CACzC+P,EAAqBE,GAAc,CAACA,CAAS,GAC5C,CAACF,CAAmB,CAAC,EAElBG,EAAsBnT,EAAW,0BAA2B,CAChE,kCAAmC+S,EACpC,EAED,OACE9S,OAAC,OAAI,UAAU,gCACb,UAAAF,MAAC,OACC,UAAU,sBACV,KAAK,eACL,QAAS4H,EAET,SAAA5H,MAACqT,GAAA,CACC,IAAAP,EACA,MAAO,IACP,OAAQ,IACR,IAAAC,EACA,QAASG,EAAiB,EAE9B,EAEAlT,MAAC,OAAI,UAAWoT,EACd,SAAApT,MAAC,OAAI,UAAU,uBACb,SAAAA,MAACsT,GAAA,CACC,UAAU,qBACV,MAAO7U,EAAKG,cAAcyD,GAASuQ,KAAK,EACxC,KAAK,QACL,cAAeW,GACf,QAAS3L,EAAQ,EAErB,EACF,GACF,CAEJ,ECpDa4L,GAIRA,CAAC,CAAE5R,UAASgG,UAAS6L,SAAQ,IAAM,CACtC,MAAMC,EAAcxQ,cAAY,IAAM,CACpC0E,EAAQrB,OAAW,EAAK,GACvB,CAACqB,CAAO,CAAC,EAEN+L,EAAczQ,cAAY,IAAM,CAChCuQ,GAASA,GAAQ,EACpB,CAACA,CAAO,CAAC,EAEZ,OACEzT,MAAC,OAAI,UAAU,sCAAsC,YAAW4B,EAC7DA,WACC5B,MAACqL,GAAA,EAAgB,EAEjBnL,OAAC,OAAI,UAAU,2BACb,UAAAF,MAAC4T,IACC,IAAI,YACJ,UAAU,YACV,UAAU,kCAAiC,EAG7C1T,OAAC,OAAI,UAAU,oCACb,UAAAF,MAAC,KACC,SAAAA,MAAC0D,EAAA,CACC,gCACA,eAAe,kDAAiD,EAEpE,EAEAxD,OAAC,OAAI,UAAU,6CACb,UAAAF,MAACiF,EAAA,CAAO,QAAS0O,EACf,SAAA3T,MAAC0D,GACC,8BACA,eAAe,YAAW,EAE9B,EACA1D,MAACiF,EAAA,CAAO,QAASyO,EAAa,UAAU,yBACtC,SAAA1T,MAAC0D,EAAA,CACC,8BACA,eAAe,QAAO,EAE1B,GACF,GACF,GACF,EAEJ,CAEJ,EClDMhC,GAAkBA,CAACpB,EAAO,CAAEgM,UAAS,KAAO,CAChDG,OAAQnM,EAAM+G,MAAM,CAAC,WAAYiF,CAAQ,CAAC,CAC5C,GAEA,MAAMuH,WAAmBC,EAAuB,CAe9CC,mBAAqB,CACnB,KAAM,CAAE9N,QAAOuG,2BAA4B,KAAKrK,MAE1C0K,EAAkBC,GAAuB7G,EAAMpE,IAAI,UAAU,CAAC,EAEhEgL,GACFL,EAAwBK,CAAe,CACzC,CAGFmH,sBAAwB,CACtB,KAAK7R,MAAMqK,wBAAwB,IAAI,EAGzCyH,QAAU,CACR,KAAM,CAAEhO,QAAOwG,SAAQ7E,WAAY,KAAKzF,MAClCoK,EAAU,KAAKpK,MAAMoK,SAAW,GAChCW,EAAWT,EAAOpF,MAAM,CAAC,cAAe,UAAU,CAAC,GAAKoF,EAAO5K,IAAI,UAAU,EAC7EoG,EAAchC,EAAMoB,MAAM,CAAC,cAAe,aAAa,CAAC,GAAKpB,EAAMpE,IAAI,aAAa,EAE1F,OACE3B,OAAC,OAAI,UAAU,gCACb,UAAAF,MAAC,OAAI,UAAU,yBACb,SAAAA,MAACoH,IACC,QAASnB,EAAMpE,IAAI,aAAa,EAChC,UAAWoE,EAAMoB,MAAM,CAAC,OAAQ,WAAY,YAAY,CAAC,EACzD,YAAa,GAAGpB,EAAMoB,MAAM,CAAC,OAAQ,WAAY,OAAO,CAAC,CAAC,MAAMpB,EAAMoB,MAAM,CAAC,OAAQ,WAAY,QAAQ,CAAC,CAAC,GAC3G,SAAUpB,EAAMpE,IAAI,UAAU,EAC9B,IAAKoE,EAAMpE,IAAI,KAAK,EACpB,UAAW0K,EAAQ2H,UACnB,aAAc3H,EAAQY,SACtB,YAAaZ,EAAQ4H,cACrB,aAAcvM,EACd,UAAS,GACT,SAAQ,GACR,IAAKK,EACL,KAAMiF,EAAS,EAEnB,EAEAlN,MAAC,OAAI,UAAU,uBACZyM,YAAUzM,MAACoN,GAAA,CAAO,SAAUX,EAAO5K,IAAI,IAAI,EAAG,eAAc,GAAC,QAAA+F,EAAiB,EACjF,GACF,EAIN,CA5DEwM,EAFIP,GAEGQ,YAAY,CACjBpO,MAAOqO,GAAmB9T,IAAI+T,WAC9BjI,SAAUkI,EAAUC,OACpBhI,OAAQ6H,GAAmB9T,IAC3B+L,QAASiI,EAAUE,MAAM,CACvBR,UAAWM,EAAUG,OACrBxH,SAAUqH,EAAUI,KACpBT,cAAeK,EAAUG,OAC1B,EACD/M,QAAS4M,EAAUK,KAAKN,WACxB/H,wBAAyBgI,EAAUK,KAAKN,aAoD5C,MAAAO,GAAetT,EAAQE,GAAiB,KAAM,KAAM,CAAE+F,WAAY,EAAK,CAAC,EAAEoM,EAAU,EChCvEkB,GAAmB,CAC9B,MAASC,IAAMhL,QAAQiL,QAAQ,CAAE5K,QAAS6K,GAAY,EACtD,MAASC,IAAMnL,QAAQiL,QAAQ,CAAE5K,QAASwJ,GAAY,EACtD,MAASuB,IAAMpL,QAAQiL,QAAQ,CAAE5K,QAASgC,GAAY,EACtD,MAASgJ,IAAMrL,QAAQiL,QAAQ,CAAE5K,QAASwI,GAAY,EACtD,MAASyC,IAAMtL,QAAQiL,QAAQ,CAAE5K,QAASkD,GAAY,EACtD,QAAWgI,IAAMvL,QAAQiL,QAAQ,CAAE5K,QAASiE,EAAmB,EAC/D,sBAAyBkH,IAAMxL,QAAQiL,QAAQ,CAAE5K,QAAS6E,GAA0B,EACpF,oBAAuBuG,IAAMzL,QAAQiL,QAAQ,CAAE5K,QAASmF,GAAwB,EAChF,cAAiBkG,IAAM1L,QAAQiL,QAAQ,CAAE5K,QAAS8F,GAAmB,EACrE,oBAAuBwF,IAAM3L,QAAQiL,QAAQ,CAAE5K,QAASmG,GAAwB,EAChF,iBAAoBoF,IAAM5L,QAAQiL,QAAQ,CAAE5K,QAASuG,GAAsB,EAC3E,4BAA+BiF,IAAM7L,QAAQiL,QAAQ,CAAE5K,QAAS8G,GAAgC,EAChG,gBAAmB2E,IAAM9L,QAAQiL,QAAQ,CAAE5K,QAAS8H,GAAoB,EACxE,uBAA0B4D,IAAM/L,QAAQiL,QAAQ,CAAE5K,QAAS+H,GAA0B,EACrF,yBAA4B4D,IAAMhM,QAAQiL,QAAQ,CAAE5K,QAASgI,GAA4B,EACzF,KAAQ4D,GACR,MAASC,GACT,aAAgBC,GAChB,OAAUC,GACV,QAAWC,IAAMrM,QAAQiL,QAAQ,CAAE5K,QAASqB,GAAc,EAC1D,MAAS4K,GACT,YAAeC,IAAMvM,QAAQiL,QAAQ,CAAE5K,QAAS7C,GAAc,EAC9D,WAAcgP,GACd,gBAAmBC,GACnB,OAAUC,GACV,qBAAwBC,GACxB,YAAeC,GACf,qBAAwBC,GACxB,qBAAwBC,GACxB,cAAiBC,EACnB,EAEA,MAAqBC,WAAkBC,eAAc,CAArD,kCASE3W,eAAQ,CACNuM,gBAAiB,OAiBnBqK,4BAAqBC,GAAS,CAC5B,KAAKC,SAAS,CAAEvK,gBAAiBsK,EAAO,IAG1CE,uBAAgBA,IAAM,CACpB,KAAM,CAAEzP,WAAY,KAAKzF,MAEzB,OAAOnC,MAACwT,GAAA,CAAiB,QAAO,GAAC,QAAA5L,CAAA,CAAiB,IAGpD0P,qBAAenV,GAAU,CACvB,KAAM,CAAEyF,WAAY,KAAKzF,MAEzB,OAAOnC,MAACwT,GAAA,CAAiB,GAAIrR,EAAO,QAAAyF,CAAA,CAAiB,IAGvD8L,qBAAcA,CAAC6D,EAAc,KAAU,SACrC,KAAM,CAAE3P,WAAY,KAAKzF,MACnBzD,GAAU8Y,GAAAC,EAAA,KAAKC,SAAL,YAAAD,EAAatM,8BAAb,YAAAqM,EAAA,KAAAC,GAChB7P,EAAQlJ,EAAS6Y,CAAW,IAG9BI,qBAAeC,GAAM,CACnB,KAAKF,OAASE,IArChBC,yBAA2B,CACzB,MAAO,CAAEC,QAAS,CAAC,CAAC,KAAK3V,MAAMpB,KAAK,CAGtCgX,mBAAoBC,EAAW7E,EAAW,CAAE2E,WAAW,CACjDA,GACFhR,SAASmR,KAAKC,UAAUC,IAAI,qBAAqB,EACjDrR,SAASsR,gBAAgBzS,MAAM0S,YAAc,GAAGC,IAAmB,OAEnExR,SAASmR,KAAKC,UAAUK,OAAO,qBAAqB,EACpDzR,SAASsR,gBAAgBzS,MAAM0S,YAAc,IAC/C,CA6BFpE,QAAU,CACR,KAAM,CAAElT,OAAMoB,QAAOoV,eAAgB,KAAKpV,MACpC,CAAE0K,mBAAoB,KAAKvM,MAC3BwX,EAAU,CAAC,CAAC/W,EAElB,OACEf,MAACwY,IAAK,gBAAA3L,EAAkC,QAAS,KAAK6G,YAAa,YAAA6D,EAChEO,YACC5X,OAAAoD,WAAA,CACE,UAAAtD,MAACuB,GAAA,CAAgB,eAAgBwT,GAAiBhU,CAAI,EAAG,QAAS,KAAKsW,cAAe,MAAO,KAAKC,YAAa,YAAa,IACxHmB,YACOzY,MAACyY,EAAA,CAAkB,GAAItW,EAAO,wBAAyB,KAAK+U,mBAAoB,QAAS,KAAKxD,YAAa,IAAK,KAAKiE,YAAY,EAE5I,EAEA3X,MAAC0Y,IACC,SAAA1Y,MAAC,QAAK,KAAK,SAAS,QAAQ,UAAS,EACvC,GACF,EAEJ,EAIN,CCvJA,MAAM2Y,GAAe,GAEfjX,GAAkBpB,IAAU,CAChCiX,YAAajX,EAAM+G,MAAM,CAAC,QAAS,aAAa,CAAC,EACjDtG,KAAMT,EAAM+G,MAAM,CAAC,QAAS,QAAS,EAAG,WAAW,EAAG,IAAI,EAC1DlF,MAAO7B,EAAM+G,MAAM,CAAC,QAAS,QAAS,EAAG,YAAY,EAAGsR,EAAY,CACtE,GAEMxX,GAAqB/B,IAAa,CACtCwI,QAASgR,EAAqBrB,EAAc,GAAO,CAE/CnY,EADEwZ,EAEApG,GAAU,CACRqG,mBAAoBD,EAAoBzW,MACxCsQ,UAAW,UACXC,WAAY,CACVhU,QAASka,EAAoBla,QAC7B0M,QAASwN,EAAoBxN,QAC7BmD,UAAWA,IAAMnP,EAAS0Z,GAAW,CACnCrG,UAAWlM,OACXgR,YAAa,CAAEA,aAAY,CAC7B,CAAC,CAAC,CACJ,CACF,CAAC,EAGMuB,GAAW,CAClBrG,UAAWlM,OACXgR,YAAa,CAAEA,aAAY,CAC7B,CAAC,CALD,CAOJ,CACF,GAEAwB,GAAevX,EAAQE,GAAiBP,EAAkB,EAAE6V,EAAS","names":["formatIfNeeded","intl","message","values","formatMessage","Alert","alert","key","title","action","onClick","dismissAfter","dispatch","useAppDispatch","useIntl","active","setActive","useState","useEffect","setActiveTimeout","setTimeout","clearTimeout","dismissTimeout","dismissAlert","jsx","classNames","jsxs","AlertsController","alerts","useAppSelector","state","length","map","idx","BUNDLE_FETCH_REQUEST","BUNDLE_FETCH_SUCCESS","BUNDLE_FETCH_FAIL","fetchBundleRequest","skipLoading","type","fetchBundleSuccess","fetchBundleFail","error","mapDispatchToProps","onFetch","onFetchSuccess","onFetchFail","BundleContainer","connect","Bundle","mapStateToProps","ownProps","loading","get","scope","LoadingBarContainer","LoadingBar","WrappedComponent","SvgQuestionMark","props","React.createElement","messages","defineMessages","help","id","defaultMessage","InfoButton","open","setOpen","triggerRef","useRef","accessibilityId","useId","handleClick","useCallback","handleMouseDown","handleMouseUp","useSelectableClick","Fragment","Icon","QuestionMarkIcon","Overlay","FormattedMessage","h1","node","p","ul","li","placeholderVisual","placeholderHearing","discardMessage","discardConfirm","MAX_LENGTH","UploadButton","children","onSelectFile","mimeTypes","fileRef","current","click","handleChange","e","file","target","files","Button","display","Preview","mediaId","position","onPositionChange","draggingRef","nodeRef","x","y","style","useSpring","to","left","top","immediate","media","compose","find","account","me","accounts","undefined","dragging","setDragging","setRef","button","handleMouseMove","getPointerPosition","document","removeEventListener","nativeEvent","addEventListener","animated","GIFV","Video","getIn","Audio","avatar_static","AltTextModal","forwardRef","previousDescription","previousPosition","onClose","ref","lang","focusX","focusY","description","setDescription","setPosition","isDetecting","setIsDetecting","isSaving","setIsSaving","dirtyRef","valid","handleDescriptionChange","value","handleThumbnailChange","uploadThumbnail","handlePositionChange","handleSubmit","changeUploadCompose","focus","toFixed","then","catch","err","showAlertForError","handleKeyUp","ctrlKey","metaKey","preventDefault","handleDetectClick","fetchTesseract","createWorker","tesseractWorkerPath","tesseractCorePath","Promise","all","__vitePreload","worker","workerPath","default","corePath","langPath","assetHost","cacheMethod","image","URL","createObjectURL","result","recognize","data","text","terminate","useImperativeHandle","getCloseConfirmationMessage","confirm","LoadingIndicator","Textarea","Skeleton","CharacterCounter","displayName","ActionsModal","actions","option","i","dangerous","element","isActionItem","isExternalLinkItem","href","method","Link","AudioModal","statusId","options","onChangeBackgroundColor","status","statuses","accountId","accountStaticAvatar","backgroundColor","getAverageFromBlurhash","r","g","b","language","autoPlay","Footer","cancel_reblog","reblog","BoostModal","onReblog","defaultPrivacy","statusVisibility","privacy","setPrivacy","onPrivacyChange","handleReblog","handleCancel","findContainer","getElementsByClassName","RepeatIcon","combo","EmbeddedStatus","PrivacyDropdown","ConfirmationModal","onConfirm","secondary","onSecondary","closeWhenConfirm","handleSecondary","deleteAndRedraftTitle","deleteAndRedraftMessage","deleteAndRedraftConfirm","deleteTitle","deleteMessage","deleteConfirm","ConfirmDeleteStatusModal","withRedraft","deleteStatus","deleteListTitle","deleteListMessage","deleteListConfirm","ConfirmDeleteListModal","listId","columnId","history","useHistory","deleteList","removeColumn","push","replyTitle","replyConfirm","replyMessage","ConfirmReplyModal","replyCompose","editTitle","editConfirm","editMessage","ConfirmEditStatusModal","editStatus","unfollowTitle","unfollowConfirm","ConfirmUnfollowModal","unfollowAccount","name","acct","clearTitle","clearMessage","clearConfirm","ConfirmClearNotificationsModal","clearNotifications","logOut","response","api","delete","headers","Accept","withCredentials","redirect_to","window","location","console","logoutTitle","logoutMessage","logoutConfirm","ConfirmLogOutModal","ConfirmFollowToListModal","ConfirmMissingAltTextModal","includes","handleConfirm","openModal","modalType","modalProps","submitCompose","close","ImageModal","src","alt","navigationHidden","setNavigationHidden","toggleNavigation","prevState","navigationClassName","ZoomableImage","IconButton","CloseIcon","ModalPlaceholder","onRetry","handleClose","handleRetry","GIF","VideoModal","ImmutablePureComponent","componentDidMount","componentWillUnmount","render","startTime","defaultVolume","__publicField","propTypes","ImmutablePropTypes","isRequired","PropTypes","string","shape","number","bool","func","VideoModal$1","MODAL_COMPONENTS","MEDIA","resolve","MediaModal","VIDEO","AUDIO","IMAGE","BOOST","CONFIRM","CONFIRM_DELETE_STATUS","CONFIRM_DELETE_LIST","CONFIRM_REPLY","CONFIRM_EDIT_STATUS","CONFIRM_UNFOLLOW","CONFIRM_CLEAR_NOTIFICATIONS","CONFIRM_LOG_OUT","CONFIRM_FOLLOW_TO_LIST","CONFIRM_MISSING_ALT_TEXT","MuteModal","BlockModal","DomainBlockModal","ReportModal","ACTIONS","EmbedModal","FOCAL_POINT","ListAdder","CompareHistoryModal","FilterModal","SubscribedLanguagesModal","InteractionModal","ClosedRegistrationsModal","IgnoreNotificationsModal","AnnualReportModal","ModalRoot","PureComponent","setBackgroundColor","color","setState","renderLoading","renderError","ignoreFocus","_b","_a","_modal","setModalRef","c","getSnapshotBeforeUpdate","visible","componentDidUpdate","prevProps","body","classList","add","documentElement","marginRight","getScrollbarWidth","remove","Base","SpecificComponent","Helmet","defaultProps","confirmationMessage","previousModalProps","closeModal","ModalContainer"],"ignoreList":[],"sources":["../../app/javascript/mastodon/components/alerts_controller.tsx","../../app/javascript/mastodon/actions/bundles.js","../../app/javascript/mastodon/features/ui/containers/bundle_container.js","../../app/javascript/mastodon/features/ui/containers/loading_bar_container.js","../../app/javascript/material-icons/400-24px/question_mark.svg?react","../../app/javascript/mastodon/features/alt_text_modal/components/info_button.tsx","../../app/javascript/mastodon/features/alt_text_modal/index.tsx","../../app/javascript/mastodon/features/ui/components/actions_modal.tsx","../../app/javascript/mastodon/features/ui/components/audio_modal.tsx","../../app/javascript/mastodon/features/ui/components/boost_modal.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/confirmation_modal.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/delete_status.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/delete_list.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/reply.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/edit_status.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/unfollow.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/clear_notifications.tsx","../../app/javascript/mastodon/utils/log_out.ts","../../app/javascript/mastodon/features/ui/components/confirmation_modals/log_out.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/follow_to_list.tsx","../../app/javascript/mastodon/features/ui/components/confirmation_modals/missing_alt_text.tsx","../../app/javascript/mastodon/features/ui/components/image_modal.tsx","../../app/javascript/mastodon/features/ui/components/modal_placeholder.tsx","../../app/javascript/mastodon/features/ui/components/video_modal.jsx","../../app/javascript/mastodon/features/ui/components/modal_root.jsx","../../app/javascript/mastodon/features/ui/containers/modal_container.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { useIntl } from 'react-intl';\nimport type { IntlShape } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { dismissAlert } from 'mastodon/actions/alerts';\nimport type {\n  Alert,\n  TranslatableString,\n  TranslatableValues,\n} from 'mastodon/models/alert';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nconst formatIfNeeded = (\n  intl: IntlShape,\n  message: TranslatableString,\n  values?: TranslatableValues,\n) => {\n  if (typeof message === 'object') {\n    return intl.formatMessage(message, values);\n  }\n\n  return message;\n};\n\nconst Alert: React.FC<{\n  alert: Alert;\n  dismissAfter: number;\n}> = ({\n  alert: { key, title, message, values, action, onClick },\n  dismissAfter,\n}) => {\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n  const [active, setActive] = useState(false);\n\n  useEffect(() => {\n    const setActiveTimeout = setTimeout(() => {\n      setActive(true);\n    }, 1);\n\n    return () => {\n      clearTimeout(setActiveTimeout);\n    };\n  }, []);\n\n  useEffect(() => {\n    const dismissTimeout = setTimeout(() => {\n      setActive(false);\n\n      // Allow CSS transition to finish before removing from the DOM\n      setTimeout(() => {\n        dispatch(dismissAlert({ key }));\n      }, 500);\n    }, dismissAfter);\n\n    return () => {\n      clearTimeout(dismissTimeout);\n    };\n  }, [dispatch, setActive, key, dismissAfter]);\n\n  return (\n    <div\n      className={classNames('notification-bar', {\n        'notification-bar-active': active,\n      })}\n    >\n      <div className='notification-bar-wrapper'>\n        {title && (\n          <span className='notification-bar-title'>\n            {formatIfNeeded(intl, title, values)}\n          </span>\n        )}\n\n        <span className='notification-bar-message'>\n          {formatIfNeeded(intl, message, values)}\n        </span>\n\n        {action && (\n          <button className='notification-bar-action' onClick={onClick}>\n            {formatIfNeeded(intl, action, values)}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const AlertsController: React.FC = () => {\n  const alerts = useAppSelector((state) => state.alerts);\n\n  if (alerts.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className='notification-list'>\n      {alerts.map((alert, idx) => (\n        <Alert key={alert.key} alert={alert} dismissAfter={5000 + idx * 1000} />\n      ))}\n    </div>\n  );\n};\n","export const BUNDLE_FETCH_REQUEST = 'BUNDLE_FETCH_REQUEST';\nexport const BUNDLE_FETCH_SUCCESS = 'BUNDLE_FETCH_SUCCESS';\nexport const BUNDLE_FETCH_FAIL = 'BUNDLE_FETCH_FAIL';\n\nexport function fetchBundleRequest(skipLoading) {\n  return {\n    type: BUNDLE_FETCH_REQUEST,\n    skipLoading,\n  };\n}\n\nexport function fetchBundleSuccess(skipLoading) {\n  return {\n    type: BUNDLE_FETCH_SUCCESS,\n    skipLoading,\n  };\n}\n\nexport function fetchBundleFail(error, skipLoading) {\n  return {\n    type: BUNDLE_FETCH_FAIL,\n    error,\n    skipLoading,\n  };\n}\n","import { connect } from 'react-redux';\n\nimport { fetchBundleRequest, fetchBundleSuccess, fetchBundleFail } from '../../../actions/bundles';\nimport Bundle from '../components/bundle';\n\nconst mapDispatchToProps = dispatch => ({\n  onFetch () {\n    dispatch(fetchBundleRequest());\n  },\n  onFetchSuccess () {\n    dispatch(fetchBundleSuccess());\n  },\n  onFetchFail (error) {\n    dispatch(fetchBundleFail(error));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(Bundle);\n","import { connect }    from 'react-redux';\n\nimport LoadingBar from 'react-redux-loading-bar';\n\nconst mapStateToProps = (state, ownProps) => ({\n  loading: state.get('loadingBar')[ownProps.scope || 'default'],\n});\n\nexport default connect(mapStateToProps)(LoadingBar.WrappedComponent);\n","import * as React from \"react\";\nconst SvgQuestionMark = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M424-320q0-81 14.5-116.5T500-514q41-36 62.5-62.5T584-637q0-41-27.5-68T480-732q-51 0-77.5 31T365-638l-103-44q21-64 77-111t141-47q105 0 161.5 58.5T698-641q0 50-21.5 85.5T609-475q-49 47-59.5 71.5T539-320H424Zm56 240q-33 0-56.5-23.5T400-160q0-33 23.5-56.5T480-240q33 0 56.5 23.5T560-160q0 33-23.5 56.5T480-80Z\" }));\nexport default SvgQuestionMark;\n","import { useState, useRef, useCallback, useId } from 'react';\n\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport Overlay from 'react-overlays/Overlay';\n\nimport QuestionMarkIcon from '@/material-icons/400-24px/question_mark.svg?react';\nimport { Icon } from 'mastodon/components/icon';\nimport { useSelectableClick } from 'mastodon/hooks/useSelectableClick';\n\nconst messages = defineMessages({\n  help: { id: 'info_button.label', defaultMessage: 'Help' },\n});\n\nexport const InfoButton: React.FC = () => {\n  const intl = useIntl();\n  const [open, setOpen] = useState(false);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const accessibilityId = useId();\n\n  const handleClick = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  const [handleMouseDown, handleMouseUp] = useSelectableClick(handleClick);\n\n  return (\n    <>\n      <button\n        type='button'\n        className={classNames('help-button', { active: open })}\n        ref={triggerRef}\n        onClick={handleClick}\n        aria-expanded={open}\n        aria-controls={accessibilityId}\n        aria-label={intl.formatMessage(messages.help)}\n      >\n        <Icon id='' icon={QuestionMarkIcon} />\n      </button>\n\n      <Overlay\n        show={open}\n        rootClose\n        placement='top'\n        onHide={handleClick}\n        offset={[5, 5]}\n        target={triggerRef}\n      >\n        {({ props }) => (\n          <div // eslint-disable-line jsx-a11y/no-noninteractive-element-interactions\n            {...props}\n            className='dialog-modal__popout prose dropdown-animation'\n            role='region'\n            id={accessibilityId}\n            onMouseDown={handleMouseDown}\n            onMouseUp={handleMouseUp}\n          >\n            <FormattedMessage\n              id='info_button.what_is_alt_text'\n              defaultMessage='<h1>What is alt text?</h1>\n\n            <p>Alt text provides image descriptions for people with vision impairments, low-bandwidth connections, or those seeking extra context.</p>\n\n            <p>You can improve accessibility and understanding for everyone by writing clear, concise, and objective alt text.</p>\n\n            <ul>\n              <li>Capture important elements</li>\n              <li>Summarize text in images</li>\n              <li>Use regular sentence structure</li>\n              <li>Avoid redundant information</li>\n              <li>Focus on trends and key findings in complex visuals (like diagrams or maps)</li>\n            </ul>'\n              values={{\n                h1: (node) => <h1>{node}</h1>,\n                p: (node) => <p>{node}</p>,\n                ul: (node) => <ul>{node}</ul>,\n                li: (node) => <li>{node}</li>,\n              }}\n            />\n          </div>\n        )}\n      </Overlay>\n    </>\n  );\n};\n","import {\n  useState,\n  useCallback,\n  useRef,\n  useImperativeHandle,\n  forwardRef,\n} from 'react';\n\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport type { List as ImmutableList, Map as ImmutableMap } from 'immutable';\n\nimport { useSpring, animated } from '@react-spring/web';\nimport Textarea from 'react-textarea-autosize';\nimport { length } from 'stringz';\n\nimport { showAlertForError } from 'mastodon/actions/alerts';\nimport { uploadThumbnail } from 'mastodon/actions/compose';\nimport { changeUploadCompose } from 'mastodon/actions/compose_typed';\nimport { Button } from 'mastodon/components/button';\nimport { GIFV } from 'mastodon/components/gifv';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { Skeleton } from 'mastodon/components/skeleton';\nimport { Audio } from 'mastodon/features/audio';\nimport { CharacterCounter } from 'mastodon/features/compose/components/character_counter';\nimport { Tesseract as fetchTesseract } from 'mastodon/features/ui/util/async-components';\nimport { Video, getPointerPosition } from 'mastodon/features/video';\nimport { me } from 'mastodon/initial_state';\nimport type { MediaAttachment } from 'mastodon/models/media_attachment';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\nimport { assetHost } from 'mastodon/utils/config';\n\nimport { InfoButton } from './components/info_button';\n\nconst messages = defineMessages({\n  placeholderVisual: {\n    id: 'alt_text_modal.describe_for_people_with_visual_impairments',\n    defaultMessage: 'Describe this for people with visual impairments…',\n  },\n  placeholderHearing: {\n    id: 'alt_text_modal.describe_for_people_with_hearing_impairments',\n    defaultMessage: 'Describe this for people with hearing impairments…',\n  },\n  discardMessage: {\n    id: 'confirmations.discard_edit_media.message',\n    defaultMessage:\n      'You have unsaved changes to the media description or preview, discard them anyway?',\n  },\n  discardConfirm: {\n    id: 'confirmations.discard_edit_media.confirm',\n    defaultMessage: 'Discard',\n  },\n});\n\nconst MAX_LENGTH = 1500;\n\ntype FocalPoint = [number, number];\n\nconst UploadButton: React.FC<{\n  children: React.ReactNode;\n  onSelectFile: (arg0: File) => void;\n  mimeTypes: string;\n}> = ({ children, onSelectFile, mimeTypes }) => {\n  const fileRef = useRef<HTMLInputElement>(null);\n\n  const handleClick = useCallback(() => {\n    fileRef.current?.click();\n  }, []);\n\n  const handleChange = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => {\n      const file = e.target.files?.[0];\n\n      if (file) {\n        onSelectFile(file);\n      }\n    },\n    [onSelectFile],\n  );\n\n  return (\n    <label>\n      <Button onClick={handleClick}>{children}</Button>\n\n      <input\n        id='upload-modal__thumbnail'\n        ref={fileRef}\n        type='file'\n        accept={mimeTypes}\n        onChange={handleChange}\n        style={{ display: 'none' }}\n      />\n    </label>\n  );\n};\n\nconst Preview: React.FC<{\n  mediaId: string;\n  position: FocalPoint;\n  onPositionChange: (arg0: FocalPoint) => void;\n}> = ({ mediaId, position, onPositionChange }) => {\n  const draggingRef = useRef<boolean>(false);\n  const nodeRef = useRef<HTMLImageElement | HTMLVideoElement | null>(null);\n\n  const [x, y] = position;\n  const style = useSpring({\n    to: {\n      left: `${x * 100}%`,\n      top: `${y * 100}%`,\n    },\n    immediate: draggingRef.current,\n  });\n  const media = useAppSelector((state) =>\n    (\n      (state.compose as ImmutableMap<string, unknown>).get(\n        'media_attachments',\n      ) as ImmutableList<MediaAttachment>\n    ).find((x) => x.get('id') === mediaId),\n  );\n  const account = useAppSelector((state) =>\n    me ? state.accounts.get(me) : undefined,\n  );\n\n  const [dragging, setDragging] = useState(false);\n\n  const setRef = useCallback(\n    (e: HTMLImageElement | HTMLVideoElement | null) => {\n      nodeRef.current = e;\n    },\n    [],\n  );\n\n  const handleMouseDown = useCallback(\n    (e: React.MouseEvent) => {\n      if (e.button !== 0) {\n        return;\n      }\n\n      const handleMouseMove = (e: MouseEvent) => {\n        const { x, y } = getPointerPosition(nodeRef.current, e);\n        draggingRef.current = true; // This will disable the animation for quicker feedback, only do this if the mouse actually moves\n        onPositionChange([x, y]);\n      };\n\n      const handleMouseUp = () => {\n        setDragging(false);\n        draggingRef.current = false;\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.removeEventListener('mousemove', handleMouseMove);\n      };\n\n      const { x, y } = getPointerPosition(nodeRef.current, e.nativeEvent);\n\n      setDragging(true);\n      onPositionChange([x, y]);\n\n      document.addEventListener('mouseup', handleMouseUp);\n      document.addEventListener('mousemove', handleMouseMove);\n    },\n    [setDragging, onPositionChange],\n  );\n\n  if (!media) {\n    return null;\n  }\n\n  if (media.get('type') === 'image') {\n    return (\n      <div className={classNames('focal-point', { dragging })}>\n        <img\n          ref={setRef}\n          draggable={false}\n          src={media.get('url') as string}\n          alt=''\n          role='presentation'\n          onMouseDown={handleMouseDown}\n        />\n        <animated.div className='focal-point__reticle' style={style} />\n      </div>\n    );\n  } else if (media.get('type') === 'gifv') {\n    return (\n      <div className={classNames('focal-point', { dragging })}>\n        <GIFV\n          ref={setRef}\n          src={media.get('url') as string}\n          alt=''\n          onMouseDown={handleMouseDown}\n        />\n        <animated.div className='focal-point__reticle' style={style} />\n      </div>\n    );\n  } else if (media.get('type') === 'video') {\n    return (\n      <Video\n        preview={media.get('preview_url') as string}\n        frameRate={media.getIn(['meta', 'original', 'frame_rate']) as string}\n        aspectRatio={`${media.getIn(['meta', 'original', 'width']) as number} / ${media.getIn(['meta', 'original', 'height']) as number}`}\n        blurhash={media.get('blurhash') as string}\n        src={media.get('url') as string}\n        detailed\n        editable\n      />\n    );\n  } else if (media.get('type') === 'audio') {\n    return (\n      <Audio\n        src={media.get('url') as string}\n        poster={\n          (media.get('preview_url') as string | undefined) ??\n          account?.avatar_static\n        }\n        duration={media.getIn(['meta', 'original', 'duration'], 0) as number}\n        backgroundColor={\n          media.getIn(['meta', 'colors', 'background']) as string\n        }\n        foregroundColor={\n          media.getIn(['meta', 'colors', 'foreground']) as string\n        }\n        accentColor={media.getIn(['meta', 'colors', 'accent']) as string}\n        editable\n      />\n    );\n  } else {\n    return null;\n  }\n};\n\ninterface RestoreProps {\n  previousDescription: string;\n  previousPosition: FocalPoint;\n}\n\ninterface Props {\n  mediaId: string;\n  onClose: () => void;\n}\n\ninterface ConfirmationMessage {\n  message: string;\n  confirm: string;\n  props?: RestoreProps;\n}\n\nexport interface ModalRef {\n  getCloseConfirmationMessage: () => null | ConfirmationMessage;\n}\n\nexport const AltTextModal = forwardRef<ModalRef, Props & Partial<RestoreProps>>(\n  ({ mediaId, previousDescription, previousPosition, onClose }, ref) => {\n    const intl = useIntl();\n    const dispatch = useAppDispatch();\n    const media = useAppSelector((state) =>\n      (\n        (state.compose as ImmutableMap<string, unknown>).get(\n          'media_attachments',\n        ) as ImmutableList<MediaAttachment>\n      ).find((x) => x.get('id') === mediaId),\n    );\n    const lang = useAppSelector(\n      (state) =>\n        (state.compose as ImmutableMap<string, unknown>).get('lang') as string,\n    );\n    const focusX =\n      (media?.getIn(['meta', 'focus', 'x'], 0) as number | undefined) ?? 0;\n    const focusY =\n      (media?.getIn(['meta', 'focus', 'y'], 0) as number | undefined) ?? 0;\n    const [description, setDescription] = useState(\n      previousDescription ??\n        (media?.get('description') as string | undefined) ??\n        '',\n    );\n    const [position, setPosition] = useState<FocalPoint>(\n      previousPosition ?? [focusX / 2 + 0.5, focusY / -2 + 0.5],\n    );\n    const [isDetecting, setIsDetecting] = useState(false);\n    const [isSaving, setIsSaving] = useState(false);\n    const dirtyRef = useRef(\n      previousDescription || previousPosition ? true : false,\n    );\n    const type = media?.get('type') as string;\n    const valid = length(description) <= MAX_LENGTH;\n\n    const handleDescriptionChange = useCallback(\n      (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n        setDescription(e.target.value);\n        dirtyRef.current = true;\n      },\n      [setDescription],\n    );\n\n    const handleThumbnailChange = useCallback(\n      (file: File) => {\n        dispatch(uploadThumbnail(mediaId, file));\n      },\n      [dispatch, mediaId],\n    );\n\n    const handlePositionChange = useCallback(\n      (position: FocalPoint) => {\n        setPosition(position);\n        dirtyRef.current = true;\n      },\n      [setPosition],\n    );\n\n    const handleSubmit = useCallback(() => {\n      setIsSaving(true);\n\n      dispatch(\n        changeUploadCompose({\n          id: mediaId,\n          description,\n          focus: `${((position[0] - 0.5) * 2).toFixed(2)},${((position[1] - 0.5) * -2).toFixed(2)}`,\n        }),\n      )\n        .then(() => {\n          setIsSaving(false);\n          dirtyRef.current = false;\n          onClose();\n          return '';\n        })\n        .catch((err: unknown) => {\n          setIsSaving(false);\n          dispatch(showAlertForError(err));\n        });\n    }, [dispatch, setIsSaving, mediaId, onClose, position, description]);\n\n    const handleKeyUp = useCallback(\n      (e: React.KeyboardEvent) => {\n        if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {\n          e.preventDefault();\n\n          if (valid) {\n            handleSubmit();\n          }\n        }\n      },\n      [handleSubmit, valid],\n    );\n\n    const handleDetectClick = useCallback(() => {\n      setIsDetecting(true);\n\n      fetchTesseract()\n        .then(async ({ createWorker }) => {\n          const [tesseractWorkerPath, tesseractCorePath] = await Promise.all([\n            // eslint-disable-next-line import/extensions\n            import('tesseract.js/dist/worker.min.js?url'),\n            // eslint-disable-next-line import/no-extraneous-dependencies\n            import('tesseract.js-core/tesseract-core.wasm.js?url'),\n          ]);\n          const worker = await createWorker('eng', 1, {\n            workerPath: tesseractWorkerPath.default,\n            corePath: tesseractCorePath.default,\n            langPath: `${assetHost}/ocr/lang-data`,\n            cacheMethod: 'write',\n          });\n\n          const image = URL.createObjectURL(media?.get('file') as File);\n          const result = await worker.recognize(image);\n\n          setDescription(result.data.text);\n          setIsDetecting(false);\n\n          await worker.terminate();\n\n          return '';\n        })\n        .catch(() => {\n          setIsDetecting(false);\n        });\n    }, [setDescription, setIsDetecting, media]);\n\n    useImperativeHandle(\n      ref,\n      () => ({\n        getCloseConfirmationMessage: () => {\n          if (dirtyRef.current) {\n            return {\n              message: intl.formatMessage(messages.discardMessage),\n              confirm: intl.formatMessage(messages.discardConfirm),\n              props: {\n                previousDescription: description,\n                previousPosition: position,\n              },\n            };\n          }\n\n          return null;\n        },\n      }),\n      [intl, description, position],\n    );\n\n    return (\n      <div className='modal-root__modal dialog-modal'>\n        <div className='dialog-modal__header'>\n          <Button onClick={handleSubmit} disabled={!valid}>\n            {isSaving ? (\n              <LoadingIndicator />\n            ) : (\n              <FormattedMessage\n                id='alt_text_modal.done'\n                defaultMessage='Done'\n              />\n            )}\n          </Button>\n\n          <span className='dialog-modal__header__title'>\n            <FormattedMessage\n              id='alt_text_modal.add_alt_text'\n              defaultMessage='Add alt text'\n            />\n          </span>\n\n          <Button secondary onClick={onClose}>\n            <FormattedMessage\n              id='alt_text_modal.cancel'\n              defaultMessage='Cancel'\n            />\n          </Button>\n        </div>\n\n        <div className='dialog-modal__content'>\n          <div className='dialog-modal__content__preview'>\n            <Preview\n              mediaId={mediaId}\n              position={position}\n              onPositionChange={handlePositionChange}\n            />\n\n            {(type === 'audio' || type === 'video') && (\n              <UploadButton\n                onSelectFile={handleThumbnailChange}\n                mimeTypes='image/jpeg,image/png,image/gif,image/heic,image/heif,image/webp,image/avif'\n              >\n                <FormattedMessage\n                  id='alt_text_modal.change_thumbnail'\n                  defaultMessage='Change thumbnail'\n                />\n              </UploadButton>\n            )}\n          </div>\n\n          <form\n            className='dialog-modal__content__form simple_form'\n            onSubmit={handleSubmit}\n          >\n            <div className='input'>\n              <div className='label_input'>\n                <Textarea\n                  id='description'\n                  value={isDetecting ? ' ' : description}\n                  onChange={handleDescriptionChange}\n                  onKeyUp={handleKeyUp}\n                  lang={lang}\n                  placeholder={intl.formatMessage(\n                    type === 'audio'\n                      ? messages.placeholderHearing\n                      : messages.placeholderVisual,\n                  )}\n                  minRows={3}\n                  disabled={isDetecting}\n                />\n\n                {isDetecting && (\n                  <div className='label_input__loading-indicator'>\n                    <Skeleton width='100%' />\n                    <Skeleton width='100%' />\n                    <Skeleton width='61%' />\n                  </div>\n                )}\n              </div>\n\n              <div className='input__toolbar'>\n                <CharacterCounter\n                  max={MAX_LENGTH}\n                  text={isDetecting ? '' : description}\n                />\n\n                <div className='spacer' />\n\n                <button\n                  className='link-button'\n                  onClick={handleDetectClick}\n                  disabled={type !== 'image' || isDetecting}\n                >\n                  <FormattedMessage\n                    id='alt_text_modal.add_text_from_image'\n                    defaultMessage='Add text from image'\n                  />\n                </button>\n\n                <InfoButton />\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n    );\n  },\n);\nAltTextModal.displayName = 'AltTextModal';\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport type { MenuItem } from 'mastodon/models/dropdown_menu';\nimport {\n  isActionItem,\n  isExternalLinkItem,\n} from 'mastodon/models/dropdown_menu';\n\nexport const ActionsModal: React.FC<{\n  actions: MenuItem[];\n  onClick: React.MouseEventHandler;\n}> = ({ actions, onClick }) => (\n  <div className='modal-root__modal actions-modal'>\n    <ul>\n      {actions.map((option, i: number) => {\n        if (option === null) {\n          return <li key={`sep-${i}`} className='dropdown-menu__separator' />;\n        }\n\n        const { text, dangerous } = option;\n\n        let element: React.ReactElement;\n\n        if (isActionItem(option)) {\n          element = (\n            <button onClick={onClick} data-index={i}>\n              {text}\n            </button>\n          );\n        } else if (isExternalLinkItem(option)) {\n          element = (\n            <a\n              href={option.href}\n              target={option.target ?? '_target'}\n              data-method={option.method}\n              rel='noopener'\n              onClick={onClick}\n              data-index={i}\n            >\n              {text}\n            </a>\n          );\n        } else {\n          element = (\n            <Link to={option.to} onClick={onClick} data-index={i}>\n              {text}\n            </Link>\n          );\n        }\n\n        return (\n          <li\n            className={classNames({\n              'dropdown-menu__item--dangerous': dangerous,\n            })}\n            key={`${text}-${i}`}\n          >\n            {element}\n          </li>\n        );\n      })}\n    </ul>\n  </div>\n);\n","import { useEffect } from 'react';\n\nimport { getAverageFromBlurhash } from 'mastodon/blurhash';\nimport type { RGB } from 'mastodon/blurhash';\nimport { Audio } from 'mastodon/features/audio';\nimport { Footer } from 'mastodon/features/picture_in_picture/components/footer';\nimport type { MediaAttachment } from 'mastodon/models/media_attachment';\nimport { useAppSelector } from 'mastodon/store';\n\nconst AudioModal: React.FC<{\n  media: MediaAttachment;\n  statusId: string;\n  options: {\n    autoPlay: boolean;\n  };\n  onClose: () => void;\n  onChangeBackgroundColor: (color: RGB | null) => void;\n}> = ({ media, statusId, options, onClose, onChangeBackgroundColor }) => {\n  const status = useAppSelector((state) => state.statuses.get(statusId));\n  const accountId = status?.get('account') as string | undefined;\n  const accountStaticAvatar = useAppSelector((state) =>\n    accountId ? state.accounts.get(accountId)?.avatar_static : undefined,\n  );\n\n  useEffect(() => {\n    const backgroundColor = getAverageFromBlurhash(\n      media.get('blurhash') as string | null,\n    );\n\n    onChangeBackgroundColor(backgroundColor ?? { r: 255, g: 255, b: 255 });\n\n    return () => {\n      onChangeBackgroundColor(null);\n    };\n  }, [media, onChangeBackgroundColor]);\n\n  const language = (status?.getIn(['translation', 'language']) ??\n    status?.get('language')) as string;\n  const description = (media.getIn(['translation', 'description']) ??\n    media.get('description')) as string;\n\n  return (\n    <div className='modal-root__modal audio-modal'>\n      <div className='audio-modal__container'>\n        <Audio\n          src={media.get('url') as string}\n          alt={description}\n          lang={language}\n          poster={\n            (media.get('preview_url') as string | null) ?? accountStaticAvatar\n          }\n          duration={media.getIn(['meta', 'original', 'duration'], 0) as number}\n          backgroundColor={\n            media.getIn(['meta', 'colors', 'background']) as string\n          }\n          foregroundColor={\n            media.getIn(['meta', 'colors', 'foreground']) as string\n          }\n          accentColor={media.getIn(['meta', 'colors', 'accent']) as string}\n          startPlaying={options.autoPlay}\n        />\n      </div>\n\n      <div className='media-modal__overlay'>\n        {status && (\n          <Footer\n            statusId={status.get('id') as string}\n            withOpenButton\n            onClose={onClose}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default AudioModal;\n","import { useCallback, useState } from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport RepeatIcon from '@/material-icons/400-24px/repeat.svg?react';\nimport { Button } from 'mastodon/components/button';\nimport { Icon } from 'mastodon/components/icon';\nimport PrivacyDropdown from 'mastodon/features/compose/components/privacy_dropdown';\nimport { EmbeddedStatus } from 'mastodon/features/notifications_v2/components/embedded_status';\nimport type { Status, StatusVisibility } from 'mastodon/models/status';\nimport { useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  cancel_reblog: {\n    id: 'status.cancel_reblog_private',\n    defaultMessage: 'Unboost',\n  },\n  reblog: { id: 'status.reblog', defaultMessage: 'Boost' },\n});\n\nexport const BoostModal: React.FC<{\n  status: Status;\n  onClose: () => void;\n  onReblog: (status: Status, privacy: StatusVisibility) => void;\n}> = ({ status, onReblog, onClose }) => {\n  const intl = useIntl();\n\n  const defaultPrivacy = useAppSelector(\n    (state) => state.compose.get('default_privacy') as StatusVisibility,\n  );\n\n  const statusId = status.get('id') as string;\n  const statusVisibility = status.get('visibility') as StatusVisibility;\n\n  const [privacy, setPrivacy] = useState<StatusVisibility>(\n    statusVisibility === 'private' ? 'private' : defaultPrivacy,\n  );\n\n  const onPrivacyChange = useCallback((value: StatusVisibility) => {\n    setPrivacy(value);\n  }, []);\n\n  const handleReblog = useCallback(() => {\n    onReblog(status, privacy);\n    onClose();\n  }, [onClose, onReblog, status, privacy]);\n\n  const handleCancel = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  const findContainer = useCallback(\n    () => document.getElementsByClassName('modal-root__container')[0],\n    [],\n  );\n\n  return (\n    <div className='modal-root__modal safety-action-modal'>\n      <div className='safety-action-modal__top'>\n        <div className='safety-action-modal__header'>\n          <div className='safety-action-modal__header__icon'>\n            <Icon icon={RepeatIcon} id='retweet' />\n          </div>\n\n          <div>\n            <h1>\n              {status.get('reblogged') ? (\n                <FormattedMessage\n                  id='boost_modal.undo_reblog'\n                  defaultMessage='Unboost post?'\n                />\n              ) : (\n                <FormattedMessage\n                  id='boost_modal.reblog'\n                  defaultMessage='Boost post?'\n                />\n              )}\n            </h1>\n            <div>\n              <FormattedMessage\n                id='boost_modal.combo'\n                defaultMessage='You can press {combo} to skip this next time'\n                values={{\n                  combo: (\n                    <span className='hotkey-combination'>\n                      <kbd>Shift</kbd>+<Icon id='retweet' icon={RepeatIcon} />\n                    </span>\n                  ),\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className='safety-action-modal__status'>\n          <EmbeddedStatus statusId={statusId} />\n        </div>\n      </div>\n\n      <div className={classNames('safety-action-modal__bottom')}>\n        <div className='safety-action-modal__actions'>\n          {!status.get('reblogged') && (\n            <PrivacyDropdown\n              noDirect\n              value={privacy}\n              container={findContainer}\n              onChange={onPrivacyChange}\n              disabled={statusVisibility === 'private'}\n            />\n          )}\n\n          <div className='spacer' />\n\n          <button onClick={handleCancel} className='link-button'>\n            <FormattedMessage\n              id='confirmation_modal.cancel'\n              defaultMessage='Cancel'\n            />\n          </button>\n\n          <Button\n            onClick={handleReblog}\n            text={intl.formatMessage(\n              status.get('reblogged')\n                ? messages.cancel_reblog\n                : messages.reblog,\n            )}\n            /* eslint-disable-next-line jsx-a11y/no-autofocus -- We are in the modal */\n            autoFocus\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from 'mastodon/components/button';\n\nexport interface BaseConfirmationModalProps {\n  onClose: () => void;\n}\n\nexport const ConfirmationModal: React.FC<\n  {\n    title: React.ReactNode;\n    message: React.ReactNode;\n    confirm: React.ReactNode;\n    secondary?: React.ReactNode;\n    onSecondary?: () => void;\n    onConfirm: () => void;\n    closeWhenConfirm?: boolean;\n  } & BaseConfirmationModalProps\n> = ({\n  title,\n  message,\n  confirm,\n  onClose,\n  onConfirm,\n  secondary,\n  onSecondary,\n  closeWhenConfirm = true,\n}) => {\n  const handleClick = useCallback(() => {\n    if (closeWhenConfirm) {\n      onClose();\n    }\n\n    onConfirm();\n  }, [onClose, onConfirm, closeWhenConfirm]);\n\n  const handleSecondary = useCallback(() => {\n    onClose();\n    onSecondary?.();\n  }, [onClose, onSecondary]);\n\n  const handleCancel = useCallback(() => {\n    onClose();\n  }, [onClose]);\n\n  return (\n    <div className='modal-root__modal safety-action-modal'>\n      <div className='safety-action-modal__top'>\n        <div className='safety-action-modal__confirmation'>\n          <h1>{title}</h1>\n          <p>{message}</p>\n        </div>\n      </div>\n\n      <div className='safety-action-modal__bottom'>\n        <div className='safety-action-modal__actions'>\n          <button onClick={handleCancel} className='link-button'>\n            <FormattedMessage\n              id='confirmation_modal.cancel'\n              defaultMessage='Cancel'\n            />\n          </button>\n\n          {secondary && (\n            <>\n              <div className='spacer' />\n              <button onClick={handleSecondary} className='link-button'>\n                {secondary}\n              </button>\n            </>\n          )}\n\n          {/* eslint-disable-next-line jsx-a11y/no-autofocus -- we are in a modal and thus autofocusing is justified */}\n          <Button onClick={handleClick} autoFocus>\n            {confirm}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { deleteStatus } from 'mastodon/actions/statuses';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  deleteAndRedraftTitle: {\n    id: 'confirmations.redraft.title',\n    defaultMessage: 'Delete & redraft post?',\n  },\n  deleteAndRedraftMessage: {\n    id: 'confirmations.redraft.message',\n    defaultMessage:\n      'Are you sure you want to delete this status and re-draft it? Favorites and boosts will be lost, and replies to the original post will be orphaned.',\n  },\n  deleteAndRedraftConfirm: {\n    id: 'confirmations.redraft.confirm',\n    defaultMessage: 'Delete & redraft',\n  },\n  deleteTitle: {\n    id: 'confirmations.delete.title',\n    defaultMessage: 'Delete post?',\n  },\n  deleteMessage: {\n    id: 'confirmations.delete.message',\n    defaultMessage: 'Are you sure you want to delete this status?',\n  },\n  deleteConfirm: {\n    id: 'confirmations.delete.confirm',\n    defaultMessage: 'Delete',\n  },\n});\n\nexport const ConfirmDeleteStatusModal: React.FC<\n  {\n    statusId: string;\n    withRedraft: boolean;\n  } & BaseConfirmationModalProps\n> = ({ statusId, withRedraft, onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const onConfirm = useCallback(() => {\n    dispatch(deleteStatus(statusId, withRedraft));\n  }, [dispatch, statusId, withRedraft]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(\n        withRedraft ? messages.deleteAndRedraftTitle : messages.deleteTitle,\n      )}\n      message={intl.formatMessage(\n        withRedraft ? messages.deleteAndRedraftMessage : messages.deleteMessage,\n      )}\n      confirm={intl.formatMessage(\n        withRedraft ? messages.deleteAndRedraftConfirm : messages.deleteConfirm,\n      )}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { useHistory } from 'react-router';\n\nimport { removeColumn } from 'mastodon/actions/columns';\nimport { deleteList } from 'mastodon/actions/lists';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  deleteListTitle: {\n    id: 'confirmations.delete_list.title',\n    defaultMessage: 'Delete list?',\n  },\n  deleteListMessage: {\n    id: 'confirmations.delete_list.message',\n    defaultMessage: 'Are you sure you want to permanently delete this list?',\n  },\n  deleteListConfirm: {\n    id: 'confirmations.delete_list.confirm',\n    defaultMessage: 'Delete',\n  },\n});\n\nexport const ConfirmDeleteListModal: React.FC<\n  {\n    listId: string;\n    columnId: string;\n  } & BaseConfirmationModalProps\n> = ({ listId, columnId, onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n  const history = useHistory();\n\n  const onConfirm = useCallback(() => {\n    dispatch(deleteList(listId));\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      history.push('/lists');\n    }\n  }, [dispatch, history, columnId, listId]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.deleteListTitle)}\n      message={intl.formatMessage(messages.deleteListMessage)}\n      confirm={intl.formatMessage(messages.deleteListConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { replyCompose } from 'mastodon/actions/compose';\nimport type { Status } from 'mastodon/models/status';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  replyTitle: {\n    id: 'confirmations.reply.title',\n    defaultMessage: 'Overwrite post?',\n  },\n  replyConfirm: { id: 'confirmations.reply.confirm', defaultMessage: 'Reply' },\n  replyMessage: {\n    id: 'confirmations.reply.message',\n    defaultMessage:\n      'Replying now will overwrite the message you are currently composing. Are you sure you want to proceed?',\n  },\n});\n\nexport const ConfirmReplyModal: React.FC<\n  {\n    status: Status;\n  } & BaseConfirmationModalProps\n> = ({ status, onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const onConfirm = useCallback(() => {\n    dispatch(replyCompose(status));\n  }, [dispatch, status]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.replyTitle)}\n      message={intl.formatMessage(messages.replyMessage)}\n      confirm={intl.formatMessage(messages.replyConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { editStatus } from 'mastodon/actions/statuses';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  editTitle: {\n    id: 'confirmations.edit.title',\n    defaultMessage: 'Overwrite post?',\n  },\n  editConfirm: { id: 'confirmations.edit.confirm', defaultMessage: 'Edit' },\n  editMessage: {\n    id: 'confirmations.edit.message',\n    defaultMessage:\n      'Editing now will overwrite the message you are currently composing. Are you sure you want to proceed?',\n  },\n});\n\nexport const ConfirmEditStatusModal: React.FC<\n  {\n    statusId: string;\n  } & BaseConfirmationModalProps\n> = ({ statusId, onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const onConfirm = useCallback(() => {\n    dispatch(editStatus(statusId));\n  }, [dispatch, statusId]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.editTitle)}\n      message={intl.formatMessage(messages.editMessage)}\n      confirm={intl.formatMessage(messages.editConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport { unfollowAccount } from 'mastodon/actions/accounts';\nimport type { Account } from 'mastodon/models/account';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  unfollowTitle: {\n    id: 'confirmations.unfollow.title',\n    defaultMessage: 'Unfollow user?',\n  },\n  unfollowConfirm: {\n    id: 'confirmations.unfollow.confirm',\n    defaultMessage: 'Unfollow',\n  },\n});\n\nexport const ConfirmUnfollowModal: React.FC<\n  {\n    account: Account;\n  } & BaseConfirmationModalProps\n> = ({ account, onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const onConfirm = useCallback(() => {\n    dispatch(unfollowAccount(account.id));\n  }, [dispatch, account.id]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.unfollowTitle)}\n      message={\n        <FormattedMessage\n          id='confirmations.unfollow.message'\n          defaultMessage='Are you sure you want to unfollow {name}?'\n          values={{ name: <strong>@{account.acct}</strong> }}\n        />\n      }\n      confirm={intl.formatMessage(messages.unfollowConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { clearNotifications } from 'mastodon/actions/notification_groups';\nimport { useAppDispatch } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  clearTitle: {\n    id: 'notifications.clear_title',\n    defaultMessage: 'Clear notifications?',\n  },\n  clearMessage: {\n    id: 'notifications.clear_confirmation',\n    defaultMessage:\n      'Are you sure you want to permanently clear all your notifications?',\n  },\n  clearConfirm: {\n    id: 'notifications.clear',\n    defaultMessage: 'Clear notifications',\n  },\n});\n\nexport const ConfirmClearNotificationsModal: React.FC<\n  BaseConfirmationModalProps\n> = ({ onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const onConfirm = useCallback(() => {\n    void dispatch(clearNotifications());\n  }, [dispatch]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.clearTitle)}\n      message={intl.formatMessage(messages.clearMessage)}\n      confirm={intl.formatMessage(messages.clearConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import api from 'mastodon/api';\n\nexport async function logOut() {\n  try {\n    const response = await api(false).delete<{ redirect_to?: string }>(\n      '/auth/sign_out',\n      { headers: { Accept: 'application/json' }, withCredentials: true },\n    );\n\n    if (response.status === 200 && response.data.redirect_to)\n      window.location.href = response.data.redirect_to;\n    else\n      console.error(\n        'Failed to log out, got an unexpected non-redirect response from the server',\n        response,\n      );\n  } catch (error) {\n    console.error('Failed to log out, response was an error', error);\n  }\n}\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { logOut } from 'mastodon/utils/log_out';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  logoutTitle: { id: 'confirmations.logout.title', defaultMessage: 'Log out?' },\n  logoutMessage: {\n    id: 'confirmations.logout.message',\n    defaultMessage: 'Are you sure you want to log out?',\n  },\n  logoutConfirm: {\n    id: 'confirmations.logout.confirm',\n    defaultMessage: 'Log out',\n  },\n});\n\nexport const ConfirmLogOutModal: React.FC<BaseConfirmationModalProps> = ({\n  onClose,\n}) => {\n  const intl = useIntl();\n\n  const onConfirm = useCallback(() => {\n    void logOut();\n  }, []);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.logoutTitle)}\n      message={intl.formatMessage(messages.logoutMessage)}\n      confirm={intl.formatMessage(messages.logoutConfirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport { useAppSelector } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  title: {\n    id: 'confirmations.follow_to_list.title',\n    defaultMessage: 'Follow user?',\n  },\n  confirm: {\n    id: 'confirmations.follow_to_list.confirm',\n    defaultMessage: 'Follow and add to list',\n  },\n});\n\nexport const ConfirmFollowToListModal: React.FC<\n  {\n    accountId: string;\n    onConfirm: () => void;\n  } & BaseConfirmationModalProps\n> = ({ accountId, onConfirm, onClose }) => {\n  const intl = useIntl();\n  const account = useAppSelector((state) => state.accounts.get(accountId));\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.title)}\n      message={\n        <FormattedMessage\n          id='confirmations.follow_to_list.message'\n          defaultMessage='You need to be following {name} to add them to a list.'\n          values={{ name: <strong>@{account?.acct}</strong> }}\n        />\n      }\n      confirm={intl.formatMessage(messages.confirm)}\n      onConfirm={onConfirm}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport type { Map as ImmutableMap, List as ImmutableList } from 'immutable';\n\nimport { submitCompose } from 'mastodon/actions/compose';\nimport { openModal } from 'mastodon/actions/modal';\nimport type { MediaAttachment } from 'mastodon/models/media_attachment';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport type { BaseConfirmationModalProps } from './confirmation_modal';\nimport { ConfirmationModal } from './confirmation_modal';\n\nconst messages = defineMessages({\n  title: {\n    id: 'confirmations.missing_alt_text.title',\n    defaultMessage: 'Add alt text?',\n  },\n  confirm: {\n    id: 'confirmations.missing_alt_text.confirm',\n    defaultMessage: 'Add alt text',\n  },\n  message: {\n    id: 'confirmations.missing_alt_text.message',\n    defaultMessage:\n      'Your post contains media without alt text. Adding descriptions helps make your content accessible to more people.',\n  },\n  secondary: {\n    id: 'confirmations.missing_alt_text.secondary',\n    defaultMessage: 'Post anyway',\n  },\n});\n\nexport const ConfirmMissingAltTextModal: React.FC<\n  BaseConfirmationModalProps\n> = ({ onClose }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n  const mediaId = useAppSelector(\n    (state) =>\n      (\n        (state.compose as ImmutableMap<string, unknown>).get(\n          'media_attachments',\n        ) as ImmutableList<MediaAttachment>\n      )\n        .find(\n          (media) =>\n            ['image', 'gifv'].includes(media.get('type') as string) &&\n            ((media.get('description') ?? '') as string).length === 0,\n        )\n        ?.get('id') as string,\n  );\n\n  const handleConfirm = useCallback(() => {\n    dispatch(\n      openModal({\n        modalType: 'FOCAL_POINT',\n        modalProps: {\n          mediaId,\n        },\n      }),\n    );\n  }, [dispatch, mediaId]);\n\n  const handleSecondary = useCallback(() => {\n    dispatch(submitCompose());\n  }, [dispatch]);\n\n  return (\n    <ConfirmationModal\n      title={intl.formatMessage(messages.title)}\n      message={intl.formatMessage(messages.message)}\n      confirm={intl.formatMessage(messages.confirm)}\n      secondary={intl.formatMessage(messages.secondary)}\n      onConfirm={handleConfirm}\n      onSecondary={handleSecondary}\n      onClose={onClose}\n    />\n  );\n};\n","import { useCallback, useState } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { IconButton } from 'mastodon/components/icon_button';\n\nimport { ZoomableImage } from './zoomable_image';\n\nconst messages = defineMessages({\n  close: { id: 'lightbox.close', defaultMessage: 'Close' },\n});\n\nexport const ImageModal: React.FC<{\n  src: string;\n  alt: string;\n  onClose: () => void;\n}> = ({ src, alt, onClose }) => {\n  const intl = useIntl();\n  const [navigationHidden, setNavigationHidden] = useState(false);\n\n  const toggleNavigation = useCallback(() => {\n    setNavigationHidden((prevState) => !prevState);\n  }, [setNavigationHidden]);\n\n  const navigationClassName = classNames('media-modal__navigation', {\n    'media-modal__navigation--hidden': navigationHidden,\n  });\n\n  return (\n    <div className='modal-root__modal media-modal'>\n      <div\n        className='media-modal__closer'\n        role='presentation'\n        onClick={onClose}\n      >\n        <ZoomableImage\n          src={src}\n          width={400}\n          height={400}\n          alt={alt}\n          onClick={toggleNavigation}\n        />\n      </div>\n\n      <div className={navigationClassName}>\n        <div className='media-modal__buttons'>\n          <IconButton\n            className='media-modal__close'\n            title={intl.formatMessage(messages.close)}\n            icon='times'\n            iconComponent={CloseIcon}\n            onClick={onClose}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Button } from 'mastodon/components/button';\nimport { GIF } from 'mastodon/components/gif';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\n\nexport const ModalPlaceholder: React.FC<{\n  loading: boolean;\n  onClose: (arg0: string | undefined, arg1: boolean) => void;\n  onRetry?: () => void;\n}> = ({ loading, onClose, onRetry }) => {\n  const handleClose = useCallback(() => {\n    onClose(undefined, false);\n  }, [onClose]);\n\n  const handleRetry = useCallback(() => {\n    if (onRetry) onRetry();\n  }, [onRetry]);\n\n  return (\n    <div className='modal-root__modal modal-placeholder' aria-busy={loading}>\n      {loading ? (\n        <LoadingIndicator />\n      ) : (\n        <div className='modal-placeholder__error'>\n          <GIF\n            src='/oops.gif'\n            staticSrc='/oops.png'\n            className='modal-placeholder__error__image'\n          />\n\n          <div className='modal-placeholder__error__message'>\n            <p>\n              <FormattedMessage\n                id='bundle_modal_error.message'\n                defaultMessage='Something went wrong while loading this screen.'\n              />\n            </p>\n\n            <div className='modal-placeholder__error__message__actions'>\n              <Button onClick={handleRetry}>\n                <FormattedMessage\n                  id='bundle_modal_error.retry'\n                  defaultMessage='Try again'\n                />\n              </Button>\n              <Button onClick={handleClose} className='button button-tertiary'>\n                <FormattedMessage\n                  id='bundle_modal_error.close'\n                  defaultMessage='Close'\n                />\n              </Button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import PropTypes from 'prop-types';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\nimport { connect } from 'react-redux';\n\nimport { getAverageFromBlurhash } from 'mastodon/blurhash';\nimport { Footer } from 'mastodon/features/picture_in_picture/components/footer';\nimport { Video } from 'mastodon/features/video';\n\nconst mapStateToProps = (state, { statusId }) => ({\n  status: state.getIn(['statuses', statusId]),\n});\n\nclass VideoModal extends ImmutablePureComponent {\n\n  static propTypes = {\n    media: ImmutablePropTypes.map.isRequired,\n    statusId: PropTypes.string,\n    status: ImmutablePropTypes.map,\n    options: PropTypes.shape({\n      startTime: PropTypes.number,\n      autoPlay: PropTypes.bool,\n      defaultVolume: PropTypes.number,\n    }),\n    onClose: PropTypes.func.isRequired,\n    onChangeBackgroundColor: PropTypes.func.isRequired,\n  };\n\n  componentDidMount () {\n    const { media, onChangeBackgroundColor } = this.props;\n\n    const backgroundColor = getAverageFromBlurhash(media.get('blurhash'));\n\n    if (backgroundColor) {\n      onChangeBackgroundColor(backgroundColor);\n    }\n  }\n\n  componentWillUnmount () {\n    this.props.onChangeBackgroundColor(null);\n  }\n\n  render () {\n    const { media, status, onClose } = this.props;\n    const options = this.props.options || {};\n    const language = status.getIn(['translation', 'language']) || status.get('language');\n    const description = media.getIn(['translation', 'description']) || media.get('description');\n\n    return (\n      <div className='modal-root__modal video-modal'>\n        <div className='video-modal__container'>\n          <Video\n            preview={media.get('preview_url')}\n            frameRate={media.getIn(['meta', 'original', 'frame_rate'])}\n            aspectRatio={`${media.getIn(['meta', 'original', 'width'])} / ${media.getIn(['meta', 'original', 'height'])}`}\n            blurhash={media.get('blurhash')}\n            src={media.get('url')}\n            startTime={options.startTime}\n            startPlaying={options.autoPlay}\n            startVolume={options.defaultVolume}\n            onCloseVideo={onClose}\n            autoFocus\n            detailed\n            alt={description}\n            lang={language}\n          />\n        </div>\n\n        <div className='media-modal__overlay'>\n          {status && <Footer statusId={status.get('id')} withOpenButton onClose={onClose} />}\n        </div>\n      </div>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps, null, null, { forwardRef: true })(VideoModal);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { Helmet } from 'react-helmet';\n\nimport Base from 'mastodon/components/modal_root';\nimport { AltTextModal } from 'mastodon/features/alt_text_modal';\nimport {\n  MuteModal,\n  BlockModal,\n  DomainBlockModal,\n  ReportModal,\n  EmbedModal,\n  ListAdder,\n  CompareHistoryModal,\n  FilterModal,\n  InteractionModal,\n  SubscribedLanguagesModal,\n  ClosedRegistrationsModal,\n  IgnoreNotificationsModal,\n  AnnualReportModal,\n} from 'mastodon/features/ui/util/async-components';\nimport { getScrollbarWidth } from 'mastodon/utils/scrollbar';\n\nimport BundleContainer from '../containers/bundle_container';\n\nimport { ActionsModal } from './actions_modal';\nimport AudioModal from './audio_modal';\nimport { BoostModal } from './boost_modal';\nimport {\n  ConfirmationModal,\n  ConfirmDeleteStatusModal,\n  ConfirmDeleteListModal,\n  ConfirmReplyModal,\n  ConfirmEditStatusModal,\n  ConfirmUnfollowModal,\n  ConfirmClearNotificationsModal,\n  ConfirmLogOutModal,\n  ConfirmFollowToListModal,\n  ConfirmMissingAltTextModal,\n} from './confirmation_modals';\nimport { ImageModal } from './image_modal';\nimport MediaModal from './media_modal';\nimport { ModalPlaceholder } from './modal_placeholder';\nimport VideoModal from './video_modal';\n\nexport const MODAL_COMPONENTS = {\n  'MEDIA': () => Promise.resolve({ default: MediaModal }),\n  'VIDEO': () => Promise.resolve({ default: VideoModal }),\n  'AUDIO': () => Promise.resolve({ default: AudioModal }),\n  'IMAGE': () => Promise.resolve({ default: ImageModal }),\n  'BOOST': () => Promise.resolve({ default: BoostModal }),\n  'CONFIRM': () => Promise.resolve({ default: ConfirmationModal }),\n  'CONFIRM_DELETE_STATUS': () => Promise.resolve({ default: ConfirmDeleteStatusModal }),\n  'CONFIRM_DELETE_LIST': () => Promise.resolve({ default: ConfirmDeleteListModal }),\n  'CONFIRM_REPLY': () => Promise.resolve({ default: ConfirmReplyModal }),\n  'CONFIRM_EDIT_STATUS': () => Promise.resolve({ default: ConfirmEditStatusModal }),\n  'CONFIRM_UNFOLLOW': () => Promise.resolve({ default: ConfirmUnfollowModal }),\n  'CONFIRM_CLEAR_NOTIFICATIONS': () => Promise.resolve({ default: ConfirmClearNotificationsModal }),\n  'CONFIRM_LOG_OUT': () => Promise.resolve({ default: ConfirmLogOutModal }),\n  'CONFIRM_FOLLOW_TO_LIST': () => Promise.resolve({ default: ConfirmFollowToListModal }),\n  'CONFIRM_MISSING_ALT_TEXT': () => Promise.resolve({ default: ConfirmMissingAltTextModal }),\n  'MUTE': MuteModal,\n  'BLOCK': BlockModal,\n  'DOMAIN_BLOCK': DomainBlockModal,\n  'REPORT': ReportModal,\n  'ACTIONS': () => Promise.resolve({ default: ActionsModal }),\n  'EMBED': EmbedModal,\n  'FOCAL_POINT': () => Promise.resolve({ default: AltTextModal }),\n  'LIST_ADDER': ListAdder,\n  'COMPARE_HISTORY': CompareHistoryModal,\n  'FILTER': FilterModal,\n  'SUBSCRIBED_LANGUAGES': SubscribedLanguagesModal,\n  'INTERACTION': InteractionModal,\n  'CLOSED_REGISTRATIONS': ClosedRegistrationsModal,\n  'IGNORE_NOTIFICATIONS': IgnoreNotificationsModal,\n  'ANNUAL_REPORT': AnnualReportModal,\n};\n\nexport default class ModalRoot extends PureComponent {\n\n  static propTypes = {\n    type: PropTypes.string,\n    props: PropTypes.object,\n    onClose: PropTypes.func.isRequired,\n    ignoreFocus: PropTypes.bool,\n  };\n\n  state = {\n    backgroundColor: null,\n  };\n\n  getSnapshotBeforeUpdate () {\n    return { visible: !!this.props.type };\n  }\n\n  componentDidUpdate (prevProps, prevState, { visible }) {\n    if (visible) {\n      document.body.classList.add('with-modals--active');\n      document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n    } else {\n      document.body.classList.remove('with-modals--active');\n      document.documentElement.style.marginRight = '0';\n    }\n  }\n\n  setBackgroundColor = color => {\n    this.setState({ backgroundColor: color });\n  };\n\n  renderLoading = () => {\n    const { onClose } = this.props;\n\n    return <ModalPlaceholder loading onClose={onClose} />;\n  };\n\n  renderError = (props) => {\n    const { onClose } = this.props;\n\n    return <ModalPlaceholder {...props} onClose={onClose} />;\n  };\n\n  handleClose = (ignoreFocus = false) => {\n    const { onClose } = this.props;\n    const message = this._modal?.getCloseConfirmationMessage?.();\n    onClose(message, ignoreFocus);\n  };\n\n  setModalRef = (c) => {\n    this._modal = c;\n  };\n\n  render () {\n    const { type, props, ignoreFocus } = this.props;\n    const { backgroundColor } = this.state;\n    const visible = !!type;\n\n    return (\n      <Base backgroundColor={backgroundColor} onClose={this.handleClose} ignoreFocus={ignoreFocus}>\n        {visible && (\n          <>\n            <BundleContainer fetchComponent={MODAL_COMPONENTS[type]} loading={this.renderLoading} error={this.renderError} renderDelay={200}>\n              {(SpecificComponent) => {\n                return <SpecificComponent {...props} onChangeBackgroundColor={this.setBackgroundColor} onClose={this.handleClose} ref={this.setModalRef} />;\n              }}\n            </BundleContainer>\n\n            <Helmet>\n              <meta name='robots' content='noindex' />\n            </Helmet>\n          </>\n        )}\n      </Base>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { openModal, closeModal } from '../../../actions/modal';\nimport ModalRoot from '../components/modal_root';\n\nconst defaultProps = {};\n\nconst mapStateToProps = state => ({\n  ignoreFocus: state.getIn(['modal', 'ignoreFocus']),\n  type: state.getIn(['modal', 'stack', 0, 'modalType'], null),\n  props: state.getIn(['modal', 'stack', 0, 'modalProps'], defaultProps),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onClose (confirmationMessage, ignoreFocus = false) {\n    if (confirmationMessage) {\n      dispatch(\n        openModal({\n          previousModalProps: confirmationMessage.props,\n          modalType: 'CONFIRM',\n          modalProps: {\n            message: confirmationMessage.message,\n            confirm: confirmationMessage.confirm,\n            onConfirm: () => dispatch(closeModal({\n              modalType: undefined,\n              ignoreFocus: { ignoreFocus },\n            })),\n          },\n        }),\n      );\n    } else {\n      dispatch(closeModal({\n        modalType: undefined,\n        ignoreFocus: { ignoreFocus },\n      }));\n    }\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ModalRoot);\n"],"file":"modal_container-BVBmHnZD.js"}