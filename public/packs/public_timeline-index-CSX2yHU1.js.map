{"version":3,"file":"public_timeline-index-CSX2yHU1.js","sources":["../../app/javascript/mastodon/features/public_timeline/components/column_settings.jsx","../../app/javascript/mastodon/features/public_timeline/containers/column_settings_container.js","../../app/javascript/mastodon/features/public_timeline/index.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { injectIntl, FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport SettingToggle from '../../notifications/components/setting_toggle';\n\nclass ColumnSettings extends PureComponent {\n\n  static propTypes = {\n    settings: ImmutablePropTypes.map.isRequired,\n    onChange: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n  };\n\n  render () {\n    const { settings, onChange } = this.props;\n\n    return (\n      <div className='column-settings'>\n        <section>\n          <div className='column-settings__row'>\n            <SettingToggle settings={settings} settingPath={['other', 'onlyMedia']} onChange={onChange} label={<FormattedMessage id='community.column_settings.media_only' defaultMessage='Media only' />} />\n            <SettingToggle settings={settings} settingPath={['other', 'onlyRemote']} onChange={onChange} label={<FormattedMessage id='community.column_settings.remote_only' defaultMessage='Remote only' />} />\n          </div>\n        </section>\n      </div>\n    );\n  }\n\n}\n\nexport default injectIntl(ColumnSettings);\n","import { connect } from 'react-redux';\n\nimport { changeColumnParams } from '../../../actions/columns';\nimport { changeSetting } from '../../../actions/settings';\nimport ColumnSettings from '../components/column_settings';\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n\n  return {\n    settings: (uuid && index >= 0) ? columns.get(index).get('params') : state.getIn(['settings', 'public']),\n  };\n};\n\nconst mapDispatchToProps = (dispatch, { columnId }) => {\n  return {\n    onChange (key, checked) {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, key, checked));\n      } else {\n        dispatch(changeSetting(['public', ...key], checked));\n      }\n    },\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ColumnSettings);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { connect } from 'react-redux';\n\nimport PublicIcon from '@/material-icons/400-24px/public.svg?react';\nimport { DismissableBanner } from 'mastodon/components/dismissable_banner';\nimport { identityContextPropShape, withIdentity } from 'mastodon/identity_context';\nimport { domain } from 'mastodon/initial_state';\n\nimport { addColumn, removeColumn, moveColumn } from '../../actions/columns';\nimport { connectPublicStream } from '../../actions/streaming';\nimport { expandPublicTimeline } from '../../actions/timelines';\nimport Column from '../../components/column';\nimport ColumnHeader from '../../components/column_header';\nimport StatusListContainer from '../ui/containers/status_list_container';\n\nimport ColumnSettingsContainer from './containers/column_settings_container';\n\nconst messages = defineMessages({\n  title: { id: 'column.public', defaultMessage: 'Federated timeline' },\n});\n\nconst mapStateToProps = (state, { columnId }) => {\n  const uuid = columnId;\n  const columns = state.getIn(['settings', 'columns']);\n  const index = columns.findIndex(c => c.get('uuid') === uuid);\n  const onlyMedia = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyMedia']) : state.getIn(['settings', 'public', 'other', 'onlyMedia']);\n  const onlyRemote = (columnId && index >= 0) ? columns.get(index).getIn(['params', 'other', 'onlyRemote']) : state.getIn(['settings', 'public', 'other', 'onlyRemote']);\n  const timelineState = state.getIn(['timelines', `public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`]);\n\n  return {\n    hasUnread: !!timelineState && timelineState.get('unread') > 0,\n    onlyMedia,\n    onlyRemote,\n  };\n};\n\nclass PublicTimeline extends PureComponent {\n  static defaultProps = {\n    onlyMedia: false,\n  };\n\n  static propTypes = {\n    identity: identityContextPropShape,\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    columnId: PropTypes.string,\n    multiColumn: PropTypes.bool,\n    hasUnread: PropTypes.bool,\n    onlyMedia: PropTypes.bool,\n    onlyRemote: PropTypes.bool,\n  };\n\n  handlePin = () => {\n    const { columnId, dispatch, onlyMedia, onlyRemote } = this.props;\n\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn(onlyRemote ? 'REMOTE' : 'PUBLIC', { other: { onlyMedia, onlyRemote } }));\n    }\n  };\n\n  handleMove = (dir) => {\n    const { columnId, dispatch } = this.props;\n    dispatch(moveColumn(columnId, dir));\n  };\n\n  handleHeaderClick = () => {\n    this.column.scrollTop();\n  };\n\n  componentDidMount () {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n    const { signedIn } = this.props.identity;\n\n    dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n    if (signedIn) {\n      this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n    }\n  }\n\n  componentDidUpdate (prevProps) {\n    const { signedIn } = this.props.identity;\n\n    if (prevProps.onlyMedia !== this.props.onlyMedia || prevProps.onlyRemote !== this.props.onlyRemote) {\n      const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n      if (this.disconnect) {\n        this.disconnect();\n      }\n\n      dispatch(expandPublicTimeline({ onlyMedia, onlyRemote }));\n\n      if (signedIn) {\n        this.disconnect = dispatch(connectPublicStream({ onlyMedia, onlyRemote }));\n      }\n    }\n  }\n\n  componentWillUnmount () {\n    if (this.disconnect) {\n      this.disconnect();\n      this.disconnect = null;\n    }\n  }\n\n  setRef = c => {\n    this.column = c;\n  };\n\n  handleLoadMore = maxId => {\n    const { dispatch, onlyMedia, onlyRemote } = this.props;\n\n    dispatch(expandPublicTimeline({ maxId, onlyMedia, onlyRemote }));\n  };\n\n  render () {\n    const { intl, columnId, hasUnread, multiColumn, onlyMedia, onlyRemote } = this.props;\n    const pinned = !!columnId;\n\n    return (\n      <Column bindToDocument={!multiColumn} ref={this.setRef} label={intl.formatMessage(messages.title)}>\n        <ColumnHeader\n          icon='globe'\n          iconComponent={PublicIcon}\n          active={hasUnread}\n          title={intl.formatMessage(messages.title)}\n          onPin={this.handlePin}\n          onMove={this.handleMove}\n          onClick={this.handleHeaderClick}\n          pinned={pinned}\n          multiColumn={multiColumn}\n        >\n          <ColumnSettingsContainer columnId={columnId} />\n        </ColumnHeader>\n\n        <StatusListContainer\n          prepend={<DismissableBanner id='public_timeline'><FormattedMessage id='dismissable_banner.public_timeline' defaultMessage='These are the most recent public posts from people on the fediverse that people on {domain} follow.' values={{ domain }} /></DismissableBanner>}\n          timelineId={`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`}\n          onLoadMore={this.handleLoadMore}\n          trackScroll={!pinned}\n          scrollKey={`public_timeline-${columnId}`}\n          emptyMessage={<FormattedMessage id='empty_column.public' defaultMessage='There is nothing here! Write something publicly, or manually follow users from other servers to fill it up' />}\n          bindToDocument={!multiColumn}\n        />\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='noindex' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(withIdentity(injectIntl(PublicTimeline)));\n"],"names":["ColumnSettings","PureComponent","render","settings","onChange","props","jsx","jsxs","SettingToggle","FormattedMessage","ColumnSettings$1","injectIntl","mapStateToProps","state","columnId","uuid","columns","getIn","index","findIndex","c","get","mapDispatchToProps","dispatch","key","checked","changeColumnParams","changeSetting","ColumnSettingsContainer","connect","messages","defineMessages","title","id","defaultMessage","onlyMedia","onlyRemote","timelineState","hasUnread","PublicTimeline","handlePin","removeColumn","addColumn","other","handleMove","dir","moveColumn","handleHeaderClick","column","scrollTop","setRef","handleLoadMore","maxId","expandPublicTimeline","componentDidMount","signedIn","identity","disconnect","connectPublicStream","componentDidUpdate","prevProps","componentWillUnmount","intl","multiColumn","pinned","Column","formatMessage","ColumnHeader","PublicIcon","StatusListContainer","DismissableBanner","domain","Helmet","__publicField","defaultProps","withIdentity"],"mappings":"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"}