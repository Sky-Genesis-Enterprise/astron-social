{"version":3,"file":"embed_modal-DPLEGFKI.js","sources":["../../app/javascript/mastodon/components/copy_paste_text.tsx","../../app/javascript/mastodon/features/ui/components/embed_modal.tsx"],"sourcesContent":["import { useRef, useState, useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ContentCopyIcon from '@/material-icons/400-24px/content_copy.svg?react';\nimport { Icon } from 'mastodon/components/icon';\nimport { useTimeout } from 'mastodon/hooks/useTimeout';\n\nexport const CopyPasteText: React.FC<{ value: string }> = ({ value }) => {\n  const inputRef = useRef<HTMLTextAreaElement>(null);\n  const [copied, setCopied] = useState(false);\n  const [focused, setFocused] = useState(false);\n  const [setAnimationTimeout] = useTimeout();\n\n  const handleInputClick = useCallback(() => {\n    setCopied(false);\n\n    if (inputRef.current) {\n      inputRef.current.focus();\n      inputRef.current.select();\n      inputRef.current.setSelectionRange(0, value.length);\n    }\n  }, [setCopied, value]);\n\n  const handleButtonClick = useCallback(\n    (e: React.MouseEvent) => {\n      e.stopPropagation();\n      void navigator.clipboard.writeText(value);\n      inputRef.current?.blur();\n      setCopied(true);\n      setAnimationTimeout(() => {\n        setCopied(false);\n      }, 700);\n    },\n    [setCopied, setAnimationTimeout, value],\n  );\n\n  const handleKeyUp = useCallback(\n    (e: React.KeyboardEvent) => {\n      if (e.key !== ' ') return;\n      void navigator.clipboard.writeText(value);\n      setCopied(true);\n      setAnimationTimeout(() => {\n        setCopied(false);\n      }, 700);\n    },\n    [setCopied, setAnimationTimeout, value],\n  );\n\n  const handleFocus = useCallback(() => {\n    setFocused(true);\n  }, [setFocused]);\n\n  const handleBlur = useCallback(() => {\n    setFocused(false);\n  }, [setFocused]);\n\n  return (\n    <div\n      className={classNames('copy-paste-text', { copied, focused })}\n      tabIndex={0}\n      role='button'\n      onClick={handleInputClick}\n      onKeyUp={handleKeyUp}\n    >\n      <textarea\n        readOnly\n        value={value}\n        ref={inputRef}\n        onClick={handleInputClick}\n        onFocus={handleFocus}\n        onBlur={handleBlur}\n      />\n\n      <button className='button' onClick={handleButtonClick}>\n        <Icon id='copy' icon={ContentCopyIcon} />{' '}\n        {copied ? (\n          <FormattedMessage id='copypaste.copied' defaultMessage='Copied' />\n        ) : (\n          <FormattedMessage\n            id='copypaste.copy_to_clipboard'\n            defaultMessage='Copy to clipboard'\n          />\n        )}\n      </button>\n    </div>\n  );\n};\n","import { useRef, useState, useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { showAlertForError } from 'mastodon/actions/alerts';\nimport api from 'mastodon/api';\nimport { Button } from 'mastodon/components/button';\nimport { CopyPasteText } from 'mastodon/components/copy_paste_text';\nimport { useAppDispatch } from 'mastodon/store';\n\ninterface OEmbedResponse {\n  html: string;\n}\n\nconst EmbedModal: React.FC<{\n  id: string;\n  onClose: () => void;\n}> = ({ id, onClose }) => {\n  const iframeRef = useRef<HTMLIFrameElement>(null);\n  const intervalRef = useRef<ReturnType<typeof setInterval>>();\n  const [oembed, setOembed] = useState<OEmbedResponse | null>(null);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    api()\n      .get(`/api/web/embeds/${id}`)\n      .then((res) => {\n        const data = res.data as OEmbedResponse;\n\n        setOembed(data);\n\n        const iframeDocument = iframeRef.current?.contentWindow?.document;\n\n        if (!iframeDocument) {\n          return '';\n        }\n\n        iframeDocument.open();\n        iframeDocument.write(data.html);\n        iframeDocument.close();\n\n        iframeDocument.body.style.margin = '0px';\n\n        // This is our best chance to ensure the parent iframe has the correct height...\n        intervalRef.current = setInterval(\n          () =>\n            window.requestAnimationFrame(() => {\n              if (iframeRef.current) {\n                iframeRef.current.width = `${iframeDocument.body.scrollWidth}px`;\n                iframeRef.current.height = `${iframeDocument.body.scrollHeight}px`;\n              }\n            }),\n          100,\n        );\n\n        return '';\n      })\n      .catch((error: unknown) => {\n        dispatch(showAlertForError(error));\n      });\n  }, [dispatch, id, setOembed]);\n\n  useEffect(\n    () => () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current);\n      }\n    },\n    [],\n  );\n\n  return (\n    <div className='modal-root__modal dialog-modal'>\n      <div className='dialog-modal__header'>\n        <Button onClick={onClose}>\n          <FormattedMessage id='report.close' defaultMessage='Done' />\n        </Button>\n        <span className='dialog-modal__header__title'>\n          <FormattedMessage id='status.embed' defaultMessage='Get embed code' />\n        </span>\n        <Button secondary onClick={onClose}>\n          <FormattedMessage\n            id='confirmation_modal.cancel'\n            defaultMessage='Cancel'\n          />\n        </Button>\n      </div>\n\n      <div className='dialog-modal__content'>\n        <div className='dialog-modal__content__form'>\n          <FormattedMessage\n            id='embed.instructions'\n            defaultMessage='Embed this status on your website by copying the code below.'\n          />\n\n          <CopyPasteText value={oembed?.html ?? ''} />\n\n          <FormattedMessage\n            id='embed.preview'\n            defaultMessage='Here is what it will look like:'\n          />\n\n          <iframe\n            // eslint-disable-next-line @typescript-eslint/no-deprecated\n            frameBorder='0'\n            ref={iframeRef}\n            sandbox='allow-scripts allow-same-origin'\n            title='Preview'\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default EmbedModal;\n"],"names":["CopyPasteText","value","inputRef","useRef","copied","setCopied","useState","focused","setFocused","setAnimationTimeout","useTimeout","handleInputClick","useCallback","current","focus","select","setSelectionRange","length","handleButtonClick","e","stopPropagation","navigator","clipboard","writeText","blur","handleKeyUp","key","handleFocus","handleBlur","jsxs","classNames","jsx","Icon","ContentCopyIcon","FormattedMessage","EmbedModal","id","onClose","iframeRef","intervalRef","oembed","setOembed","dispatch","useAppDispatch","useEffect","api","get","then","res","data","iframeDocument","contentWindow","document","open","write","html","close","body","style","margin","setInterval","window","requestAnimationFrame","width","scrollWidth","height","scrollHeight","catch","error","showAlertForError","clearInterval","Button"],"mappings":"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"}