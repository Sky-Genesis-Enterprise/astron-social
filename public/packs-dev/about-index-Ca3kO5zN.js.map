{"version":3,"file":"about-index-Ca3kO5zN.js","sources":["../../app/javascript/material-icons/400-24px/expand_more.svg?react","../../app/javascript/mastodon/features/about/components/section.tsx","../../app/javascript/mastodon/features/about/components/rules.tsx","../../app/javascript/mastodon/features/about/index.jsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgExpandMore = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M480-345 240-585l56-56 184 184 184-184 56 56-240 240Z\" }));\nexport default SvgExpandMore;\n","import type { FC, MouseEventHandler } from 'react';\nimport { useCallback, useState } from 'react';\n\nimport classNames from 'classnames';\n\nimport { Icon } from '@/mastodon/components/icon';\nimport ChevronRightIcon from '@/material-icons/400-24px/chevron_right.svg?react';\nimport ExpandMoreIcon from '@/material-icons/400-24px/expand_more.svg?react';\n\ninterface SectionProps {\n  title: string;\n  children?: React.ReactNode;\n  open?: boolean;\n  onOpen?: () => void;\n}\n\nexport const Section: FC<SectionProps> = ({\n  title,\n  children,\n  open = false,\n  onOpen,\n}) => {\n  const [collapsed, setCollapsed] = useState(!open);\n  const handleClick: MouseEventHandler = useCallback(() => {\n    setCollapsed((prev) => !prev);\n    onOpen?.();\n  }, [onOpen]);\n  return (\n    <div className={classNames('about__section', { active: !collapsed })}>\n      <button\n        className='about__section__title'\n        tabIndex={0}\n        onClick={handleClick}\n      >\n        <Icon\n          id={collapsed ? 'chevron-right' : 'chevron-down'}\n          icon={collapsed ? ChevronRightIcon : ExpandMoreIcon}\n        />{' '}\n        {title}\n      </button>\n\n      {!collapsed && <div className='about__section__body'>{children}</div>}\n    </div>\n  );\n};\n","import { useCallback, useState } from 'react';\nimport type { ChangeEventHandler, FC } from 'react';\n\nimport type { IntlShape } from 'react-intl';\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport type { List as ImmutableList } from 'immutable';\n\nimport type { SelectItem } from '@/mastodon/components/dropdown_selector';\nimport type { RootState } from '@/mastodon/store';\nimport { useAppSelector } from '@/mastodon/store';\n\nimport { Section } from './section';\n\nconst messages = defineMessages({\n  rules: { id: 'about.rules', defaultMessage: 'Server rules' },\n  defaultLocale: { id: 'about.default_locale', defaultMessage: 'Default' },\n});\n\ninterface RulesSectionProps {\n  isLoading?: boolean;\n}\n\ninterface BaseRule {\n  text: string;\n  hint: string;\n}\n\ninterface Rule extends BaseRule {\n  id: string;\n  translations?: Record<string, BaseRule>;\n}\n\nexport const RulesSection: FC<RulesSectionProps> = ({ isLoading = false }) => {\n  const intl = useIntl();\n  const [locale, setLocale] = useState(intl.locale);\n  const rules = useAppSelector((state) => rulesSelector(state, locale));\n  const localeOptions = useAppSelector((state) =>\n    localeOptionsSelector(state, intl),\n  );\n  const handleLocaleChange: ChangeEventHandler<HTMLSelectElement> = useCallback(\n    (e) => {\n      setLocale(e.currentTarget.value);\n    },\n    [],\n  );\n\n  if (isLoading) {\n    return <Section title={intl.formatMessage(messages.rules)} />;\n  }\n\n  if (rules.length === 0) {\n    return (\n      <Section title={intl.formatMessage(messages.rules)}>\n        <p>\n          <FormattedMessage\n            id='about.not_available'\n            defaultMessage='This information has not been made available on this server.'\n          />\n        </p>\n      </Section>\n    );\n  }\n\n  return (\n    <Section title={intl.formatMessage(messages.rules)}>\n      <ol className='rules-list'>\n        {rules.map((rule) => (\n          <li key={rule.id}>\n            <div className='rules-list__text'>{rule.text}</div>\n            {!!rule.hint && <div className='rules-list__hint'>{rule.hint}</div>}\n          </li>\n        ))}\n      </ol>\n\n      <div className='rules-languages'>\n        <label htmlFor='language-select'>\n          <FormattedMessage\n            id='about.language_label'\n            defaultMessage='Language'\n          />\n        </label>\n        <select onChange={handleLocaleChange} id='language-select'>\n          {localeOptions.map((option) => (\n            <option\n              key={option.value}\n              value={option.value}\n              selected={option.value === locale}\n            >\n              {option.text}\n            </option>\n          ))}\n        </select>\n      </div>\n    </Section>\n  );\n};\n\nconst selectRules = (state: RootState) => {\n  const rules = state.server.getIn([\n    'server',\n    'rules',\n  ]) as ImmutableList<Rule> | null;\n  if (!rules) {\n    return [];\n  }\n  return rules.toJS() as Rule[];\n};\n\nconst rulesSelector = createSelector(\n  [selectRules, (_state, locale: string) => locale],\n  (rules, locale): Rule[] => {\n    return rules.map((rule) => {\n      const translations = rule.translations;\n\n      // Handle cached responses from earlier versions\n      if (!translations) {\n        return rule;\n      }\n\n      const partialLocale = locale.split('-')[0];\n      if (partialLocale && translations[partialLocale]) {\n        rule.text = translations[partialLocale].text;\n        rule.hint = translations[partialLocale].hint;\n      }\n\n      if (translations[locale]) {\n        rule.text = translations[locale].text;\n        rule.hint = translations[locale].hint;\n      }\n\n      return rule;\n    });\n  },\n);\n\nconst localeOptionsSelector = createSelector(\n  [selectRules, (_state, intl: IntlShape) => intl],\n  (rules, intl): SelectItem[] => {\n    const langs: Record<string, SelectItem> = {\n      default: {\n        value: 'default',\n        text: intl.formatMessage(messages.defaultLocale),\n      },\n    };\n    // Use the default locale as a target to translate language names.\n    const intlLocale = new Intl.DisplayNames(intl.locale, {\n      type: 'language',\n    });\n    for (const { translations } of rules) {\n      for (const locale in translations) {\n        if (langs[locale]) {\n          continue; // Skip if already added\n        }\n        langs[locale] = {\n          value: locale,\n          text: intlLocale.of(locale) ?? locale,\n        };\n      }\n    }\n    return Object.values(langs);\n  },\n);\n","import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { defineMessages, injectIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { connect } from 'react-redux';\n\nimport { fetchServer, fetchExtendedDescription, fetchDomainBlocks  } from 'mastodon/actions/server';\nimport { Account } from 'mastodon/components/account';\nimport Column from 'mastodon/components/column';\nimport { ServerHeroImage } from 'mastodon/components/server_hero_image';\nimport { Skeleton } from 'mastodon/components/skeleton';\nimport { LinkFooter} from 'mastodon/features/ui/components/link_footer';\n\nimport { Section } from './components/section';\nimport { RulesSection } from './components/rules';\n\nconst messages = defineMessages({\n  title: { id: 'column.about', defaultMessage: 'About' },\n  blocks: { id: 'about.blocks', defaultMessage: 'Moderated servers' },\n  silenced: { id: 'about.domain_blocks.silenced.title', defaultMessage: 'Limited' },\n  silencedExplanation: { id: 'about.domain_blocks.silenced.explanation', defaultMessage: 'You will generally not see profiles and content from this server, unless you explicitly look it up or opt into it by following.' },\n  suspended: { id: 'about.domain_blocks.suspended.title', defaultMessage: 'Suspended' },\n  suspendedExplanation: { id: 'about.domain_blocks.suspended.explanation', defaultMessage: 'No data from this server will be processed, stored or exchanged, making any interaction or communication with users from this server impossible.' },\n});\n\nconst severityMessages = {\n  silence: {\n    title: messages.silenced,\n    explanation: messages.silencedExplanation,\n  },\n\n  suspend: {\n    title: messages.suspended,\n    explanation: messages.suspendedExplanation,\n  },\n};\n\nconst mapStateToProps = state => ({\n  server: state.getIn(['server', 'server']),\n  locale: state.getIn(['meta', 'locale']),\n  extendedDescription: state.getIn(['server', 'extendedDescription']),\n  domainBlocks: state.getIn(['server', 'domainBlocks']),\n});\n\nclass About extends PureComponent {\n\n  static propTypes = {\n    server: ImmutablePropTypes.map,\n    locale: ImmutablePropTypes.string,\n    extendedDescription: ImmutablePropTypes.map,\n    domainBlocks: ImmutablePropTypes.contains({\n      isLoading: PropTypes.bool,\n      isAvailable: PropTypes.bool,\n      items: ImmutablePropTypes.list,\n    }),\n    dispatch: PropTypes.func.isRequired,\n    intl: PropTypes.object.isRequired,\n    multiColumn: PropTypes.bool,\n  };\n\n  componentDidMount () {\n    const { dispatch } = this.props;\n    dispatch(fetchServer());\n    dispatch(fetchExtendedDescription());\n  }\n\n  handleDomainBlocksOpen = () => {\n    const { dispatch } = this.props;\n    dispatch(fetchDomainBlocks());\n  };\n\n  render () {\n    const { multiColumn, intl, server, extendedDescription, domainBlocks, locale } = this.props;\n    const isLoading = server.get('isLoading');\n\n    return (\n      <Column bindToDocument={!multiColumn} label={intl.formatMessage(messages.title)}>\n        <div className='scrollable about'>\n          <div className='about__header'>\n            <ServerHeroImage blurhash={server.getIn(['thumbnail', 'blurhash'])} src={server.getIn(['thumbnail', 'url'])} srcSet={server.getIn(['thumbnail', 'versions'])?.map((value, key) => `${value} ${key.replace('@', '')}`).join(', ')} className='about__header__hero' />\n            <h1>{isLoading ? <Skeleton width='10ch' /> : server.get('domain')}</h1>\n            <p><FormattedMessage id='about.powered_by' defaultMessage='Decentralized social media powered by {mastodon}' values={{ mastodon: <a href='https://joinmastodon.org' className='about__mail' target='_blank' rel='noopener'>Mastodon</a> }} /></p>\n          </div>\n\n          <div className='about__meta'>\n            <div className='about__meta__column'>\n              <h4><FormattedMessage id='server_banner.administered_by' defaultMessage='Administered by:' /></h4>\n\n              <Account id={server.getIn(['contact', 'account', 'id'])} size={36} minimal />\n            </div>\n\n            <hr className='about__meta__divider' />\n\n            <div className='about__meta__column'>\n              <h4><FormattedMessage id='about.contact' defaultMessage='Contact:' /></h4>\n\n              {isLoading ? <Skeleton width='10ch' /> : <a className='about__mail' href={`mailto:${server.getIn(['contact', 'email'])}`}>{server.getIn(['contact', 'email'])}</a>}\n            </div>\n          </div>\n\n          <Section open title={intl.formatMessage(messages.title)}>\n            {extendedDescription.get('isLoading') ? (\n              <>\n                <Skeleton width='100%' />\n                <br />\n                <Skeleton width='100%' />\n                <br />\n                <Skeleton width='100%' />\n                <br />\n                <Skeleton width='70%' />\n              </>\n            ) : (extendedDescription.get('content')?.length > 0 ? (\n              <div\n                className='prose'\n                dangerouslySetInnerHTML={{ __html: extendedDescription.get('content') }}\n              />\n            ) : (\n              <p><FormattedMessage id='about.not_available' defaultMessage='This information has not been made available on this server.' /></p>\n            ))}\n          </Section>\n\n          <RulesSection />\n\n          <Section title={intl.formatMessage(messages.blocks)} onOpen={this.handleDomainBlocksOpen}>\n            {domainBlocks.get('isLoading') ? (\n              <>\n                <Skeleton width='100%' />\n                <br />\n                <Skeleton width='70%' />\n              </>\n            ) : (domainBlocks.get('isAvailable') ? (\n              <>\n                <p><FormattedMessage id='about.domain_blocks.preamble' defaultMessage='Mastodon generally allows you to view content from and interact with users from any other server in the fediverse. These are the exceptions that have been made on this particular server.' /></p>\n\n                {domainBlocks.get('items').size > 0 && (\n                  <div className='about__domain-blocks'>\n                    {domainBlocks.get('items').map(block => (\n                      <div className='about__domain-blocks__domain' key={block.get('domain')}>\n                        <div className='about__domain-blocks__domain__header'>\n                          <h6><span title={`SHA-256: ${block.get('digest')}`}>{block.get('domain')}</span></h6>\n                          <span className='about__domain-blocks__domain__type' title={intl.formatMessage(severityMessages[block.get('severity')].explanation)}>{intl.formatMessage(severityMessages[block.get('severity')].title)}</span>\n                        </div>\n\n                        <p>{(block.get('comment') || '').length > 0 ? block.get('comment') : <FormattedMessage id='about.domain_blocks.no_reason_available' defaultMessage='Reason not available' />}</p>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </>\n            ) : (\n              <p><FormattedMessage id='about.not_available' defaultMessage='This information has not been made available on this server.' /></p>\n            ))}\n          </Section>\n\n          <LinkFooter />\n\n          <div className='about__footer'>\n            <p><FormattedMessage id='about.disclaimer' defaultMessage='Mastodon is free, open-source software, and a trademark of Mastodon gGmbH.' /></p>\n          </div>\n        </div>\n\n        <Helmet>\n          <title>{intl.formatMessage(messages.title)}</title>\n          <meta name='robots' content='all' />\n        </Helmet>\n      </Column>\n    );\n  }\n\n}\n\nexport default connect(mapStateToProps)(injectIntl(About));\n"],"names":["SvgExpandMore","props","React.createElement","Section","title","children","open","onOpen","collapsed","setCollapsed","useState","handleClick","useCallback","prev","jsxDEV","classNames","active","Icon","ChevronRightIcon","ExpandMoreIcon","this","messages","defineMessages","rules","id","defaultMessage","defaultLocale","RulesSection","isLoading","intl","useIntl","locale","setLocale","useAppSelector","state","rulesSelector","localeOptions","localeOptionsSelector","handleLocaleChange","e","currentTarget","value","formatMessage","length","FormattedMessage","map","rule","text","hint","option","selectRules","server","getIn","toJS","createSelector","_state","translations","partialLocale","split","langs","default","intlLocale","Intl","DisplayNames","type","of","Object","values","blocks","silenced","silencedExplanation","suspended","suspendedExplanation","severityMessages","silence","explanation","suspend","mapStateToProps","extendedDescription","domainBlocks","About","PureComponent","handleDomainBlocksOpen","dispatch","fetchDomainBlocks","componentDidMount","fetchServer","fetchExtendedDescription","render","multiColumn","get","Column","ServerHeroImage","key","replace","join","Skeleton","mastodon","Account","Fragment","__html","size","block","LinkFooter","Helmet","index","connect","injectIntl"],"mappings":"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"}