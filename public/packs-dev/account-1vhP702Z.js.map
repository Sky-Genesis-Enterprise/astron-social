{"version":3,"file":"account-1vhP702Z.js","sources":["../../app/javascript/mastodon/components/account.tsx"],"sourcesContent":["import { useCallback, useMemo } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport {\n  blockAccount,\n  unblockAccount,\n  muteAccount,\n  unmuteAccount,\n  followAccountSuccess,\n  unpinAccount,\n  pinAccount,\n} from 'mastodon/actions/accounts';\nimport { showAlertForError } from 'mastodon/actions/alerts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { initMuteModal } from 'mastodon/actions/mutes';\nimport { apiFollowAccount } from 'mastodon/api/accounts';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { Button } from 'mastodon/components/button';\nimport { FollowersCounter } from 'mastodon/components/counters';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { Dropdown } from 'mastodon/components/dropdown_menu';\nimport { FollowButton } from 'mastodon/components/follow_button';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { Skeleton } from 'mastodon/components/skeleton';\nimport { VerifiedBadge } from 'mastodon/components/verified_badge';\nimport { useIdentity } from 'mastodon/identity_context';\nimport { me } from 'mastodon/initial_state';\nimport type { MenuItem } from 'mastodon/models/dropdown_menu';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nconst messages = defineMessages({\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  cancel_follow_request: {\n    id: 'account.cancel_follow_request',\n    defaultMessage: 'Withdraw follow request',\n  },\n  unblock: { id: 'account.unblock_short', defaultMessage: 'Unblock' },\n  unmute: { id: 'account.unmute_short', defaultMessage: 'Unmute' },\n  mute_notifications: {\n    id: 'account.mute_notifications_short',\n    defaultMessage: 'Mute notifications',\n  },\n  unmute_notifications: {\n    id: 'account.unmute_notifications_short',\n    defaultMessage: 'Unmute notifications',\n  },\n  mute: { id: 'account.mute_short', defaultMessage: 'Mute' },\n  block: { id: 'account.block_short', defaultMessage: 'Block' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  addToLists: {\n    id: 'account.add_or_remove_from_list',\n    defaultMessage: 'Add or Remove from lists',\n  },\n  openOriginalPage: {\n    id: 'account.open_original_page',\n    defaultMessage: 'Open original page',\n  },\n});\n\ninterface AccountProps {\n  size?: number;\n  id: string;\n  hidden?: boolean;\n  minimal?: boolean;\n  defaultAction?: 'block' | 'mute';\n  withBio?: boolean;\n  withMenu?: boolean;\n}\n\nexport const Account: React.FC<AccountProps> = ({\n  id,\n  size = 46,\n  hidden,\n  minimal,\n  defaultAction,\n  withBio,\n  withMenu = true,\n}) => {\n  const intl = useIntl();\n  const { signedIn } = useIdentity();\n  const account = useAppSelector((state) => state.accounts.get(id));\n  const relationship = useAppSelector((state) => state.relationships.get(id));\n  const dispatch = useAppDispatch();\n  const accountUrl = account?.url;\n  const isRemote = account?.acct !== account?.username;\n\n  const handleBlock = useCallback(() => {\n    if (relationship?.blocking) {\n      dispatch(unblockAccount(id));\n    } else {\n      dispatch(blockAccount(id));\n    }\n  }, [dispatch, id, relationship]);\n\n  const handleMute = useCallback(() => {\n    if (relationship?.muting) {\n      dispatch(unmuteAccount(id));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  }, [dispatch, id, account, relationship]);\n\n  const menu = useMemo(() => {\n    let arr: MenuItem[] = [];\n\n    if (defaultAction === 'mute') {\n      const handleMuteNotifications = () => {\n        dispatch(muteAccount(id, true));\n      };\n\n      const handleUnmuteNotifications = () => {\n        dispatch(muteAccount(id, false));\n      };\n\n      arr = [\n        {\n          text: intl.formatMessage(\n            relationship?.muting_notifications\n              ? messages.unmute_notifications\n              : messages.mute_notifications,\n          ),\n          action: relationship?.muting_notifications\n            ? handleUnmuteNotifications\n            : handleMuteNotifications,\n        },\n      ];\n    } else if (defaultAction !== 'block') {\n      if (isRemote && accountUrl) {\n        arr.push({\n          text: intl.formatMessage(messages.openOriginalPage),\n          href: accountUrl,\n        });\n      }\n\n      if (signedIn) {\n        const handleAddToLists = () => {\n          const openAddToListModal = () => {\n            dispatch(\n              openModal({\n                modalType: 'LIST_ADDER',\n                modalProps: {\n                  accountId: id,\n                },\n              }),\n            );\n          };\n          if (relationship?.following || relationship?.requested || id === me) {\n            openAddToListModal();\n          } else {\n            dispatch(\n              openModal({\n                modalType: 'CONFIRM_FOLLOW_TO_LIST',\n                modalProps: {\n                  accountId: id,\n                  onConfirm: () => {\n                    apiFollowAccount(id)\n                      .then((relationship) => {\n                        dispatch(\n                          followAccountSuccess({\n                            relationship,\n                            alreadyFollowing: false,\n                          }),\n                        );\n                        openAddToListModal();\n                      })\n                      .catch((err: unknown) => {\n                        dispatch(showAlertForError(err));\n                      });\n                  },\n                },\n              }),\n            );\n          }\n        };\n\n        arr.push({\n          text: intl.formatMessage(messages.addToLists),\n          action: handleAddToLists,\n        });\n\n        if (id !== me && (relationship?.following || relationship?.requested)) {\n          const handleEndorseToggle = () => {\n            if (relationship.endorsed) {\n              dispatch(unpinAccount(id));\n            } else {\n              dispatch(pinAccount(id));\n            }\n          };\n          arr.push({\n            text: intl.formatMessage(\n              // Defined in features/account_timeline/components/account_header.tsx\n              relationship.endorsed\n                ? { id: 'account.unendorse' }\n                : { id: 'account.endorse' },\n            ),\n            action: handleEndorseToggle,\n          });\n        }\n      }\n    }\n\n    return arr;\n  }, [\n    dispatch,\n    intl,\n    id,\n    accountUrl,\n    relationship,\n    defaultAction,\n    isRemote,\n    signedIn,\n  ]);\n\n  if (hidden) {\n    return (\n      <>\n        {account?.display_name}\n        {account?.username}\n      </>\n    );\n  }\n\n  let button: React.ReactNode;\n  let dropdown: React.ReactNode;\n\n  if (menu.length > 0 && withMenu) {\n    dropdown = (\n      <Dropdown\n        items={menu}\n        icon='ellipsis-h'\n        iconComponent={MoreHorizIcon}\n        title={intl.formatMessage(messages.more)}\n      />\n    );\n  }\n\n  if (defaultAction === 'block') {\n    button = (\n      <Button\n        text={intl.formatMessage(\n          relationship?.blocking ? messages.unblock : messages.block,\n        )}\n        onClick={handleBlock}\n      />\n    );\n  } else if (defaultAction === 'mute') {\n    button = (\n      <Button\n        text={intl.formatMessage(\n          relationship?.muting ? messages.unmute : messages.mute,\n        )}\n        onClick={handleMute}\n      />\n    );\n  } else {\n    button = <FollowButton accountId={id} />;\n  }\n\n  let muteTimeRemaining: React.ReactNode;\n\n  if (account?.mute_expires_at) {\n    muteTimeRemaining = (\n      <>\n        Â· <RelativeTimestamp timestamp={account.mute_expires_at} futureDate />\n      </>\n    );\n  }\n\n  let verification: React.ReactNode;\n\n  const firstVerifiedField = account?.fields.find((item) => !!item.verified_at);\n\n  if (firstVerifiedField) {\n    verification = <VerifiedBadge link={firstVerifiedField.value} />;\n  }\n\n  return (\n    <div\n      className={classNames('account', {\n        'account--minimal': minimal,\n      })}\n    >\n      <div\n        className={classNames('account__wrapper', {\n          'account__wrapper--with-bio': account && withBio,\n        })}\n      >\n        <div className='account__info-wrapper'>\n          <Link\n            className='account__display-name'\n            title={account?.acct}\n            to={`/@${account?.acct}`}\n            data-hover-card-account={id}\n          >\n            <div className='account__avatar-wrapper'>\n              {account ? (\n                <Avatar account={account} size={size} />\n              ) : (\n                <Skeleton width={size} height={size} />\n              )}\n            </div>\n\n            <div className='account__contents'>\n              <DisplayName account={account} />\n\n              {!minimal && (\n                <div className='account__details'>\n                  {account ? (\n                    <>\n                      <ShortNumber\n                        value={account.followers_count}\n                        renderer={FollowersCounter}\n                      />{' '}\n                      {verification} {muteTimeRemaining}\n                    </>\n                  ) : (\n                    <Skeleton width='7ch' />\n                  )}\n                </div>\n              )}\n            </div>\n          </Link>\n\n          {account &&\n            withBio &&\n            (account.note.length > 0 ? (\n              <div\n                className='account__note translate'\n                dangerouslySetInnerHTML={{ __html: account.note_emojified }}\n              />\n            ) : (\n              <div className='account__note account__note--missing'>\n                <FormattedMessage\n                  id='account.no_bio'\n                  defaultMessage='No description provided.'\n                />\n              </div>\n            ))}\n        </div>\n\n        {!minimal && (\n          <div className='account__relationship'>\n            {dropdown}\n            {button}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n"],"names":["messages","defineMessages","follow","id","defaultMessage","unfollow","cancel_follow_request","unblock","unmute","mute_notifications","unmute_notifications","mute","block","more","addToLists","openOriginalPage","Account","size","hidden","minimal","defaultAction","withBio","withMenu","intl","useIntl","signedIn","useIdentity","account","useAppSelector","state","accounts","get","relationship","relationships","dispatch","useAppDispatch","accountUrl","url","isRemote","acct","username","handleBlock","useCallback","blocking","unblockAccount","blockAccount","handleMute","muting","unmuteAccount","initMuteModal","menu","useMemo","arr","handleMuteNotifications","muteAccount","handleUnmuteNotifications","text","formatMessage","muting_notifications","action","push","href","handleAddToLists","openAddToListModal","openModal","modalType","modalProps","accountId","following","requested","me","onConfirm","apiFollowAccount","then","followAccountSuccess","alreadyFollowing","catch","err","showAlertForError","handleEndorseToggle","endorsed","unpinAccount","pinAccount","jsxDEV","Fragment","display_name","this","button","dropdown","length","Dropdown","MoreHorizIcon","Button","FollowButton","muteTimeRemaining","mute_expires_at","RelativeTimestamp","verification","firstVerifiedField","fields","find","item","verified_at","VerifiedBadge","value","classNames","Link","Avatar","Skeleton","DisplayName","ShortNumber","followers_count","FollowersCounter","note","__html","note_emojified","FormattedMessage"],"mappings":"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"}