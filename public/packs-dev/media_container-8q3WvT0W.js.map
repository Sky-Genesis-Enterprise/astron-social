{"version":3,"file":"media_container-8q3WvT0W.js","sources":["../../app/javascript/mastodon/containers/media_container.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\nimport { createPortal } from 'react-dom';\n\nimport { fromJS } from 'immutable';\n\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport MediaGallery from 'mastodon/components/media_gallery';\nimport ModalRoot from 'mastodon/components/modal_root';\nimport { Poll } from 'mastodon/components/poll';\nimport { Audio } from 'mastodon/features/audio';\nimport Card from 'mastodon/features/status/components/card';\nimport MediaModal from 'mastodon/features/ui/components/media_modal';\nimport { Video } from 'mastodon/features/video';\nimport { IntlProvider } from 'mastodon/locales';\nimport { createPollFromServerJSON } from 'mastodon/models/poll';\nimport { getScrollbarWidth } from 'mastodon/utils/scrollbar';\n\nconst MEDIA_COMPONENTS = { MediaGallery, Video, Card, Poll, Hashtag, Audio };\n\nexport default class MediaContainer extends PureComponent {\n\n  static propTypes = {\n    components: PropTypes.object.isRequired,\n  };\n\n  state = {\n    media: null,\n    index: null,\n    lang: null,\n    time: null,\n    backgroundColor: null,\n    options: null,\n  };\n\n  handleOpenMedia = (media, index, lang) => {\n    document.body.classList.add('with-modals--active');\n    document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n\n    this.setState({ media, index, lang });\n  };\n\n  handleOpenVideo = (lang, options) => {\n    const { components } = this.props;\n    const { media } = JSON.parse(components[options.componentIndex].getAttribute('data-props'));\n    const mediaList = fromJS(media);\n\n    document.body.classList.add('with-modals--active');\n    document.documentElement.style.marginRight = `${getScrollbarWidth()}px`;\n\n    this.setState({ media: mediaList, lang, options });\n  };\n\n  handleCloseMedia = () => {\n    document.body.classList.remove('with-modals--active');\n    document.documentElement.style.marginRight = '0';\n\n    this.setState({\n      media: null,\n      index: null,\n      time: null,\n      backgroundColor: null,\n      options: null,\n    });\n  };\n\n  setBackgroundColor = color => {\n    this.setState({ backgroundColor: color });\n  };\n\n  render () {\n    const { components } = this.props;\n\n    let handleOpenVideo;\n\n    // Don't offer to expand the video in a lightbox if we're in a frame\n    if (window.self === window.top) {\n      handleOpenVideo = this.handleOpenVideo;\n    }\n\n    return (\n      <IntlProvider>\n        <>\n          {Array.from(components).map((component, i) => {\n            const componentName = component.getAttribute('data-component');\n            const Component = MEDIA_COMPONENTS[componentName];\n            const { media, card, poll, hashtag, ...props } = JSON.parse(component.getAttribute('data-props'));\n\n            Object.assign(props, {\n              ...(media   ? { media:   fromJS(media)   } : {}),\n              ...(card    ? { card:    fromJS(card)    } : {}),\n              ...(poll    ? { poll:    createPollFromServerJSON(poll)    } : {}),\n              ...(hashtag ? { hashtag: fromJS(hashtag) } : {}),\n\n              ...(componentName === 'Video' ? {\n                componentIndex: i,\n                onOpenVideo: handleOpenVideo,\n              } : {\n                onOpenMedia: this.handleOpenMedia,\n              }),\n            });\n\n            return createPortal(\n              <Component {...props} key={`media-${i}`} />,\n              component,\n            );\n          })}\n\n          <ModalRoot backgroundColor={this.state.backgroundColor} onClose={this.handleCloseMedia}>\n            {this.state.media && (\n              <MediaModal\n                media={this.state.media}\n                index={this.state.index || 0}\n                lang={this.state.lang}\n                currentTime={this.state.options?.startTime}\n                autoPlay={this.state.options?.autoPlay}\n                volume={this.state.options?.defaultVolume}\n                onClose={this.handleCloseMedia}\n                onChangeBackgroundColor={this.setBackgroundColor}\n              />\n            )}\n          </ModalRoot>\n        </>\n      </IntlProvider>\n    );\n  }\n\n}\n"],"names":["MEDIA_COMPONENTS","MediaGallery","Video","Card","Poll","Hashtag","Audio","MediaContainer","PureComponent","state","media","index","lang","time","backgroundColor","options","handleOpenMedia","document","body","classList","add","documentElement","style","marginRight","getScrollbarWidth","setState","handleOpenVideo","components","props","JSON","parse","componentIndex","getAttribute","mediaList","fromJS","handleCloseMedia","remove","setBackgroundColor","color","render","window","self","top","jsxDEV","IntlProvider","Fragment","Array","from","map","component","i","componentName","Component","card","poll","hashtag","Object","assign","createPollFromServerJSON","onOpenVideo","onOpenMedia","createPortal","ModalRoot","MediaModal","_a","startTime","_b","autoPlay","_c","defaultVolume"],"mappings":"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"}