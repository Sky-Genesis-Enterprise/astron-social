{"version":3,"file":"numbers-CGZQWBYL.js","sources":["../../app/javascript/mastodon/utils/numbers.ts"],"sourcesContent":["import type { ValueOf } from '../../types/util';\n\nexport const DECIMAL_UNITS = Object.freeze({\n  ONE: 1,\n  TEN: 10,\n  HUNDRED: 100,\n  THOUSAND: 1_000,\n  MILLION: 1_000_000,\n  BILLION: 1_000_000_000,\n  TRILLION: 1_000_000_000_000,\n});\nexport type DecimalUnits = ValueOf<typeof DECIMAL_UNITS>;\n\nconst TEN_THOUSAND = DECIMAL_UNITS.THOUSAND * 10;\nconst TEN_MILLIONS = DECIMAL_UNITS.MILLION * 10;\n\nexport type ShortNumber = [number, DecimalUnits, 0 | 1]; // Array of: shorten number, unit of shorten number and maximum fraction digits\n\n/**\n * @param sourceNumber Number to convert to short number\n * @returns Calculated short number\n * @example\n * shortNumber(5936);\n * // => [5.936, 1000, 1]\n */\nexport function toShortNumber(sourceNumber: number): ShortNumber {\n  if (sourceNumber < DECIMAL_UNITS.THOUSAND) {\n    return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n  } else if (sourceNumber < DECIMAL_UNITS.MILLION) {\n    return [\n      sourceNumber / DECIMAL_UNITS.THOUSAND,\n      DECIMAL_UNITS.THOUSAND,\n      sourceNumber < TEN_THOUSAND ? 1 : 0,\n    ];\n  } else if (sourceNumber < DECIMAL_UNITS.BILLION) {\n    return [\n      sourceNumber / DECIMAL_UNITS.MILLION,\n      DECIMAL_UNITS.MILLION,\n      sourceNumber < TEN_MILLIONS ? 1 : 0,\n    ];\n  } else if (sourceNumber < DECIMAL_UNITS.TRILLION) {\n    return [sourceNumber / DECIMAL_UNITS.BILLION, DECIMAL_UNITS.BILLION, 0];\n  }\n\n  return [sourceNumber, DECIMAL_UNITS.ONE, 0];\n}\n\n/**\n * @param sourceNumber Original number that is shortened\n * @param division The scale in which short number is displayed\n * @returns Number that can be used for plurals when short form used\n * @example\n * pluralReady(1793, DECIMAL_UNITS.THOUSAND)\n * // => 1790\n */\nexport function pluralReady(\n  sourceNumber: number,\n  division: DecimalUnits | null,\n): number {\n  if (division == null || division < DECIMAL_UNITS.HUNDRED) {\n    return sourceNumber;\n  }\n\n  const closestScale = division / DECIMAL_UNITS.TEN;\n\n  return Math.trunc(sourceNumber / closestScale) * closestScale;\n}\n\nexport function roundTo10(num: number): number {\n  return Math.round(num * 0.1) / 0.1;\n}\n\nexport function toCappedNumber(num: number, max = 99): string {\n  if (num > max) {\n    return `${max}+`;\n  } else {\n    return num.toString();\n  }\n}\n"],"names":["DECIMAL_UNITS","Object","freeze","ONE","TEN","HUNDRED","THOUSAND","MILLION","BILLION","TRILLION","TEN_THOUSAND","TEN_MILLIONS","toShortNumber","sourceNumber","pluralReady","division","closestScale","Math","trunc","roundTo10","num","round","toCappedNumber","max","toString"],"mappings":"AAEO,MAAMA,EAAgBC,OAAOC,OAAO,CACzCC,IAAK,EACLC,IAAK,GACLC,QAAS,IACTC,SAAU,IACVC,QAAS,IACTC,QAAS,IACTC,SAAU,IACZ,CAAC,EAGKC,EAAeV,EAAcM,SAAW,GACxCK,EAAeX,EAAcO,QAAU,GAWtC,SAASK,EAAcC,EAAmC,CAC/D,OAAIA,EAAeb,EAAcM,SACxB,CAACO,EAAcb,EAAcG,IAAK,CAAC,EACjCU,EAAeb,EAAcO,QAC/B,CACLM,EAAeb,EAAcM,SAC7BN,EAAcM,SACdO,EAAeH,EAAe,EAAI,CAAC,EAE5BG,EAAeb,EAAcQ,QAC/B,CACLK,EAAeb,EAAcO,QAC7BP,EAAcO,QACdM,EAAeF,EAAe,EAAI,CAAC,EAE5BE,EAAeb,EAAcS,SAC/B,CAACI,EAAeb,EAAcQ,QAASR,EAAcQ,QAAS,CAAC,EAGjE,CAACK,EAAcb,EAAcG,IAAK,CAAC,CAC5C,CAUO,SAASW,EACdD,EACAE,EACQ,CACR,GAAIA,GAAY,MAAQA,EAAWf,EAAcK,QAC/C,OAAOQ,EAGT,MAAMG,EAAeD,EAAWf,EAAcI,IAE9C,OAAOa,KAAKC,MAAML,EAAeG,CAAY,EAAIA,CACnD,CAEO,SAASG,EAAUC,EAAqB,CAC7C,OAAOH,KAAKI,MAAMD,EAAM,EAAG,EAAI,EACjC,CAEO,SAASE,EAAeF,EAAaG,EAAM,GAAY,CAC5D,OAAIH,EAAMG,EACD,GAAGA,CAAG,IAENH,EAAII,SAAAA,CAEf"}