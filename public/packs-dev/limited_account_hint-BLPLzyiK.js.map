{"version":3,"file":"limited_account_hint-BLPLzyiK.js","sources":["../../app/javascript/mastodon/components/column_back_button.tsx","../../app/javascript/material-icons/400-24px/share.svg?react","../../app/javascript/material-icons/400-24px/smart_toy.svg?react","../../app/javascript/mastodon/components/badge.jsx","../../app/javascript/mastodon/components/copy_icon_button.tsx","../../app/javascript/mastodon/features/account/components/account_note.tsx","../../app/javascript/material-icons/400-24px/badge.svg?react","../../app/javascript/material-icons/400-24px/globe.svg?react","../../app/javascript/mastodon/features/account/components/domain_pill.tsx","../../app/javascript/mastodon/features/account/components/follow_request_note.jsx","../../app/javascript/mastodon/features/account/containers/follow_request_note_container.js","../../app/javascript/mastodon/features/account_timeline/components/familiar_followers.tsx","../../app/javascript/mastodon/features/account_timeline/components/memorial_note.tsx","../../app/javascript/mastodon/features/account_timeline/components/moved_note.tsx","../../app/javascript/mastodon/features/account_timeline/components/account_header.tsx","../../app/javascript/mastodon/features/account_timeline/components/limited_account_hint.tsx"],"sourcesContent":["import { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport ArrowBackIcon from '@/material-icons/400-24px/arrow_back.svg?react';\nimport { Icon } from 'mastodon/components/icon';\nimport { ButtonInTabsBar } from 'mastodon/features/ui/util/columns_context';\n\nimport { useAppHistory } from './router';\n\ntype OnClickCallback = () => void;\n\nfunction useHandleClick(onClick?: OnClickCallback) {\n  const history = useAppHistory();\n\n  return useCallback(() => {\n    if (onClick) {\n      onClick();\n    } else if (history.location.state?.fromMastodon) {\n      history.goBack();\n    } else {\n      history.push('/');\n    }\n  }, [history, onClick]);\n}\n\nexport const ColumnBackButton: React.FC<{ onClick?: OnClickCallback }> = ({\n  onClick,\n}) => {\n  const handleClick = useHandleClick(onClick);\n\n  const component = (\n    <button onClick={handleClick} className='column-back-button'>\n      <Icon\n        id='chevron-left'\n        icon={ArrowBackIcon}\n        className='column-back-button__icon'\n      />\n      <FormattedMessage id='column_back_button.label' defaultMessage='Back' />\n    </button>\n  );\n\n  return <ButtonInTabsBar>{component}</ButtonInTabsBar>;\n};\n","import * as React from \"react\";\nconst SvgShare = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M680-80q-50 0-85-35t-35-85q0-6 3-28L282-392q-16 15-37 23.5t-45 8.5q-50 0-85-35t-35-85q0-50 35-85t85-35q24 0 45 8.5t37 23.5l281-164q-2-7-2.5-13.5T560-760q0-50 35-85t85-35q50 0 85 35t35 85q0 50-35 85t-85 35q-24 0-45-8.5T598-672L317-508q2 7 2.5 13.5t.5 14.5q0 8-.5 14.5T317-452l281 164q16-15 37-23.5t45-8.5q50 0 85 35t35 85q0 50-35 85t-85 35Zm0-80q17 0 28.5-11.5T720-200q0-17-11.5-28.5T680-240q-17 0-28.5 11.5T640-200q0 17 11.5 28.5T680-160ZM200-440q17 0 28.5-11.5T240-480q0-17-11.5-28.5T200-520q-17 0-28.5 11.5T160-480q0 17 11.5 28.5T200-440Zm480-280q17 0 28.5-11.5T720-760q0-17-11.5-28.5T680-800q-17 0-28.5 11.5T640-760q0 17 11.5 28.5T680-720Zm0 520ZM200-480Zm480-280Z\" }));\nexport default SvgShare;\n","import * as React from \"react\";\nconst SvgSmartToy = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M160-360q-50 0-85-35t-35-85q0-50 35-85t85-35v-80q0-33 23.5-56.5T240-760h120q0-50 35-85t85-35q50 0 85 35t35 85h120q33 0 56.5 23.5T800-680v80q50 0 85 35t35 85q0 50-35 85t-85 35v160q0 33-23.5 56.5T720-120H240q-33 0-56.5-23.5T160-200v-160Zm200-80q25 0 42.5-17.5T420-500q0-25-17.5-42.5T360-560q-25 0-42.5 17.5T300-500q0 25 17.5 42.5T360-440Zm240 0q25 0 42.5-17.5T660-500q0-25-17.5-42.5T600-560q-25 0-42.5 17.5T540-500q0 25 17.5 42.5T600-440ZM320-280h320v-80H320v80Zm-80 80h480v-480H240v480Zm240-240Z\" }));\nexport default SvgSmartToy;\n","import PropTypes from 'prop-types';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport GroupsIcon from '@/material-icons/400-24px/group.svg?react';\nimport PersonIcon from '@/material-icons/400-24px/person.svg?react';\nimport SmartToyIcon from '@/material-icons/400-24px/smart_toy.svg?react';\n\n\nexport const Badge = ({ icon = <PersonIcon />, label, domain, roleId }) => (\n  <div className='account-role' data-account-role-id={roleId}>\n    {icon}\n    {label}\n    {domain && <span className='account-role__domain'>{domain}</span>}\n  </div>\n);\n\nBadge.propTypes = {\n  icon: PropTypes.node,\n  label: PropTypes.node,\n  domain: PropTypes.node,\n  roleId: PropTypes.string\n};\n\nexport const GroupBadge = () => (\n  <Badge icon={<GroupsIcon />} label={<FormattedMessage id='account.badges.group' defaultMessage='Group' />} />\n);\n\nexport const AutomatedBadge = () => (\n  <Badge icon={<SmartToyIcon />} label={<FormattedMessage id='account.badges.bot' defaultMessage='Automated' />} />\n);\n","import { useState, useCallback } from 'react';\n\nimport { defineMessages } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport ContentCopyIcon from '@/material-icons/400-24px/content_copy.svg?react';\nimport { showAlert } from 'mastodon/actions/alerts';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { useAppDispatch } from 'mastodon/store';\n\nconst messages = defineMessages({\n  copied: {\n    id: 'copy_icon_button.copied',\n    defaultMessage: 'Copied to clipboard',\n  },\n});\n\nexport const CopyIconButton: React.FC<{\n  title: string;\n  value: string;\n  className: string;\n}> = ({ title, value, className }) => {\n  const [copied, setCopied] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const handleClick = useCallback(() => {\n    void navigator.clipboard.writeText(value);\n    setCopied(true);\n    dispatch(showAlert({ message: messages.copied }));\n    setTimeout(() => {\n      setCopied(false);\n    }, 700);\n  }, [setCopied, value, dispatch]);\n\n  return (\n    <IconButton\n      className={classNames(className, copied ? 'copied' : 'copyable')}\n      title={title}\n      onClick={handleClick}\n      icon=''\n      iconComponent={ContentCopyIcon}\n    />\n  );\n};\n","import type { ChangeEventHandler, KeyboardEventHandler } from 'react';\nimport { useState, useRef, useCallback, useId } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport Textarea from 'react-textarea-autosize';\n\nimport { submitAccountNote } from '@/mastodon/actions/account_notes';\nimport { LoadingIndicator } from '@/mastodon/components/loading_indicator';\nimport { useAppDispatch, useAppSelector } from '@/mastodon/store';\n\nconst messages = defineMessages({\n  placeholder: {\n    id: 'account_note.placeholder',\n    defaultMessage: 'Click to add a note',\n  },\n});\n\nconst AccountNoteUI: React.FC<{\n  initialValue: string | undefined;\n  onSubmit: (newNote: string) => void;\n  wasSaved: boolean;\n}> = ({ initialValue, onSubmit, wasSaved }) => {\n  const intl = useIntl();\n  const uniqueId = useId();\n  const [value, setValue] = useState(initialValue ?? '');\n  const isLoading = initialValue === undefined;\n  const canSubmitOnBlurRef = useRef(true);\n\n  const handleChange = useCallback<ChangeEventHandler<HTMLTextAreaElement>>(\n    (e) => {\n      setValue(e.target.value);\n    },\n    [],\n  );\n\n  const handleKeyDown = useCallback<KeyboardEventHandler<HTMLTextAreaElement>>(\n    (e) => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n\n        setValue(initialValue ?? '');\n\n        canSubmitOnBlurRef.current = false;\n        e.currentTarget.blur();\n      } else if (e.key === 'Enter' && (e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n\n        onSubmit(value);\n\n        canSubmitOnBlurRef.current = false;\n        e.currentTarget.blur();\n      }\n    },\n    [initialValue, onSubmit, value],\n  );\n\n  const handleBlur = useCallback(() => {\n    if (initialValue !== value && canSubmitOnBlurRef.current) {\n      onSubmit(value);\n    }\n    canSubmitOnBlurRef.current = true;\n  }, [initialValue, onSubmit, value]);\n\n  return (\n    <div className='account__header__account-note'>\n      <label htmlFor={`account-note-${uniqueId}`}>\n        <FormattedMessage\n          id='account.account_note_header'\n          defaultMessage='Personal note'\n        />{' '}\n        <span\n          aria-live='polite'\n          role='status'\n          className='inline-alert'\n          style={{ opacity: wasSaved ? 1 : 0 }}\n        >\n          {wasSaved && (\n            <FormattedMessage id='generic.saved' defaultMessage='Saved' />\n          )}\n        </span>\n      </label>\n      {isLoading ? (\n        <div className='account__header__account-note__loading-indicator-wrapper'>\n          <LoadingIndicator />\n        </div>\n      ) : (\n        <Textarea\n          id={`account-note-${uniqueId}`}\n          className='account__header__account-note__content'\n          placeholder={intl.formatMessage(messages.placeholder)}\n          value={value}\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          onBlur={handleBlur}\n        />\n      )}\n    </div>\n  );\n};\n\nexport const AccountNote: React.FC<{\n  accountId: string;\n}> = ({ accountId }) => {\n  const dispatch = useAppDispatch();\n  const initialValue = useAppSelector((state) =>\n    state.relationships.get(accountId)?.get('note'),\n  );\n  const [wasSaved, setWasSaved] = useState(false);\n\n  const handleSubmit = useCallback(\n    (note: string) => {\n      setWasSaved(true);\n      void dispatch(submitAccountNote({ accountId, note }));\n\n      setTimeout(() => {\n        setWasSaved(false);\n      }, 2000);\n    },\n    [dispatch, accountId],\n  );\n\n  return (\n    <AccountNoteUI\n      key={`${accountId}-${initialValue}`}\n      initialValue={initialValue}\n      wasSaved={wasSaved}\n      onSubmit={handleSubmit}\n    />\n  );\n};\n","import * as React from \"react\";\nconst SvgBadge = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M160-80q-33 0-56.5-23.5T80-160v-440q0-33 23.5-56.5T160-680h200v-120q0-33 23.5-56.5T440-880h80q33 0 56.5 23.5T600-800v120h200q33 0 56.5 23.5T880-600v440q0 33-23.5 56.5T800-80H160Zm0-80h640v-440H600q0 33-23.5 56.5T520-520h-80q-33 0-56.5-23.5T360-600H160v440Zm80-80h240v-18q0-17-9.5-31.5T444-312q-20-9-40.5-13.5T360-330q-23 0-43.5 4.5T276-312q-17 8-26.5 22.5T240-258v18Zm320-60h160v-60H560v60Zm-200-60q25 0 42.5-17.5T420-420q0-25-17.5-42.5T360-480q-25 0-42.5 17.5T300-420q0 25 17.5 42.5T360-360Zm200-60h160v-60H560v60ZM440-600h80v-200h-80v200Zm40 220Z\" }));\nexport default SvgBadge;\n","import * as React from \"react\";\nconst SvgGlobe = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-7-.5-14.5T799-507q-5 29-27 48t-52 19h-80q-33 0-56.5-23.5T560-520v-40H400v-80q0-33 23.5-56.5T480-720h40q0-23 12.5-40.5T563-789q-20-5-40.5-8t-42.5-3q-134 0-227 93t-93 227h200q66 0 113 47t47 113v40H400v110q20 5 39.5 7.5T480-160Z\" }));\nexport default SvgGlobe;\n","import { useState, useRef, useCallback, useId } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport Overlay from 'react-overlays/Overlay';\n\nimport AlternateEmailIcon from '@/material-icons/400-24px/alternate_email.svg?react';\nimport BadgeIcon from '@/material-icons/400-24px/badge.svg?react';\nimport GlobeIcon from '@/material-icons/400-24px/globe.svg?react';\nimport { Icon } from 'mastodon/components/icon';\n\nexport const DomainPill: React.FC<{\n  domain: string;\n  username: string;\n  isSelf: boolean;\n}> = ({ domain, username, isSelf }) => {\n  const accessibilityId = useId();\n  const [open, setOpen] = useState(false);\n  const [expanded, setExpanded] = useState(false);\n  const triggerRef = useRef(null);\n\n  const handleClick = useCallback(() => {\n    setOpen(!open);\n  }, [open, setOpen]);\n\n  const handleExpandClick = useCallback(() => {\n    setExpanded(!expanded);\n  }, [expanded, setExpanded]);\n\n  return (\n    <>\n      <button\n        className={classNames('account__domain-pill', { active: open })}\n        ref={triggerRef}\n        onClick={handleClick}\n        aria-expanded={open}\n        aria-controls={accessibilityId}\n      >\n        {domain}\n      </button>\n\n      <Overlay\n        show={open}\n        rootClose\n        onHide={handleClick}\n        offset={[5, 5]}\n        target={triggerRef}\n      >\n        {({ props }) => (\n          <div\n            {...props}\n            role='region'\n            id={accessibilityId}\n            className='account__domain-pill__popout dropdown-animation'\n          >\n            <div className='account__domain-pill__popout__header'>\n              <div className='account__domain-pill__popout__header__icon'>\n                <Icon id='' icon={BadgeIcon} />\n              </div>\n              <h3>\n                <FormattedMessage\n                  id='domain_pill.whats_in_a_handle'\n                  defaultMessage=\"What's in a handle?\"\n                />\n              </h3>\n            </div>\n\n            <div className='account__domain-pill__popout__handle'>\n              <div className='account__domain-pill__popout__handle__label'>\n                {isSelf ? (\n                  <FormattedMessage\n                    id='domain_pill.your_handle'\n                    defaultMessage='Your handle:'\n                  />\n                ) : (\n                  <FormattedMessage\n                    id='domain_pill.their_handle'\n                    defaultMessage='Their handle:'\n                  />\n                )}\n              </div>\n              <div className='account__domain-pill__popout__handle__handle'>\n                @{username}@{domain}\n              </div>\n            </div>\n\n            <div className='account__domain-pill__popout__parts'>\n              <div>\n                <div className='account__domain-pill__popout__parts__icon'>\n                  <Icon id='' icon={AlternateEmailIcon} />\n                </div>\n\n                <div>\n                  <h6>\n                    <FormattedMessage\n                      id='domain_pill.username'\n                      defaultMessage='Username'\n                    />\n                  </h6>\n                  <p>\n                    {isSelf ? (\n                      <FormattedMessage\n                        id='domain_pill.your_username'\n                        defaultMessage='Your unique identifier on this server. It’s possible to find users with the same username on different servers.'\n                      />\n                    ) : (\n                      <FormattedMessage\n                        id='domain_pill.their_username'\n                        defaultMessage='Their unique identifier on their server. It’s possible to find users with the same username on different servers.'\n                      />\n                    )}\n                  </p>\n                </div>\n              </div>\n\n              <div>\n                <div className='account__domain-pill__popout__parts__icon'>\n                  <Icon id='' icon={GlobeIcon} />\n                </div>\n\n                <div>\n                  <h6>\n                    <FormattedMessage\n                      id='domain_pill.server'\n                      defaultMessage='Server'\n                    />\n                  </h6>\n                  <p>\n                    {isSelf ? (\n                      <FormattedMessage\n                        id='domain_pill.your_server'\n                        defaultMessage='Your digital home, where all of your posts live. Don’t like this one? Transfer servers at any time and bring your followers, too.'\n                      />\n                    ) : (\n                      <FormattedMessage\n                        id='domain_pill.their_server'\n                        defaultMessage='Their digital home, where all of their posts live.'\n                      />\n                    )}\n                  </p>\n                </div>\n              </div>\n            </div>\n\n            <p>\n              {isSelf ? (\n                <FormattedMessage\n                  id='domain_pill.who_you_are'\n                  defaultMessage='Because your handle says who you are and where you are, people can interact with you across the social web of <button>ActivityPub-powered platforms</button>.'\n                  values={{\n                    button: (x) => (\n                      <button\n                        onClick={handleExpandClick}\n                        className='link-button'\n                      >\n                        {x}\n                      </button>\n                    ),\n                  }}\n                />\n              ) : (\n                <FormattedMessage\n                  id='domain_pill.who_they_are'\n                  defaultMessage='Since handles say who someone is and where they are, you can interact with people across the social web of <button>ActivityPub-powered platforms</button>.'\n                  values={{\n                    button: (x) => (\n                      <button\n                        onClick={handleExpandClick}\n                        className='link-button'\n                      >\n                        {x}\n                      </button>\n                    ),\n                  }}\n                />\n              )}\n            </p>\n\n            {expanded && (\n              <>\n                <p>\n                  <FormattedMessage\n                    id='domain_pill.activitypub_like_language'\n                    defaultMessage='ActivityPub is like the language Mastodon speaks with other social networks.'\n                  />\n                </p>\n                <p>\n                  <FormattedMessage\n                    id='domain_pill.activitypub_lets_connect'\n                    defaultMessage='It lets you connect and interact with people not just on Mastodon, but across different social apps too.'\n                  />\n                </p>\n              </>\n            )}\n          </div>\n        )}\n      </Overlay>\n    </>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport ImmutablePureComponent from 'react-immutable-pure-component';\n\nimport CheckIcon from '@/material-icons/400-24px/check.svg?react';\nimport CloseIcon from '@/material-icons/400-24px/close.svg?react';\nimport { Icon }  from 'mastodon/components/icon';\n\nexport default class FollowRequestNote extends ImmutablePureComponent {\n\n  static propTypes = {\n    account: ImmutablePropTypes.record.isRequired,\n  };\n\n  render () {\n    const { account, onAuthorize, onReject } = this.props;\n\n    return (\n      <div className='follow-request-banner'>\n        <div className='follow-request-banner__message'>\n          <FormattedMessage id='account.requested_follow' defaultMessage='{name} has requested to follow you' values={{ name: <bdi><strong dangerouslySetInnerHTML={{ __html: account.get('display_name_html') }} /></bdi> }} />\n        </div>\n\n        <div className='follow-request-banner__action'>\n          <button type='button' className='button button-tertiary button--confirmation' onClick={onAuthorize}>\n            <Icon id='check' icon={CheckIcon} />\n            <FormattedMessage id='follow_request.authorize' defaultMessage='Authorize' />\n          </button>\n\n          <button type='button' className='button button-tertiary button--destructive' onClick={onReject}>\n            <Icon id='times' icon={CloseIcon} />\n            <FormattedMessage id='follow_request.reject' defaultMessage='Reject' />\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n}\n","import { connect } from 'react-redux';\n\nimport { authorizeFollowRequest, rejectFollowRequest } from 'mastodon/actions/accounts';\n\nimport FollowRequestNote from '../components/follow_request_note';\n\nconst mapDispatchToProps = (dispatch, { account }) => ({\n  onAuthorize () {\n    dispatch(authorizeFollowRequest(account.get('id')));\n  },\n\n  onReject () {\n    dispatch(rejectFollowRequest(account.get('id')));\n  },\n});\n\nexport default connect(null, mapDispatchToProps)(FollowRequestNote);\n","import { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport { Avatar } from '@/mastodon/components/avatar';\nimport { AvatarGroup } from '@/mastodon/components/avatar_group';\nimport type { Account } from '@/mastodon/models/account';\n\nimport { useFetchFamiliarFollowers } from '../hooks/familiar_followers';\n\nconst AccountLink: React.FC<{ account?: Account }> = ({ account }) => {\n  if (!account) {\n    return null;\n  }\n\n  return (\n    <Link\n      to={`/@${account.acct}`}\n      data-hover-card-account={account.id}\n      dangerouslySetInnerHTML={{ __html: account.display_name_html }}\n    />\n  );\n};\n\nconst FamiliarFollowersReadout: React.FC<{ familiarFollowers: Account[] }> = ({\n  familiarFollowers,\n}) => {\n  const messageData = {\n    name1: <AccountLink account={familiarFollowers.at(0)} />,\n    name2: <AccountLink account={familiarFollowers.at(1)} />,\n    othersCount: familiarFollowers.length - 2,\n  };\n\n  if (familiarFollowers.length === 1) {\n    return (\n      <FormattedMessage\n        id='account.familiar_followers_one'\n        defaultMessage='Followed by {name1}'\n        values={messageData}\n      />\n    );\n  } else if (familiarFollowers.length === 2) {\n    return (\n      <FormattedMessage\n        id='account.familiar_followers_two'\n        defaultMessage='Followed by {name1} and {name2}'\n        values={messageData}\n      />\n    );\n  } else {\n    return (\n      <FormattedMessage\n        id='account.familiar_followers_many'\n        defaultMessage='Followed by {name1}, {name2}, and {othersCount, plural, one {one other you know} other {# others you know}}'\n        values={messageData}\n      />\n    );\n  }\n};\n\nexport const FamiliarFollowers: React.FC<{ accountId: string }> = ({\n  accountId,\n}) => {\n  const { familiarFollowers, isLoading } = useFetchFamiliarFollowers({\n    accountId,\n  });\n\n  if (isLoading || familiarFollowers.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className='account__header__familiar-followers'>\n      <AvatarGroup compact>\n        {familiarFollowers.slice(0, 3).map((account) => (\n          <Avatar withLink key={account.id} account={account} size={28} />\n        ))}\n      </AvatarGroup>\n      <FamiliarFollowersReadout familiarFollowers={familiarFollowers} />\n    </div>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nexport const MemorialNote: React.FC = () => (\n  <div className='account-memorial-banner'>\n    <div className='account-memorial-banner__message'>\n      <FormattedMessage\n        id='account.in_memoriam'\n        defaultMessage='In Memoriam.'\n      />\n    </div>\n  </div>\n);\n","import { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport { AvatarOverlay } from 'mastodon/components/avatar_overlay';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { useAppSelector } from 'mastodon/store';\n\nexport const MovedNote: React.FC<{\n  accountId: string;\n  targetAccountId: string;\n}> = ({ accountId, targetAccountId }) => {\n  const from = useAppSelector((state) => state.accounts.get(accountId));\n  const to = useAppSelector((state) => state.accounts.get(targetAccountId));\n\n  return (\n    <div className='moved-account-banner'>\n      <div className='moved-account-banner__message'>\n        <FormattedMessage\n          id='account.moved_to'\n          defaultMessage='{name} has indicated that their new account is now:'\n          values={{\n            name: (\n              <bdi>\n                <strong\n                  dangerouslySetInnerHTML={{\n                    __html: from?.display_name_html ?? '',\n                  }}\n                />\n              </bdi>\n            ),\n          }}\n        />\n      </div>\n\n      <div className='moved-account-banner__action'>\n        <Link to={`/@${to?.acct}`} className='detailed-status__display-name'>\n          <div className='detailed-status__display-avatar'>\n            <AvatarOverlay account={to} friend={from} />\n          </div>\n          <DisplayName account={to} />\n        </Link>\n\n        <Link to={`/@${to?.acct}`} className='button'>\n          <FormattedMessage\n            id='account.go_to_profile'\n            defaultMessage='Go to profile'\n          />\n        </Link>\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useMemo } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Helmet } from 'react-helmet';\nimport { NavLink } from 'react-router-dom';\n\nimport CheckIcon from '@/material-icons/400-24px/check.svg?react';\nimport LockIcon from '@/material-icons/400-24px/lock.svg?react';\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport NotificationsIcon from '@/material-icons/400-24px/notifications.svg?react';\nimport NotificationsActiveIcon from '@/material-icons/400-24px/notifications_active-fill.svg?react';\nimport ShareIcon from '@/material-icons/400-24px/share.svg?react';\nimport {\n  followAccount,\n  unblockAccount,\n  unmuteAccount,\n  pinAccount,\n  unpinAccount,\n  removeAccountFromFollowers,\n} from 'mastodon/actions/accounts';\nimport { initBlockModal } from 'mastodon/actions/blocks';\nimport { mentionCompose, directCompose } from 'mastodon/actions/compose';\nimport {\n  initDomainBlockModal,\n  unblockDomain,\n} from 'mastodon/actions/domain_blocks';\nimport { openModal } from 'mastodon/actions/modal';\nimport { initMuteModal } from 'mastodon/actions/mutes';\nimport { initReport } from 'mastodon/actions/reports';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { Badge, AutomatedBadge, GroupBadge } from 'mastodon/components/badge';\nimport { Button } from 'mastodon/components/button';\nimport { CopyIconButton } from 'mastodon/components/copy_icon_button';\nimport {\n  FollowersCounter,\n  FollowingCounter,\n  StatusesCounter,\n} from 'mastodon/components/counters';\nimport { Dropdown } from 'mastodon/components/dropdown_menu';\nimport { FollowButton } from 'mastodon/components/follow_button';\nimport { FormattedDateWrapper } from 'mastodon/components/formatted_date';\nimport { Icon } from 'mastodon/components/icon';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { AccountNote } from 'mastodon/features/account/components/account_note';\nimport { DomainPill } from 'mastodon/features/account/components/domain_pill';\nimport FollowRequestNoteContainer from 'mastodon/features/account/containers/follow_request_note_container';\nimport { useLinks } from 'mastodon/hooks/useLinks';\nimport { useIdentity } from 'mastodon/identity_context';\nimport { autoPlayGif, me, domain as localDomain } from 'mastodon/initial_state';\nimport type { Account } from 'mastodon/models/account';\nimport type { MenuItem } from 'mastodon/models/dropdown_menu';\nimport {\n  PERMISSION_MANAGE_USERS,\n  PERMISSION_MANAGE_FEDERATION,\n} from 'mastodon/permissions';\nimport { getAccountHidden } from 'mastodon/selectors/accounts';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { FamiliarFollowers } from './familiar_followers';\nimport { MemorialNote } from './memorial_note';\nimport { MovedNote } from './moved_note';\n\nconst messages = defineMessages({\n  unblock: { id: 'account.unblock', defaultMessage: 'Unblock @{name}' },\n  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n  linkVerifiedOn: {\n    id: 'account.link_verified_on',\n    defaultMessage: 'Ownership of this link was checked on {date}',\n  },\n  account_locked: {\n    id: 'account.locked_info',\n    defaultMessage:\n      'This account privacy status is set to locked. The owner manually reviews who can follow them.',\n  },\n  mention: { id: 'account.mention', defaultMessage: 'Mention @{name}' },\n  direct: { id: 'account.direct', defaultMessage: 'Privately mention @{name}' },\n  unmute: { id: 'account.unmute', defaultMessage: 'Unmute @{name}' },\n  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n  report: { id: 'account.report', defaultMessage: 'Report @{name}' },\n  share: { id: 'account.share', defaultMessage: \"Share @{name}'s profile\" },\n  copy: { id: 'account.copy', defaultMessage: 'Copy link to profile' },\n  media: { id: 'account.media', defaultMessage: 'Media' },\n  blockDomain: {\n    id: 'account.block_domain',\n    defaultMessage: 'Block domain {domain}',\n  },\n  unblockDomain: {\n    id: 'account.unblock_domain',\n    defaultMessage: 'Unblock domain {domain}',\n  },\n  hideReblogs: {\n    id: 'account.hide_reblogs',\n    defaultMessage: 'Hide boosts from @{name}',\n  },\n  showReblogs: {\n    id: 'account.show_reblogs',\n    defaultMessage: 'Show boosts from @{name}',\n  },\n  enableNotifications: {\n    id: 'account.enable_notifications',\n    defaultMessage: 'Notify me when @{name} posts',\n  },\n  disableNotifications: {\n    id: 'account.disable_notifications',\n    defaultMessage: 'Stop notifying me when @{name} posts',\n  },\n  preferences: {\n    id: 'navigation_bar.preferences',\n    defaultMessage: 'Preferences',\n  },\n  follow_requests: {\n    id: 'navigation_bar.follow_requests',\n    defaultMessage: 'Follow requests',\n  },\n  favourites: { id: 'navigation_bar.favourites', defaultMessage: 'Favorites' },\n  lists: { id: 'navigation_bar.lists', defaultMessage: 'Lists' },\n  followed_tags: {\n    id: 'navigation_bar.followed_tags',\n    defaultMessage: 'Followed hashtags',\n  },\n  blocks: { id: 'navigation_bar.blocks', defaultMessage: 'Blocked users' },\n  domain_blocks: {\n    id: 'navigation_bar.domain_blocks',\n    defaultMessage: 'Blocked domains',\n  },\n  mutes: { id: 'navigation_bar.mutes', defaultMessage: 'Muted users' },\n  endorse: { id: 'account.endorse', defaultMessage: 'Feature on profile' },\n  unendorse: {\n    id: 'account.unendorse',\n    defaultMessage: \"Don't feature on profile\",\n  },\n  add_or_remove_from_list: {\n    id: 'account.add_or_remove_from_list',\n    defaultMessage: 'Add or Remove from lists',\n  },\n  admin_account: {\n    id: 'status.admin_account',\n    defaultMessage: 'Open moderation interface for @{name}',\n  },\n  admin_domain: {\n    id: 'status.admin_domain',\n    defaultMessage: 'Open moderation interface for {domain}',\n  },\n  languages: {\n    id: 'account.languages',\n    defaultMessage: 'Change subscribed languages',\n  },\n  openOriginalPage: {\n    id: 'account.open_original_page',\n    defaultMessage: 'Open original page',\n  },\n  removeFromFollowers: {\n    id: 'account.remove_from_followers',\n    defaultMessage: 'Remove {name} from followers',\n  },\n  confirmRemoveFromFollowersTitle: {\n    id: 'confirmations.remove_from_followers.title',\n    defaultMessage: 'Remove follower?',\n  },\n  confirmRemoveFromFollowersMessage: {\n    id: 'confirmations.remove_from_followers.message',\n    defaultMessage:\n      '{name} will stop following you. Are you sure you want to proceed?',\n  },\n  confirmRemoveFromFollowersButton: {\n    id: 'confirmations.remove_from_followers.confirm',\n    defaultMessage: 'Remove follower',\n  },\n});\n\nconst titleFromAccount = (account: Account) => {\n  const displayName = account.display_name;\n  const acct =\n    account.acct === account.username\n      ? `${account.username}@${localDomain}`\n      : account.acct;\n  const prefix =\n    displayName.trim().length === 0 ? account.username : displayName;\n\n  return `${prefix} (@${acct})`;\n};\n\nconst dateFormatOptions: Intl.DateTimeFormatOptions = {\n  month: 'short',\n  day: 'numeric',\n  year: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit',\n};\n\nexport const AccountHeader: React.FC<{\n  accountId: string;\n  hideTabs?: boolean;\n}> = ({ accountId, hideTabs }) => {\n  const dispatch = useAppDispatch();\n  const intl = useIntl();\n  const { signedIn, permissions } = useIdentity();\n  const account = useAppSelector((state) => state.accounts.get(accountId));\n  const relationship = useAppSelector((state) =>\n    state.relationships.get(accountId),\n  );\n  const hidden = useAppSelector((state) => getAccountHidden(state, accountId));\n  const handleLinkClick = useLinks();\n\n  const handleBlock = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    if (relationship?.blocking) {\n      dispatch(unblockAccount(account.id));\n    } else {\n      dispatch(initBlockModal(account));\n    }\n  }, [dispatch, account, relationship]);\n\n  const handleMention = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(mentionCompose(account));\n  }, [dispatch, account]);\n\n  const handleDirect = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(directCompose(account));\n  }, [dispatch, account]);\n\n  const handleReport = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(initReport(account));\n  }, [dispatch, account]);\n\n  const handleReblogToggle = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    if (relationship?.showing_reblogs) {\n      dispatch(followAccount(account.id, { reblogs: false }));\n    } else {\n      dispatch(followAccount(account.id, { reblogs: true }));\n    }\n  }, [dispatch, account, relationship]);\n\n  const handleNotifyToggle = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    if (relationship?.notifying) {\n      dispatch(followAccount(account.id, { notify: false }));\n    } else {\n      dispatch(followAccount(account.id, { notify: true }));\n    }\n  }, [dispatch, account, relationship]);\n\n  const handleMute = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    if (relationship?.muting) {\n      dispatch(unmuteAccount(account.id));\n    } else {\n      dispatch(initMuteModal(account));\n    }\n  }, [dispatch, account, relationship]);\n\n  const handleBlockDomain = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(initDomainBlockModal(account));\n  }, [dispatch, account]);\n\n  const handleUnblockDomain = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    const domain = account.acct.split('@')[1];\n\n    if (!domain) {\n      return;\n    }\n\n    dispatch(unblockDomain(domain));\n  }, [dispatch, account]);\n\n  const handleEndorseToggle = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    if (relationship?.endorsed) {\n      dispatch(unpinAccount(account.id));\n    } else {\n      dispatch(pinAccount(account.id));\n    }\n  }, [dispatch, account, relationship]);\n\n  const handleAddToList = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(\n      openModal({\n        modalType: 'LIST_ADDER',\n        modalProps: {\n          accountId: account.id,\n        },\n      }),\n    );\n  }, [dispatch, account]);\n\n  const handleChangeLanguages = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    dispatch(\n      openModal({\n        modalType: 'SUBSCRIBED_LANGUAGES',\n        modalProps: {\n          accountId: account.id,\n        },\n      }),\n    );\n  }, [dispatch, account]);\n\n  const handleOpenAvatar = useCallback(\n    (e: React.MouseEvent) => {\n      if (e.button !== 0 || e.ctrlKey || e.metaKey) {\n        return;\n      }\n\n      e.preventDefault();\n\n      if (!account) {\n        return;\n      }\n\n      dispatch(\n        openModal({\n          modalType: 'IMAGE',\n          modalProps: {\n            src: account.avatar,\n            alt: '',\n          },\n        }),\n      );\n    },\n    [dispatch, account],\n  );\n\n  const handleShare = useCallback(() => {\n    if (!account) {\n      return;\n    }\n\n    void navigator.share({\n      url: account.url,\n    });\n  }, [account]);\n\n  const handleMouseEnter = useCallback(\n    ({ currentTarget }: React.MouseEvent) => {\n      if (autoPlayGif) {\n        return;\n      }\n\n      currentTarget\n        .querySelectorAll<HTMLImageElement>('.custom-emoji')\n        .forEach((emoji) => {\n          emoji.src = emoji.getAttribute('data-original') ?? '';\n        });\n    },\n    [],\n  );\n\n  const handleMouseLeave = useCallback(\n    ({ currentTarget }: React.MouseEvent) => {\n      if (autoPlayGif) {\n        return;\n      }\n\n      currentTarget\n        .querySelectorAll<HTMLImageElement>('.custom-emoji')\n        .forEach((emoji) => {\n          emoji.src = emoji.getAttribute('data-static') ?? '';\n        });\n    },\n    [],\n  );\n\n  const suspended = account?.suspended;\n  const isRemote = account?.acct !== account?.username;\n  const remoteDomain = isRemote ? account?.acct.split('@')[1] : null;\n\n  const menu = useMemo(() => {\n    const arr: MenuItem[] = [];\n\n    if (!account) {\n      return arr;\n    }\n\n    if (signedIn && !account.suspended) {\n      arr.push({\n        text: intl.formatMessage(messages.mention, {\n          name: account.username,\n        }),\n        action: handleMention,\n      });\n      arr.push({\n        text: intl.formatMessage(messages.direct, {\n          name: account.username,\n        }),\n        action: handleDirect,\n      });\n      arr.push(null);\n    }\n\n    if (isRemote) {\n      arr.push({\n        text: intl.formatMessage(messages.openOriginalPage),\n        href: account.url,\n      });\n      arr.push(null);\n    }\n\n    if (signedIn) {\n      if (relationship?.following) {\n        if (!relationship.muting) {\n          if (relationship.showing_reblogs) {\n            arr.push({\n              text: intl.formatMessage(messages.hideReblogs, {\n                name: account.username,\n              }),\n              action: handleReblogToggle,\n            });\n          } else {\n            arr.push({\n              text: intl.formatMessage(messages.showReblogs, {\n                name: account.username,\n              }),\n              action: handleReblogToggle,\n            });\n          }\n\n          arr.push({\n            text: intl.formatMessage(messages.languages),\n            action: handleChangeLanguages,\n          });\n          arr.push(null);\n        }\n\n        arr.push({\n          text: intl.formatMessage(\n            relationship.endorsed ? messages.unendorse : messages.endorse,\n          ),\n          action: handleEndorseToggle,\n        });\n        arr.push({\n          text: intl.formatMessage(messages.add_or_remove_from_list),\n          action: handleAddToList,\n        });\n        arr.push(null);\n      }\n\n      if (relationship?.followed_by) {\n        const handleRemoveFromFollowers = () => {\n          dispatch(\n            openModal({\n              modalType: 'CONFIRM',\n              modalProps: {\n                title: intl.formatMessage(\n                  messages.confirmRemoveFromFollowersTitle,\n                ),\n                message: intl.formatMessage(\n                  messages.confirmRemoveFromFollowersMessage,\n                  { name: <strong>{account.acct}</strong> },\n                ),\n                confirm: intl.formatMessage(\n                  messages.confirmRemoveFromFollowersButton,\n                ),\n                onConfirm: () => {\n                  void dispatch(removeAccountFromFollowers({ accountId }));\n                },\n              },\n            }),\n          );\n        };\n\n        arr.push({\n          text: intl.formatMessage(messages.removeFromFollowers, {\n            name: account.username,\n          }),\n          action: handleRemoveFromFollowers,\n          dangerous: true,\n        });\n      }\n\n      if (relationship?.muting) {\n        arr.push({\n          text: intl.formatMessage(messages.unmute, {\n            name: account.username,\n          }),\n          action: handleMute,\n        });\n      } else {\n        arr.push({\n          text: intl.formatMessage(messages.mute, {\n            name: account.username,\n          }),\n          action: handleMute,\n          dangerous: true,\n        });\n      }\n\n      if (relationship?.blocking) {\n        arr.push({\n          text: intl.formatMessage(messages.unblock, {\n            name: account.username,\n          }),\n          action: handleBlock,\n        });\n      } else {\n        arr.push({\n          text: intl.formatMessage(messages.block, {\n            name: account.username,\n          }),\n          action: handleBlock,\n          dangerous: true,\n        });\n      }\n\n      if (!account.suspended) {\n        arr.push({\n          text: intl.formatMessage(messages.report, {\n            name: account.username,\n          }),\n          action: handleReport,\n          dangerous: true,\n        });\n      }\n    }\n\n    if (signedIn && isRemote) {\n      arr.push(null);\n\n      if (relationship?.domain_blocking) {\n        arr.push({\n          text: intl.formatMessage(messages.unblockDomain, {\n            domain: remoteDomain,\n          }),\n          action: handleUnblockDomain,\n        });\n      } else {\n        arr.push({\n          text: intl.formatMessage(messages.blockDomain, {\n            domain: remoteDomain,\n          }),\n          action: handleBlockDomain,\n          dangerous: true,\n        });\n      }\n    }\n\n    if (\n      (permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS ||\n      (isRemote &&\n        (permissions & PERMISSION_MANAGE_FEDERATION) ===\n          PERMISSION_MANAGE_FEDERATION)\n    ) {\n      arr.push(null);\n      if ((permissions & PERMISSION_MANAGE_USERS) === PERMISSION_MANAGE_USERS) {\n        arr.push({\n          text: intl.formatMessage(messages.admin_account, {\n            name: account.username,\n          }),\n          href: `/admin/accounts/${account.id}`,\n        });\n      }\n      if (\n        isRemote &&\n        (permissions & PERMISSION_MANAGE_FEDERATION) ===\n          PERMISSION_MANAGE_FEDERATION\n      ) {\n        arr.push({\n          text: intl.formatMessage(messages.admin_domain, {\n            domain: remoteDomain,\n          }),\n          href: `/admin/instances/${remoteDomain}`,\n        });\n      }\n    }\n\n    return arr;\n  }, [\n    dispatch,\n    accountId,\n    account,\n    relationship,\n    permissions,\n    isRemote,\n    remoteDomain,\n    intl,\n    signedIn,\n    handleAddToList,\n    handleBlock,\n    handleBlockDomain,\n    handleChangeLanguages,\n    handleDirect,\n    handleEndorseToggle,\n    handleMention,\n    handleMute,\n    handleReblogToggle,\n    handleReport,\n    handleUnblockDomain,\n  ]);\n\n  if (!account) {\n    return null;\n  }\n\n  let actionBtn: React.ReactNode,\n    bellBtn: React.ReactNode,\n    lockedIcon: React.ReactNode,\n    shareBtn: React.ReactNode;\n\n  const info: React.ReactNode[] = [];\n\n  if (me !== account.id && relationship) {\n    if (\n      relationship.followed_by &&\n      (relationship.following || relationship.requested)\n    ) {\n      info.push(\n        <span key='mutual' className='relationship-tag'>\n          <FormattedMessage\n            id='account.mutual'\n            defaultMessage='You follow each other'\n          />\n        </span>,\n      );\n    } else if (relationship.followed_by) {\n      info.push(\n        <span key='followed_by' className='relationship-tag'>\n          <FormattedMessage\n            id='account.follows_you'\n            defaultMessage='Follows you'\n          />\n        </span>,\n      );\n    } else if (relationship.requested_by) {\n      info.push(\n        <span key='requested_by' className='relationship-tag'>\n          <FormattedMessage\n            id='account.requests_to_follow_you'\n            defaultMessage='Requests to follow you'\n          />\n        </span>,\n      );\n    }\n\n    if (relationship.blocking) {\n      info.push(\n        <span key='blocking' className='relationship-tag'>\n          <FormattedMessage id='account.blocking' defaultMessage='Blocking' />\n        </span>,\n      );\n    }\n\n    if (relationship.muting) {\n      info.push(\n        <span key='muting' className='relationship-tag'>\n          <FormattedMessage id='account.muting' defaultMessage='Muting' />\n        </span>,\n      );\n    }\n\n    if (relationship.domain_blocking) {\n      info.push(\n        <span key='domain_blocking' className='relationship-tag'>\n          <FormattedMessage\n            id='account.domain_blocking'\n            defaultMessage='Blocking domain'\n          />\n        </span>,\n      );\n    }\n  }\n\n  if (relationship?.requested || relationship?.following) {\n    bellBtn = (\n      <IconButton\n        icon={relationship.notifying ? 'bell' : 'bell-o'}\n        iconComponent={\n          relationship.notifying ? NotificationsActiveIcon : NotificationsIcon\n        }\n        active={relationship.notifying}\n        title={intl.formatMessage(\n          relationship.notifying\n            ? messages.disableNotifications\n            : messages.enableNotifications,\n          { name: account.username },\n        )}\n        onClick={handleNotifyToggle}\n      />\n    );\n  }\n\n  if ('share' in navigator) {\n    shareBtn = (\n      <IconButton\n        className='optional'\n        icon=''\n        iconComponent={ShareIcon}\n        title={intl.formatMessage(messages.share, {\n          name: account.username,\n        })}\n        onClick={handleShare}\n      />\n    );\n  } else {\n    shareBtn = (\n      <CopyIconButton\n        className='optional'\n        title={intl.formatMessage(messages.copy)}\n        value={account.url}\n      />\n    );\n  }\n\n  if (relationship?.blocking) {\n    actionBtn = (\n      <Button\n        text={intl.formatMessage(messages.unblock, {\n          name: account.username,\n        })}\n        onClick={handleBlock}\n      />\n    );\n  } else {\n    actionBtn = <FollowButton accountId={accountId} />;\n  }\n\n  if (account.moved && !relationship?.following) {\n    actionBtn = '';\n  }\n\n  if (account.locked) {\n    lockedIcon = (\n      <Icon\n        id='lock'\n        icon={LockIcon}\n        title={intl.formatMessage(messages.account_locked)}\n      />\n    );\n  }\n\n  const content = { __html: account.note_emojified };\n  const displayNameHtml = { __html: account.display_name_html };\n  const fields = account.fields;\n  const isLocal = !account.acct.includes('@');\n  const username = account.acct.split('@')[0];\n  const domain = isLocal ? localDomain : account.acct.split('@')[1];\n  const isIndexable = !account.noindex;\n\n  const badges = [];\n\n  if (account.bot) {\n    badges.push(<AutomatedBadge key='bot-badge' />);\n  } else if (account.group) {\n    badges.push(<GroupBadge key='group-badge' />);\n  }\n\n  account.roles.forEach((role) => {\n    badges.push(\n      <Badge\n        key={`role-badge-${role.get('id')}`}\n        label={<span>{role.get('name')}</span>}\n        domain={domain}\n        roleId={role.get('id')}\n      />,\n    );\n  });\n\n  return (\n    <div className='account-timeline__header'>\n      {!hidden && account.memorial && <MemorialNote />}\n      {!hidden && account.moved && (\n        <MovedNote accountId={account.id} targetAccountId={account.moved} />\n      )}\n\n      <div\n        className={classNames('account__header', {\n          inactive: !!account.moved,\n        })}\n        onMouseEnter={handleMouseEnter}\n        onMouseLeave={handleMouseLeave}\n      >\n        {!(suspended || hidden || account.moved) &&\n          relationship?.requested_by && (\n            <FollowRequestNoteContainer account={account} />\n          )}\n\n        <div className='account__header__image'>\n          <div className='account__header__info'>{info}</div>\n\n          {!(suspended || hidden) && (\n            <img\n              src={autoPlayGif ? account.header : account.header_static}\n              alt=''\n              className='parallax'\n            />\n          )}\n        </div>\n\n        <div className='account__header__bar'>\n          <div className='account__header__tabs'>\n            <a\n              className='avatar'\n              href={account.avatar}\n              rel='noopener'\n              target='_blank'\n              onClick={handleOpenAvatar}\n            >\n              <Avatar\n                account={suspended || hidden ? undefined : account}\n                size={92}\n              />\n            </a>\n\n            <div className='account__header__tabs__buttons'>\n              {!hidden && bellBtn}\n              {!hidden && shareBtn}\n              {accountId !== me && (\n                <Dropdown\n                  disabled={menu.length === 0}\n                  items={menu}\n                  icon='ellipsis-v'\n                  iconComponent={MoreHorizIcon}\n                />\n              )}\n              {!hidden && actionBtn}\n            </div>\n          </div>\n\n          <div className='account__header__tabs__name'>\n            <h1>\n              <span dangerouslySetInnerHTML={displayNameHtml} />\n              <small>\n                <span>\n                  @{username}\n                  <span className='invisible'>@{domain}</span>\n                </span>\n                <DomainPill\n                  username={username ?? ''}\n                  domain={domain ?? ''}\n                  isSelf={me === account.id}\n                />\n                {lockedIcon}\n              </small>\n            </h1>\n          </div>\n\n          {badges.length > 0 && (\n            <div className='account__header__badges'>{badges}</div>\n          )}\n\n          {account.id !== me && signedIn && !(suspended || hidden) && (\n            <FamiliarFollowers accountId={accountId} />\n          )}\n\n          {!(suspended || hidden) && (\n            <div className='account__header__extra'>\n              <div\n                className='account__header__bio'\n                onClickCapture={handleLinkClick}\n              >\n                {account.id !== me && signedIn && (\n                  <AccountNote accountId={accountId} />\n                )}\n\n                {account.note.length > 0 && account.note !== '<p></p>' && (\n                  <div\n                    className='account__header__content translate'\n                    dangerouslySetInnerHTML={content}\n                  />\n                )}\n\n                <div className='account__header__fields'>\n                  <dl>\n                    <dt>\n                      <FormattedMessage\n                        id='account.joined_short'\n                        defaultMessage='Joined'\n                      />\n                    </dt>\n                    <dd>\n                      <FormattedDateWrapper\n                        value={account.created_at}\n                        year='numeric'\n                        month='short'\n                        day='2-digit'\n                      />\n                    </dd>\n                  </dl>\n\n                  {fields.map((pair, i) => (\n                    <dl\n                      key={i}\n                      className={classNames({\n                        verified: pair.verified_at,\n                      })}\n                    >\n                      <dt\n                        dangerouslySetInnerHTML={{\n                          __html: pair.name_emojified,\n                        }}\n                        title={pair.name}\n                        className='translate'\n                      />\n\n                      <dd className='translate' title={pair.value_plain ?? ''}>\n                        {pair.verified_at && (\n                          <span\n                            title={intl.formatMessage(messages.linkVerifiedOn, {\n                              date: intl.formatDate(\n                                pair.verified_at,\n                                dateFormatOptions,\n                              ),\n                            })}\n                          >\n                            <Icon\n                              id='check'\n                              icon={CheckIcon}\n                              className='verified__mark'\n                            />\n                          </span>\n                        )}{' '}\n                        <span\n                          dangerouslySetInnerHTML={{\n                            __html: pair.value_emojified,\n                          }}\n                        />\n                      </dd>\n                    </dl>\n                  ))}\n                </div>\n              </div>\n\n              <div className='account__header__extra__links'>\n                <NavLink\n                  to={`/@${account.acct}`}\n                  title={intl.formatNumber(account.statuses_count)}\n                >\n                  <ShortNumber\n                    value={account.statuses_count}\n                    renderer={StatusesCounter}\n                  />\n                </NavLink>\n\n                <NavLink\n                  exact\n                  to={`/@${account.acct}/following`}\n                  title={intl.formatNumber(account.following_count)}\n                >\n                  <ShortNumber\n                    value={account.following_count}\n                    renderer={FollowingCounter}\n                  />\n                </NavLink>\n\n                <NavLink\n                  exact\n                  to={`/@${account.acct}/followers`}\n                  title={intl.formatNumber(account.followers_count)}\n                >\n                  <ShortNumber\n                    value={account.followers_count}\n                    renderer={FollowersCounter}\n                  />\n                </NavLink>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n\n      {!(hideTabs || hidden) && (\n        <div className='account__section-headline'>\n          <NavLink exact to={`/@${account.acct}/featured`}>\n            <FormattedMessage id='account.featured' defaultMessage='Featured' />\n          </NavLink>\n          <NavLink exact to={`/@${account.acct}`}>\n            <FormattedMessage id='account.posts' defaultMessage='Posts' />\n          </NavLink>\n          <NavLink exact to={`/@${account.acct}/with_replies`}>\n            <FormattedMessage\n              id='account.posts_with_replies'\n              defaultMessage='Posts and replies'\n            />\n          </NavLink>\n          <NavLink exact to={`/@${account.acct}/media`}>\n            <FormattedMessage id='account.media' defaultMessage='Media' />\n          </NavLink>\n        </div>\n      )}\n\n      <Helmet>\n        <title>{titleFromAccount(account)}</title>\n        <meta\n          name='robots'\n          content={isLocal && isIndexable ? 'all' : 'noindex'}\n        />\n        <link rel='canonical' href={account.url} />\n      </Helmet>\n    </div>\n  );\n};\n","import { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { revealAccount } from 'mastodon/actions/accounts_typed';\nimport { Button } from 'mastodon/components/button';\nimport { domain } from 'mastodon/initial_state';\nimport { useAppDispatch } from 'mastodon/store';\n\nexport const LimitedAccountHint: React.FC<{ accountId: string }> = ({\n  accountId,\n}) => {\n  const dispatch = useAppDispatch();\n  const reveal = useCallback(() => {\n    dispatch(revealAccount({ id: accountId }));\n  }, [dispatch, accountId]);\n\n  return (\n    <div className='limited-account-hint'>\n      <p>\n        <FormattedMessage\n          id='limited_account_hint.title'\n          defaultMessage='This profile has been hidden by the moderators of {domain}.'\n          values={{ domain }}\n        />\n      </p>\n      <Button onClick={reveal}>\n        <FormattedMessage\n          id='limited_account_hint.action'\n          defaultMessage='Show profile anyway'\n        />\n      </Button>\n    </div>\n  );\n};\n"],"names":["useHandleClick","onClick","history","useAppHistory","useCallback","location","state","fromMastodon","goBack","push","ColumnBackButton","handleClick","component","jsxDEV","Icon","ArrowBackIcon","this","FormattedMessage","ButtonInTabsBar","SvgShare","props","React.createElement","SvgSmartToy","Badge","icon","PersonIcon","label","domain","roleId","GroupBadge","GroupsIcon","AutomatedBadge","SmartToyIcon","messages","defineMessages","copied","id","defaultMessage","CopyIconButton","title","value","className","setCopied","useState","dispatch","useAppDispatch","navigator","clipboard","writeText","showAlert","message","setTimeout","IconButton","classNames","ContentCopyIcon","placeholder","AccountNoteUI","initialValue","onSubmit","wasSaved","intl","useIntl","uniqueId","useId","setValue","isLoading","undefined","canSubmitOnBlurRef","useRef","handleChange","e","target","handleKeyDown","key","preventDefault","current","currentTarget","blur","ctrlKey","metaKey","handleBlur","opacity","LoadingIndicator","Textarea","formatMessage","AccountNote","accountId","useAppSelector","relationships","get","setWasSaved","handleSubmit","note","submitAccountNote","SvgBadge","SvgGlobe","DomainPill","username","isSelf","accessibilityId","open","setOpen","expanded","setExpanded","triggerRef","handleExpandClick","Fragment","active","Overlay","BadgeIcon","AlternateEmailIcon","GlobeIcon","button","x","FollowRequestNote","ImmutablePureComponent","render","account","onAuthorize","onReject","name","__html","CheckIcon","CloseIcon","__publicField","propTypes","ImmutablePropTypes","record","isRequired","mapDispatchToProps","authorizeFollowRequest","rejectFollowRequest","FollowRequestNoteContainer","connect","AccountLink","Link","acct","display_name_html","FamiliarFollowersReadout","familiarFollowers","messageData","name1","at","name2","othersCount","length","FamiliarFollowers","useFetchFamiliarFollowers","AvatarGroup","slice","map","Avatar","MemorialNote","MovedNote","targetAccountId","from","accounts","to","AvatarOverlay","DisplayName","unblock","edit_profile","linkVerifiedOn","account_locked","mention","direct","unmute","block","mute","report","share","copy","media","blockDomain","unblockDomain","hideReblogs","showReblogs","enableNotifications","disableNotifications","preferences","follow_requests","favourites","lists","followed_tags","blocks","domain_blocks","mutes","endorse","unendorse","add_or_remove_from_list","admin_account","admin_domain","languages","openOriginalPage","removeFromFollowers","confirmRemoveFromFollowersTitle","confirmRemoveFromFollowersMessage","confirmRemoveFromFollowersButton","titleFromAccount","displayName","display_name","localDomain","trim","dateFormatOptions","month","day","year","hour","minute","AccountHeader","hideTabs","signedIn","permissions","useIdentity","relationship","hidden","getAccountHidden","handleLinkClick","useLinks","handleBlock","blocking","unblockAccount","initBlockModal","handleMention","mentionCompose","handleDirect","directCompose","handleReport","initReport","handleReblogToggle","showing_reblogs","followAccount","reblogs","handleNotifyToggle","notifying","notify","handleMute","muting","unmuteAccount","initMuteModal","handleBlockDomain","initDomainBlockModal","handleUnblockDomain","split","handleEndorseToggle","endorsed","unpinAccount","pinAccount","handleAddToList","openModal","modalType","modalProps","handleChangeLanguages","handleOpenAvatar","src","avatar","alt","handleShare","url","handleMouseEnter","autoPlayGif","querySelectorAll","forEach","emoji","getAttribute","handleMouseLeave","suspended","isRemote","remoteDomain","menu","useMemo","arr","text","action","href","following","followed_by","handleRemoveFromFollowers","confirm","onConfirm","removeAccountFromFollowers","dangerous","domain_blocking","PERMISSION_MANAGE_USERS","PERMISSION_MANAGE_FEDERATION","actionBtn","bellBtn","lockedIcon","shareBtn","info","me","requested","requested_by","NotificationsActiveIcon","NotificationsIcon","ShareIcon","Button","FollowButton","moved","locked","LockIcon","content","note_emojified","displayNameHtml","fields","isLocal","includes","isIndexable","noindex","badges","bot","group","roles","role","memorial","inactive","header","header_static","Dropdown","MoreHorizIcon","FormattedDateWrapper","created_at","pair","i","verified","verified_at","name_emojified","value_plain","date","formatDate","value_emojified","NavLink","formatNumber","statuses_count","ShortNumber","StatusesCounter","following_count","FollowingCounter","followers_count","FollowersCounter","Helmet","LimitedAccountHint","reveal","revealAccount"],"mappings":"kyDAYA,SAASA,GAAeC,EAA2B,CACjD,MAAMC,EAAUC,GAAAA,EAEhB,OAAOC,EAAAA,YAAY,IAAM,OACnBH,EACFA,EAAAA,GACSC,EAAAA,EAAQG,SAASC,QAAjBJ,MAAAA,EAAwBK,aACjCL,EAAQM,OAAAA,EAERN,EAAQO,KAAK,GAAG,CAClB,EACC,CAACP,EAASD,CAAO,CAAC,CACvB,CAEO,MAAMS,GAA4DA,CAAC,CACxET,QAAAA,CACF,IAAM,CACJ,MAAMU,EAAcX,GAAeC,CAAO,EAEpCW,EACJC,EAAAA,OAAC,SAAA,CAAO,QAASF,EAAa,UAAU,qBACtC,SAAA,CAAAE,EAAAA,OAACC,EAAA,CACC,GAAG,eACH,KAAMC,GACN,UAAU,0BAAA,EAHZ,OAAA,GAAA,CAAA,SAAA,mGAAA,WAAA,GAAA,aAAA,CAAA,EAAAC,MAAA,EAKAH,SAACI,EAAA,CAAiB,8BAA8B,eAAe,MAAA,EAA/D,OAAA,GAAA,CAAA,SAAA,mGAAA,WAAA,GAAA,aAAA,CAAA,EAAAD,MAAqE,CAAA,CAAA,EANvE,OAAA,GAAA,CAAA,SAAA,mGAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAOA,EAGF,OAAOH,EAAAA,OAACK,IAAiBN,SAAAA,CAAAA,EAAlB,OAAA,GAAA,CAAA,SAAA,mGAAA,WAAA,GAAA,aAAA,EAAA,EAAAI,MAA4B,CACrC,EC1CMG,GAAYC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,EAAG,6pBAA6pB,CAAE,CAAC,ECAv3BC,GAAeF,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,EAAG,gfAAgf,CAAE,CAAC,ECQtsBE,EAAQA,CAAC,CAAEC,KAAAA,WAAQC,GAAA,CAAA,EAAD,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAT,MAAW,EAAKU,MAAAA,EAAOC,OAAAA,EAAQC,OAAAA,CAAAA,aAC3D,MAAA,CAAI,UAAU,eAAe,uBAAsBA,EACjDJ,SAAAA,CAAAA,EACAE,EACAC,GAAUd,EAAAA,OAAC,OAAA,CAAK,UAAU,uBAAwBc,SAAAA,CAAAA,EAAxC,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAX,MAA+C,CAAA,CAAA,EAH5D,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAIA,EAUWa,GAAaA,IACxBhB,SAACU,EAAA,CAAM,cAAOO,GAAA,CAAA,EAAD,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAd,MAAW,EAAK,MAAOH,EAAAA,OAACI,GAAiB,GAAE,uBAAwB,eAAe,SAA3D,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAkE,CAAA,EAAtG,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAA0G,EAG/Fe,GAAiBA,IAC5BlB,SAACU,EAAA,CAAM,cAAOS,GAAA,CAAA,EAAD,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAhB,MAAa,EAAK,MAAOH,EAAAA,OAACI,GAAiB,GAAE,qBAAsB,eAAe,aAAzD,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAoE,CAAA,EAA1G,OAAA,GAAA,CAAA,SAAA,sFAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAA8G,EClB1GiB,GAAWC,EAAe,CAC9BC,OAAQ,CACNC,GAAE,0BACFC,eAAc,qBAAA,CAElB,CAAC,EAEYC,GAIRA,CAAC,CAAEC,MAAAA,EAAOC,MAAAA,EAAOC,UAAAA,KAAgB,CACpC,KAAM,CAACN,EAAQO,CAAS,EAAIC,EAAAA,SAAS,EAAK,EACpCC,EAAWC,EAAAA,EAEXlC,EAAcP,EAAAA,YAAY,IAAM,CAC/B0C,UAAUC,UAAUC,UAAUR,CAAK,EACxCE,EAAU,EAAI,EACdE,EAASK,GAAU,CAAEC,QAASjB,GAASE,MAAAA,CAAQ,CAAC,EAChDgB,WAAW,IAAM,CACfT,EAAU,EAAK,CAAA,EACd,GAAG,CAAA,EACL,CAACA,EAAWF,EAAOI,CAAQ,CAAC,EAE/B,OACE/B,EAAAA,OAACuC,EAAA,CACC,UAAWC,EAAWZ,EAAWN,EAAS,SAAW,UAAU,EAC/D,MAAAI,EACA,QAAS5B,EACT,KAAK,GACL,cAAe2C,EAAAA,EALjB,OAAA,GAAA,CAAA,SAAA,iGAAA,WAAA,GAAA,aAAA,CAAA,EAAAtC,MAAA,CAQJ,ECjCMiB,GAAWC,EAAe,CAC9BqB,YAAa,CACXnB,GAAE,2BACFC,eAAc,qBAAA,CAElB,CAAC,EAEKmB,GAIDA,CAAC,CAAEC,aAAAA,EAAcC,SAAAA,EAAUC,SAAAA,KAAe,CAC7C,MAAMC,EAAOC,GAAAA,EACPC,EAAWC,EAAAA,MAAAA,EACX,CAACvB,EAAOwB,CAAQ,EAAIrB,EAAAA,SAASc,GAAgB,EAAE,EAC/CQ,EAAYR,IAAiBS,OAC7BC,EAAqBC,EAAAA,OAAO,EAAI,EAEhCC,EAAejE,EAAAA,YAClBkE,GAAM,CACLN,EAASM,EAAEC,OAAO/B,KAAK,CAAA,EAEzB,CAAA,CAAA,EAGIgC,EAAgBpE,EAAAA,YACnBkE,GAAM,CACDA,EAAEG,MAAQ,UACZH,EAAEI,eAAAA,EAEFV,EAASP,GAAgB,EAAE,EAE3BU,EAAmBQ,QAAU,GAC7BL,EAAEM,cAAcC,KAAAA,GACPP,EAAEG,MAAQ,UAAYH,EAAEQ,SAAWR,EAAES,WAC9CT,EAAEI,eAAAA,EAEFhB,EAASlB,CAAK,EAEd2B,EAAmBQ,QAAU,GAC7BL,EAAEM,cAAcC,KAAAA,EAClB,EAEF,CAACpB,EAAcC,EAAUlB,CAAK,CAAA,EAG1BwC,EAAa5E,EAAAA,YAAY,IAAM,CAC/BqD,IAAiBjB,GAAS2B,EAAmBQ,SAC/CjB,EAASlB,CAAK,EAEhB2B,EAAmBQ,QAAU,EAAA,EAC5B,CAAClB,EAAcC,EAAUlB,CAAK,CAAC,EAElC,OACE3B,EAAAA,OAAC,MAAA,CAAI,UAAU,gCACb,SAAA,CAAAA,EAAAA,OAAC,QAAA,CAAM,QAAS,gBAAgBiD,CAAQ,GACtC,SAAA,CAAAjD,EAAAA,OAACI,EAAA,CACC,GAAE,8BACF,eAAe,eAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAD,MAAA,EAGG,IACHH,EAAAA,OAAC,OAAA,CACC,YAAU,SACV,KAAK,SACL,UAAU,eACV,MAAO,CAAEoE,QAAStB,EAAW,EAAI,CAAA,EAEhCA,YACC9C,SAACI,EAAA,CAAiB,mBAAmB,eAAe,SAApD,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAA2D,CAAA,EAP/D,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAAA,CASA,CAAA,EAdF,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAeA,EACCiD,EACCpD,EAAAA,OAAC,MAAA,CAAI,UAAU,2DACb,kBAACqE,GAAA,GAAD,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,EAAA,EAAAlE,MAAiB,CAAA,EADnB,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAEA,EAEAH,EAAAA,OAACsE,GAAA,CACC,GAAI,gBAAgBrB,CAAQ,GAC5B,UAAU,yCACV,YAAaF,EAAKwB,cAAcnD,GAASsB,WAAW,EACpD,MAAAf,EACA,SAAU6B,EACV,UAAWG,EACX,OAAQQ,CAAAA,EAPV,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAhE,MAAA,CAOqB,CAAA,EA7BzB,OAAA,GAAA,CAAA,SAAA,8GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAgCA,CAEJ,EAEaqE,GAERA,CAAC,CAAEC,UAAAA,KAAgB,CACtB,MAAM1C,EAAWC,EAAAA,EACXY,EAAe8B,EAAgBjF,UACnCA,OAAAA,EAAAA,EAAMkF,cAAcC,IAAIH,CAAS,IAAjChF,YAAAA,EAAoCmF,IAAI,QAAM,EAE1C,CAAC9B,EAAU+B,CAAW,EAAI/C,EAAAA,SAAS,EAAK,EAExCgD,EAAevF,EAAAA,YAClBwF,GAAiB,CAChBF,EAAY,EAAI,EACX9C,EAASiD,GAAkB,CAAEP,UAAAA,EAAWM,KAAAA,CAAAA,CAAM,CAAC,EAEpDzC,WAAW,IAAM,CACfuC,EAAY,EAAK,CAAA,EAChB,GAAI,CAAA,EAET,CAAC9C,EAAU0C,CAAS,CAAA,EAGtB,OACEzE,EAAAA,OAAC2C,GAAA,CAEC,aAAAC,EACA,SAAAE,EACA,SAAUgC,CAAAA,EAHL,GAAGL,CAAS,IAAI7B,CAAY,GADnC,GAAA,CAAA,SAAA,8GAAA,WAAA,IAAA,aAAA,CAAA,EAAAzC,MAAA,CAOJ,ECjIM8E,GAAY1E,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,EAAG,siBAAsiB,CAAE,CAAC,ECAhwB0E,GAAY3E,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,EAAG,4bAA4b,CAAE,CAAC,ECY/oB2E,GAIRA,CAAC,CAAErE,OAAAA,EAAQsE,SAAAA,EAAUC,OAAAA,KAAa,CACrC,MAAMC,EAAkBpC,EAAAA,MAAAA,EAClB,CAACqC,EAAMC,CAAO,EAAI1D,EAAAA,SAAS,EAAK,EAChC,CAAC2D,EAAUC,CAAW,EAAI5D,EAAAA,SAAS,EAAK,EACxC6D,EAAapC,EAAAA,OAAO,IAAI,EAExBzD,EAAcP,EAAAA,YAAY,IAAM,CACpCiG,EAAQ,CAACD,CAAI,CAAA,EACZ,CAACA,EAAMC,CAAO,CAAC,EAEZI,EAAoBrG,EAAAA,YAAY,IAAM,CAC1CmG,EAAY,CAACD,CAAQ,CAAA,EACpB,CAACA,EAAUC,CAAW,CAAC,EAE1B,OACE1F,EAAAA,OAAA6F,WAAA,CACE,SAAA,CAAA7F,EAAAA,OAAC,SAAA,CACC,UAAWwC,EAAW,uBAAwB,CAAEsD,OAAQP,EAAM,EAC9D,IAAKI,EACL,QAAS7F,EACT,gBAAeyF,EACf,gBAAeD,EAEdxE,SAAAA,CAAAA,EAPH,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAX,MAAA,EAUAH,EAAAA,OAAC+F,GAAA,CACC,KAAMR,EACN,UAAA,GACA,OAAQzF,EACR,OAAQ,CAAC,EAAG,CAAC,EACb,OAAQ6F,EAEP,SAAA,CAAC,CAAEpF,MAAAA,CAAAA,IACFP,EAAAA,OAAC,MAAA,CACC,GAAIO,EACJ,KAAK,SACL,GAAI+E,EACJ,UAAU,kDAEV,SAAA,CAAAtF,EAAAA,OAAC,MAAA,CAAI,UAAU,uCACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,6CACb,SAAAA,EAAAA,OAACC,GAAK,GAAG,GAAG,KAAM+F,EAAAA,EAAlB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAA7F,MAA4B,CAAA,EAD9B,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAEA,WACC,KAAA,CACC,SAAAH,EAAAA,OAACI,EAAA,CACC,GAAE,gCACF,eAAe,qBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAA,CAEsC,EAHxC,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAKA,CAAA,CAAA,EATF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAUA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,uCACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,8CACZqF,SAAAA,EACCrF,EAAAA,OAACI,EAAA,CACC,GAAE,0BACF,eAAe,cAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAA,EAKAH,EAAAA,OAACI,EAAA,CACC,GAAE,2BACF,eAAe,eAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAA,CAEgC,EATpC,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAYA,EACAH,EAAAA,OAAC,MAAA,CAAI,UAAU,+CAA8C,SAAA,CAAA,IACzDoF,EAAS,IAAEtE,CAAAA,CAAAA,EADf,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAX,MAEA,CAAA,CAAA,EAhBF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAiBA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,sCACb,SAAA,CAAAA,SAAC,MAAA,CACC,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,4CACb,SAAAA,EAAAA,OAACC,GAAK,GAAG,GAAG,KAAMgG,EAAAA,EAAlB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAA9F,MAAqC,CAAA,EADvC,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAEA,WAEC,MAAA,CACC,SAAA,CAAAH,SAAC,KAAA,CACC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,uBACF,eAAe,UAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAA,CAE2B,EAH7B,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAKA,EACAH,EAAAA,OAAC,KACEqF,SAAAA,EACCrF,EAAAA,OAACI,EAAA,CACC,GAAE,4BACF,eAAe,iHAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,EAKAH,EAAAA,OAACI,EAAA,CACC,GAAE,6BACF,eAAe,mHAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAEoI,EATxI,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAYA,CAAA,CAAA,EAnBF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAoBA,CAAA,CAAA,EAzBF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MA0BA,WAEC,MAAA,CACC,SAAA,CAAAH,EAAAA,OAAC,MAAA,CAAI,UAAU,4CACb,SAAAA,EAAAA,OAACC,GAAK,GAAG,GAAG,KAAMiG,EAAAA,EAAlB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAA/F,MAA4B,CAAA,EAD9B,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAEA,WAEC,MAAA,CACC,SAAA,CAAAH,SAAC,KAAA,CACC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,qBACF,eAAe,QAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAEyB,EAH3B,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,EACAH,EAAAA,OAAC,KACEqF,SAAAA,EACCrF,EAAAA,OAACI,EAAA,CACC,GAAE,0BACF,eAAe,mIAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,EAKAH,EAAAA,OAACI,EAAA,CACC,GAAE,2BACF,eAAe,oDAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAEqE,EATzE,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAYA,CAAA,CAAA,EAnBF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAoBA,CAAA,CAAA,EAzBF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MA0BA,CAAA,CAAA,EAvDF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAwDA,EAEAH,EAAAA,OAAC,KACEqF,SAAAA,EACCrF,EAAAA,OAACI,EAAA,CACC,GAAE,0BACF,eAAe,gKACf,OAAQ,CACN+F,OAASC,GACPpG,EAAAA,OAAC,SAAA,CACC,QAAS4F,EACT,UAAU,cAETQ,SAAAA,CAAAA,EAJH,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAjG,MAAA,CAKA,CAEJ,EAZF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EAeAH,EAAAA,OAACI,EAAA,CACC,GAAE,2BACF,eAAe,6JACf,OAAQ,CACN+F,OAASC,GACPpG,EAAAA,OAAC,SAAA,CACC,QAAS4F,EACT,UAAU,cAETQ,SAAAA,CAAAA,EAJH,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAjG,MAAA,CAKA,CAEJ,EAZF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,CAYI,EA7BR,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAgCA,EAECsF,GACCzF,EAAAA,OAAA6F,WAAA,CACE,SAAA,CAAA7F,SAAC,IAAA,CACC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,wCACF,eAAe,8EAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAE+F,EAHjG,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,WACC,IAAA,CACC,SAAAH,EAAAA,OAACI,EAAA,CACC,GAAE,uCACF,eAAe,0GAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAE2H,EAH7H,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,CAAA,CAAA,EAZF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAaA,CAAA,CAAA,EA/IJ,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAAA,CAiJA,EAzJJ,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAAA,CA2JA,CAAA,EAtKF,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAuKA,CAEJ,EChMA,MAAqBkG,WAA0BC,EAAuB,CAMpEC,QAAU,CACR,KAAM,CAAEC,QAAAA,EAASC,YAAAA,EAAaC,SAAAA,CAAAA,EAAa,KAAKnG,MAEhD,OACEP,EAAAA,OAAC,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,iCACb,SAAAA,EAAAA,OAACI,GAAiB,GAAE,2BAA4B,eAAe,qCAAqC,OAAQ,CAAEuG,KAAM3G,SAAC,MAAA,CAAI,SAAAA,EAAAA,OAAC,SAAA,CAAO,wBAAyB,CAAE4G,OAAQJ,EAAQ5B,IAAI,mBAAmB,CAAA,CAAE,EAA5E,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,GAAA,EAAA,IAA8E,CAAA,EAAnF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,GAAA,EAAA,IAAsF,IAA1M,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAAmN,CAAA,EADrN,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAA,IAEA,EAEA5E,EAAAA,OAAC,MAAA,CAAI,UAAU,gCACb,SAAA,CAAAA,SAAC,UAAO,KAAK,SAAS,UAAU,8CAA8C,QAASyG,EACrF,SAAA,CAAAzG,SAACC,EAAA,CAAK,GAAG,QAAQ,KAAM4G,EAAAA,EAAvB,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAAiC,EACjC7G,SAACI,EAAA,CAAiB,8BAA8B,eAAe,WAAA,EAA/D,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAA0E,CAAA,CAAA,EAF5E,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAGA,WAEC,SAAA,CAAO,KAAK,SAAS,UAAU,6CAA6C,QAASsG,EACpF,SAAA,CAAA1G,SAACC,EAAA,CAAK,GAAG,QAAQ,KAAM6G,EAAAA,EAAvB,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAAiC,EACjC9G,SAACI,EAAA,CAAiB,2BAA2B,eAAe,QAAA,EAA5D,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAAoE,CAAA,CAAA,EAFtE,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA,IAGA,CAAA,CAAA,EATF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAA,IAUA,CAAA,CAAA,EAfF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAA,IAgBA,CAAA,CAIN,CA5BE2G,GAFmBV,GAEZW,YAAY,CACjBR,QAASS,GAAmBC,OAAOC,UAAAA,GCNvC,MAAMC,GAAqBA,CAACrF,EAAU,CAAEyE,QAAAA,CAAQ,KAAO,CACrDC,aAAe,CACb1E,EAASsF,GAAuBb,EAAQ5B,IAAI,IAAI,CAAC,CAAC,GAGpD8B,UAAY,CACV3E,EAASuF,GAAoBd,EAAQ5B,IAAI,IAAI,CAAC,CAAC,CACjD,CACF,GAEA2C,GAAeC,GAAQ,KAAMJ,EAAkB,EAAEf,EAAiB,ECN5DoB,GAA+CA,CAAC,CAAEjB,QAAAA,KACjDA,EAKHxG,EAAAA,OAAC0H,EAAA,CACC,GAAI,KAAKlB,EAAQmB,IAAI,GACrB,0BAAyBnB,EAAQjF,GACjC,wBAAyB,CAAEqF,OAAQJ,EAAQoB,iBAAAA,CAAkB,EAH/D,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAAzH,MAAA,EAJO,KAYL0H,GAAuEA,CAAC,CAC5EC,kBAAAA,CACF,IAAM,CACJ,MAAMC,EAAc,CAClBC,MAAOhI,EAAAA,OAACyH,GAAA,CAAY,QAASK,EAAkBG,GAAG,CAAC,CAAA,EAA5C,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,EAAA,EAAA9H,MAA8C,EACrD+H,MAAOlI,EAAAA,OAACyH,GAAA,CAAY,QAASK,EAAkBG,GAAG,CAAC,CAAA,EAA5C,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,EAAA,EAAA9H,MAA8C,EACrDgI,YAAaL,EAAkBM,OAAS,CAAA,EAG1C,OAAIN,EAAkBM,SAAW,EAE7BpI,EAAAA,OAACI,EAAA,CACC,GAAE,iCACF,eAAe,sBACf,OAAQ2H,CAAAA,EAHV,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAA5H,MAAA,EAMO2H,EAAkBM,SAAW,EAEpCpI,EAAAA,OAACI,EAAA,CACC,GAAE,iCACF,eAAe,kCACf,OAAQ2H,CAAAA,EAHV,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAA5H,MAAA,EAQAH,EAAAA,OAACI,EAAA,CACC,GAAE,kCACF,eAAe,8GACf,OAAQ2H,CAAAA,EAHV,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAA5H,MAAA,CAON,EAEakI,GAAqDA,CAAC,CACjE5D,UAAAA,CACF,IAAM,CACJ,KAAM,CAAEqD,kBAAAA,EAAmB1E,UAAAA,CAAAA,EAAckF,GAA0B,CACjE7D,UAAAA,CAAAA,CACD,EAED,OAAIrB,GAAa0E,EAAkBM,SAAW,EACrC,KAIPpI,EAAAA,OAAC,MAAA,CAAI,UAAU,sCACb,SAAA,CAAAA,EAAAA,OAACuI,IAAY,QAAO,GACjBT,WAAkBU,MAAM,EAAG,CAAC,EAAEC,IAAKjC,GAClCxG,EAAAA,OAAC0I,GAAA,CAAO,SAAQ,GAAkB,QAAAlC,EAAkB,KAAM,EAAA,EAApCA,EAAQjF,GAA9B,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAApB,MAA6D,CAAA,CAC9D,EAHH,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAIA,EACAH,EAAAA,OAAC6H,IAAyB,kBAAAC,CAAA,EAA1B,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAA3H,MAA+D,CAAA,CAAA,EANjE,OAAA,GAAA,CAAA,SAAA,6HAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAOA,CAEJ,EC/EawI,GAAyBA,IACpC3I,EAAAA,OAAC,MAAA,CAAI,UAAU,0BACb,SAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,mCACb,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,sBACF,eAAe,cAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,wHAAA,WAAA,EAAA,aAAA,CAAA,EAAAD,MAE+B,CAAA,EAHjC,OAAA,GAAA,CAAA,SAAA,wHAAA,WAAA,EAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,EANF,OAAA,GAAA,CAAA,SAAA,wHAAA,WAAA,EAAA,aAAA,CAAA,EAAAA,MAOA,ECFWyI,GAGRA,CAAC,CAAEnE,UAAAA,EAAWoE,gBAAAA,KAAsB,CACvC,MAAMC,EAAOpE,EAAgBjF,GAAUA,EAAMsJ,SAASnE,IAAIH,CAAS,CAAC,EAC9DuE,EAAKtE,EAAgBjF,GAAUA,EAAMsJ,SAASnE,IAAIiE,CAAe,CAAC,EAExE,OACE7I,EAAAA,OAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,gCACb,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,mBACF,eAAe,sDACf,OAAQ,CACNuG,cACG,MAAA,CACC,SAAA3G,EAAAA,OAAC,SAAA,CACC,wBAAyB,CACvB4G,QAAQkC,GAAAA,YAAAA,EAAMlB,oBAAqB,EAAA,CACrC,EAHF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAAzH,MAAA,CAGI,EAJN,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAMA,CAAA,CAEJ,EAbF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAAA,CAaI,EAdN,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAgBA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAA,EAAAA,OAAC0H,GAAK,GAAI,KAAKsB,GAAAA,YAAAA,EAAIrB,IAAI,GAAI,UAAU,gCACnC,SAAA,CAAA3H,EAAAA,OAAC,MAAA,CAAI,UAAU,kCACb,SAAAA,EAAAA,OAACiJ,IAAc,QAASD,EAAI,OAAQF,CAAAA,EAApC,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA3I,MAAyC,CAAA,EAD3C,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAAA,MAEA,EACAH,EAAAA,OAACkJ,GAAA,CAAY,QAASF,CAAAA,EAAtB,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAA7I,MAAyB,CAAA,CAAA,EAJ3B,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAKA,EAEAH,EAAAA,OAAC0H,GAAK,GAAI,KAAKsB,GAAAA,YAAAA,EAAIrB,IAAI,GAAI,UAAU,SACnC,SAAA3H,EAAAA,OAACI,EAAA,CACC,GAAE,wBACF,eAAe,eAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,EAAA,EAAAD,MAAA,CAEgC,EAHlC,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,CAAA,EAbF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAcA,CAAA,CAAA,EAjCF,OAAA,GAAA,CAAA,SAAA,qHAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAkCA,CAEJ,ECaMiB,EAAWC,EAAe,CAC9B8H,QAAS,CAAE5H,GAAE,kBAAqBC,eAAc,iBAAA,EAChD4H,aAAc,CAAE7H,GAAE,uBAA0BC,eAAc,cAAA,EAC1D6H,eAAgB,CACd9H,GAAE,2BACFC,eAAc,8CAAA,EAEhB8H,eAAgB,CACd/H,GAAE,sBACFC,eAAc,+FAAA,EAGhB+H,QAAS,CAAEhI,GAAE,kBAAqBC,eAAc,iBAAA,EAChDgI,OAAQ,CAAEjI,GAAE,iBAAoBC,eAAc,2BAAA,EAC9CiI,OAAQ,CAAElI,GAAE,iBAAoBC,eAAc,gBAAA,EAC9CkI,MAAO,CAAEnI,GAAE,gBAAmBC,eAAc,eAAA,EAC5CmI,KAAM,CAAEpI,GAAE,eAAkBC,eAAc,cAAA,EAC1CoI,OAAQ,CAAErI,GAAE,iBAAoBC,eAAc,gBAAA,EAC9CqI,MAAO,CAAEtI,GAAE,gBAAmBC,eAAc,yBAAA,EAC5CsI,KAAM,CAAEvI,GAAE,eAAkBC,eAAc,sBAAA,EAC1CuI,MAAO,CAAExI,GAAE,gBAAmBC,eAAc,OAAA,EAC5CwI,YAAa,CACXzI,GAAE,uBACFC,eAAc,uBAAA,EAEhByI,cAAe,CACb1I,GAAE,yBACFC,eAAc,yBAAA,EAEhB0I,YAAa,CACX3I,GAAE,uBACFC,eAAc,0BAAA,EAEhB2I,YAAa,CACX5I,GAAE,uBACFC,eAAc,0BAAA,EAEhB4I,oBAAqB,CACnB7I,GAAE,+BACFC,eAAc,8BAAA,EAEhB6I,qBAAsB,CACpB9I,GAAE,gCACFC,eAAc,sCAAA,EAEhB8I,YAAa,CACX/I,GAAE,6BACFC,eAAc,aAAA,EAEhB+I,gBAAiB,CACfhJ,GAAE,iCACFC,eAAc,iBAAA,EAEhBgJ,WAAY,CAAEjJ,GAAE,4BAA+BC,eAAc,WAAA,EAC7DiJ,MAAO,CAAElJ,GAAE,uBAA0BC,eAAc,OAAA,EACnDkJ,cAAe,CACbnJ,GAAE,+BACFC,eAAc,mBAAA,EAEhBmJ,OAAQ,CAAEpJ,GAAE,wBAA2BC,eAAc,eAAA,EACrDoJ,cAAe,CACbrJ,GAAE,+BACFC,eAAc,iBAAA,EAEhBqJ,MAAO,CAAEtJ,GAAE,uBAA0BC,eAAc,aAAA,EACnDsJ,QAAS,CAAEvJ,GAAE,kBAAqBC,eAAc,oBAAA,EAChDuJ,UAAW,CACTxJ,GAAE,oBACFC,eAAc,0BAAA,EAEhBwJ,wBAAyB,CACvBzJ,GAAE,kCACFC,eAAc,0BAAA,EAEhByJ,cAAe,CACb1J,GAAE,uBACFC,eAAc,uCAAA,EAEhB0J,aAAc,CACZ3J,GAAE,sBACFC,eAAc,wCAAA,EAEhB2J,UAAW,CACT5J,GAAE,oBACFC,eAAc,6BAAA,EAEhB4J,iBAAkB,CAChB7J,GAAE,6BACFC,eAAc,oBAAA,EAEhB6J,oBAAqB,CACnB9J,GAAE,gCACFC,eAAc,8BAAA,EAEhB8J,gCAAiC,CAC/B/J,GAAE,4CACFC,eAAc,kBAAA,EAEhB+J,kCAAmC,CACjChK,GAAE,8CACFC,eAAc,mEAAA,EAGhBgK,iCAAkC,CAChCjK,GAAE,8CACFC,eAAc,iBAAA,CAElB,CAAC,EAEKiK,GAAoBjF,GAAqB,CAC7C,MAAMkF,EAAclF,EAAQmF,aACtBhE,EACJnB,EAAQmB,OAASnB,EAAQpB,SACrB,GAAGoB,EAAQpB,QAAQ,IAAIwG,CAAW,GAClCpF,EAAQmB,KAId,MAAO,GAFL+D,EAAYG,KAAAA,EAAOzD,SAAW,EAAI5B,EAAQpB,SAAWsG,CAEvC,MAAM/D,CAAI,GAC5B,EAEMmE,GAAgD,CACpDC,MAAO,QACPC,IAAK,UACLC,KAAM,UACNC,KAAM,UACNC,OAAQ,SACV,EAEaC,GAGRA,CAAC,CAAE3H,UAAAA,EAAW4H,SAAAA,KAAe,CAChC,MAAMtK,EAAWC,EAAAA,EACXe,EAAOC,GAAAA,EACP,CAAEsJ,SAAAA,EAAUC,YAAAA,CAAAA,EAAgBC,GAAAA,EAC5BhG,EAAU9B,EAAgBjF,GAAUA,EAAMsJ,SAASnE,IAAIH,CAAS,CAAC,EACjEgI,EAAe/H,EAAgBjF,GACnCA,EAAMkF,cAAcC,IAAIH,CAAS,CAAA,EAE7BiI,EAAShI,EAAgBjF,GAAUkN,GAAiBlN,EAAOgF,CAAS,CAAC,EACrEmI,EAAkBC,GAAAA,EAElBC,EAAcvN,EAAAA,YAAY,IAAM,CAC/BiH,IAIDiG,GAAAA,MAAAA,EAAcM,SAChBhL,EAASiL,GAAexG,EAAQjF,EAAE,CAAC,EAEnCQ,EAASkL,GAAezG,CAAO,CAAC,EAClC,EACC,CAACzE,EAAUyE,EAASiG,CAAY,CAAC,EAE9BS,EAAgB3N,EAAAA,YAAY,IAAM,CACjCiH,GAILzE,EAASoL,GAAe3G,CAAO,CAAC,CAAA,EAC/B,CAACzE,EAAUyE,CAAO,CAAC,EAEhB4G,EAAe7N,EAAAA,YAAY,IAAM,CAChCiH,GAILzE,EAASsL,GAAc7G,CAAO,CAAC,CAAA,EAC9B,CAACzE,EAAUyE,CAAO,CAAC,EAEhB8G,EAAe/N,EAAAA,YAAY,IAAM,CAChCiH,GAILzE,EAASwL,GAAW/G,CAAO,CAAC,CAAA,EAC3B,CAACzE,EAAUyE,CAAO,CAAC,EAEhBgH,EAAqBjO,EAAAA,YAAY,IAAM,CACtCiH,IAIDiG,GAAAA,MAAAA,EAAcgB,gBAChB1L,EAAS2L,EAAclH,EAAQjF,GAAI,CAAEoM,QAAS,EAAA,CAAO,CAAC,EAEtD5L,EAAS2L,EAAclH,EAAQjF,GAAI,CAAEoM,QAAS,EAAA,CAAM,CAAC,EACvD,EACC,CAAC5L,EAAUyE,EAASiG,CAAY,CAAC,EAE9BmB,GAAqBrO,EAAAA,YAAY,IAAM,CACtCiH,IAIDiG,GAAAA,MAAAA,EAAcoB,UAChB9L,EAAS2L,EAAclH,EAAQjF,GAAI,CAAEuM,OAAQ,EAAA,CAAO,CAAC,EAErD/L,EAAS2L,EAAclH,EAAQjF,GAAI,CAAEuM,OAAQ,EAAA,CAAM,CAAC,EACtD,EACC,CAAC/L,EAAUyE,EAASiG,CAAY,CAAC,EAE9BsB,EAAaxO,EAAAA,YAAY,IAAM,CAC9BiH,IAIDiG,GAAAA,MAAAA,EAAcuB,OAChBjM,EAASkM,GAAczH,EAAQjF,EAAE,CAAC,EAElCQ,EAASmM,GAAc1H,CAAO,CAAC,EACjC,EACC,CAACzE,EAAUyE,EAASiG,CAAY,CAAC,EAE9B0B,EAAoB5O,EAAAA,YAAY,IAAM,CACrCiH,GAILzE,EAASqM,GAAqB5H,CAAO,CAAC,CAAA,EACrC,CAACzE,EAAUyE,CAAO,CAAC,EAEhB6H,EAAsB9O,EAAAA,YAAY,IAAM,CAC5C,GAAI,CAACiH,EACH,OAGF,MAAM1F,EAAS0F,EAAQmB,KAAK2G,MAAM,GAAG,EAAE,CAAC,EAEnCxN,GAILiB,EAASkI,GAAcnJ,CAAM,CAAC,CAAA,EAC7B,CAACiB,EAAUyE,CAAO,CAAC,EAEhB+H,EAAsBhP,EAAAA,YAAY,IAAM,CACvCiH,IAIDiG,GAAAA,MAAAA,EAAc+B,SAChBzM,EAAS0M,GAAajI,EAAQjF,EAAE,CAAC,EAEjCQ,EAAS2M,GAAWlI,EAAQjF,EAAE,CAAC,EACjC,EACC,CAACQ,EAAUyE,EAASiG,CAAY,CAAC,EAE9BkC,EAAkBpP,EAAAA,YAAY,IAAM,CACnCiH,GAILzE,EACE6M,EAAU,CACRC,UAAW,aACXC,WAAY,CACVrK,UAAW+B,EAAQjF,EAAAA,CACrB,CACD,CAAA,CACH,EACC,CAACQ,EAAUyE,CAAO,CAAC,EAEhBuI,EAAwBxP,EAAAA,YAAY,IAAM,CACzCiH,GAILzE,EACE6M,EAAU,CACRC,UAAW,uBACXC,WAAY,CACVrK,UAAW+B,EAAQjF,EAAAA,CACrB,CACD,CAAA,CACH,EACC,CAACQ,EAAUyE,CAAO,CAAC,EAEhBwI,GAAmBzP,EAAAA,YACtBkE,GAAwB,CACnBA,EAAE0C,SAAW,GAAK1C,EAAEQ,SAAWR,EAAES,UAIrCT,EAAEI,eAAAA,EAEG2C,GAILzE,EACE6M,EAAU,CACRC,UAAW,QACXC,WAAY,CACVG,IAAKzI,EAAQ0I,OACbC,IAAK,EAAA,CACP,CACD,CAAA,EACH,EAEF,CAACpN,EAAUyE,CAAO,CAAA,EAGd4I,GAAc7P,EAAAA,YAAY,IAAM,CAC/BiH,GAIAvE,UAAU4H,MAAM,CACnBwF,IAAK7I,EAAQ6I,GAAAA,CACd,CAAA,EACA,CAAC7I,CAAO,CAAC,EAEN8I,GAAmB/P,EAAAA,YACvB,CAAC,CAAEwE,cAAAA,CAAAA,IAAsC,CACnCwL,GAIJxL,EACGyL,iBAAmC,eAAe,EAClDC,QAASC,GAAU,CAClBA,EAAMT,IAAMS,EAAMC,aAAa,eAAe,GAAK,EAAA,CACpD,CAAA,EAEL,CAAA,CAAA,EAGIC,GAAmBrQ,EAAAA,YACvB,CAAC,CAAEwE,cAAAA,CAAAA,IAAsC,CACnCwL,GAIJxL,EACGyL,iBAAmC,eAAe,EAClDC,QAASC,GAAU,CAClBA,EAAMT,IAAMS,EAAMC,aAAa,aAAa,GAAK,EAAA,CAClD,CAAA,EAEL,CAAA,CAAA,EAGIE,EAAYrJ,GAAAA,YAAAA,EAASqJ,UACrBC,GAAWtJ,GAAAA,YAAAA,EAASmB,SAASnB,GAAAA,YAAAA,EAASpB,UACtC2K,EAAeD,EAAWtJ,GAAAA,YAAAA,EAASmB,KAAK2G,MAAM,KAAK,GAAK,KAExD0B,EAAOC,EAAAA,QAAQ,IAAM,CACzB,MAAMC,EAAkB,CAAA,EAExB,GAAI,CAAC1J,EACH,OAAO0J,EA2BT,GAxBI5D,GAAY,CAAC9F,EAAQqJ,YACvBK,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASmI,QAAS,CACzC5C,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQlD,CAAAA,CACT,EACDgD,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASoI,OAAQ,CACxC7C,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQhD,CAAAA,CACT,EACD8C,EAAItQ,KAAK,IAAI,GAGXkQ,IACFI,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASgK,gBAAgB,EAClDiF,KAAM7J,EAAQ6I,GAAAA,CACf,EACDa,EAAItQ,KAAK,IAAI,GAGX0M,EAAU,CAuCZ,GAtCIG,GAAAA,MAAAA,EAAc6D,YACX7D,EAAauB,SACZvB,EAAagB,gBACfyC,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS8I,YAAa,CAC7CvD,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQ5C,CAAAA,CACT,EAED0C,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS+I,YAAa,CAC7CxD,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQ5C,CAAAA,CACT,EAGH0C,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS+J,SAAS,EAC3CiF,OAAQrB,CAAAA,CACT,EACDmB,EAAItQ,KAAK,IAAI,GAGfsQ,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cACTkI,EAAa+B,SAAWpN,EAAS2J,UAAY3J,EAAS0J,OAAAA,EAExDsF,OAAQ7B,CAAAA,CACT,EACD2B,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS4J,uBAAuB,EACzDoF,OAAQzB,CAAAA,CACT,EACDuB,EAAItQ,KAAK,IAAI,GAGX6M,GAAAA,MAAAA,EAAc8D,YAAa,CAC7B,MAAMC,EAA4BA,IAAM,CACtCzO,EACE6M,EAAU,CACRC,UAAW,UACXC,WAAY,CACVpN,MAAOqB,EAAKwB,cACVnD,EAASkK,+BAAAA,EAEXjJ,QAASU,EAAKwB,cACZnD,EAASmK,kCACT,CAAE5E,KAAM3G,SAAC,SAAA,CAAQwG,WAAQmB,IAAAA,EAAjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAxH,MAAsB,CAAA,CAAU,EAE1CsQ,QAAS1N,EAAKwB,cACZnD,EAASoK,gCAAAA,EAEXkF,UAAWA,IAAM,CACV3O,EAAS4O,GAA2B,CAAElM,UAAAA,CAAAA,CAAW,CAAC,CAAA,CACzD,CACF,CACD,CAAA,CACH,EAGFyL,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASiK,oBAAqB,CACrD1E,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQI,EACRI,UAAW,EAAA,CACZ,CAAA,CAGCnE,GAAAA,MAAAA,EAAcuB,OAChBkC,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASqI,OAAQ,CACxC9C,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQrC,CAAAA,CACT,EAEDmC,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASuI,KAAM,CACtChD,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQrC,EACR6C,UAAW,EAAA,CACZ,EAGCnE,GAAAA,MAAAA,EAAcM,SAChBmD,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS+H,QAAS,CACzCxC,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQtD,CAAAA,CACT,EAEDoD,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASsI,MAAO,CACvC/C,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQtD,EACR8D,UAAW,EAAA,CACZ,EAGEpK,EAAQqJ,WACXK,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAASwI,OAAQ,CACxCjD,KAAMH,EAAQpB,QAAAA,CACf,EACDgL,OAAQ9C,EACRsD,UAAW,EAAA,CACZ,CACH,CAGF,OAAItE,GAAYwD,IACdI,EAAItQ,KAAK,IAAI,EAET6M,GAAAA,MAAAA,EAAcoE,gBAChBX,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS6I,cAAe,CAC/CnJ,OAAQiP,CAAAA,CACT,EACDK,OAAQ/B,CAAAA,CACT,EAED6B,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS4I,YAAa,CAC7ClJ,OAAQiP,CAAAA,CACT,EACDK,OAAQjC,EACRyC,UAAW,EAAA,CACZ,KAKFrE,EAAcuE,KAA6BA,GAC3ChB,IACEvD,EAAcwE,KACbA,KAEJb,EAAItQ,KAAK,IAAI,GACR2M,EAAcuE,KAA6BA,GAC9CZ,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS6J,cAAe,CAC/CtE,KAAMH,EAAQpB,QAAAA,CACf,EACDiL,KAAM,mBAAmB7J,EAAQjF,EAAE,EAAA,CACpC,EAGDuO,IACCvD,EAAcwE,KACbA,GAEFb,EAAItQ,KAAK,CACPuQ,KAAMpN,EAAKwB,cAAcnD,EAAS8J,aAAc,CAC9CpK,OAAQiP,CAAAA,CACT,EACDM,KAAM,oBAAoBN,CAAY,EAAA,CACvC,GAIEG,CAAAA,EACN,CACDnO,EACA0C,EACA+B,EACAiG,EACAF,EACAuD,EACAC,EACAhN,EACAuJ,EACAqC,EACA7B,EACAqB,EACAY,EACA3B,EACAmB,EACArB,EACAa,EACAP,EACAF,EACAe,CAAAA,CAAmB,EAGrB,GAAI,CAAC7H,EACH,OAAO,KAGT,IAAIwK,EACFC,EACAC,GACAC,EAEF,MAAMC,EAA0B,CAAA,EAE5BC,IAAO7K,EAAQjF,IAAMkL,IAErBA,EAAa8D,cACZ9D,EAAa6D,WAAa7D,EAAa6E,WAExCF,EAAKxR,KACHI,EAAAA,OAAC,OAAA,CAAkB,UAAU,mBAC3B,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,iBACF,eAAe,uBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,GADQ,SAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,EAEOsM,EAAa8D,YACtBa,EAAKxR,KACHI,EAAAA,OAAC,OAAA,CAAuB,UAAU,mBAChC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,sBACF,eAAe,aAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,GADQ,cAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,EAEOsM,EAAa8E,cACtBH,EAAKxR,KACHI,EAAAA,OAAC,OAAA,CAAwB,UAAU,mBACjC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,iCACF,eAAe,wBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,GADQ,eAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,EAIAsM,EAAaM,UACfqE,EAAKxR,KACHI,EAAAA,OAAC,QAAoB,UAAU,mBAC7B,kBAACI,EAAA,CAAiB,sBAAsB,eAAe,UAAA,EAAvD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAiE,GADzD,WAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAEA,CAAA,EAIAsM,EAAauB,QACfoD,EAAKxR,KACHI,EAAAA,OAAC,QAAkB,UAAU,mBAC3B,kBAACI,EAAA,CAAiB,oBAAoB,eAAe,QAAA,EAArD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAA6D,GADrD,SAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAEA,CAAA,EAIAsM,EAAaoE,iBACfO,EAAKxR,KACHI,EAAAA,OAAC,OAAA,CAA2B,UAAU,mBACpC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,0BACF,eAAe,iBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,GADQ,kBAAV,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,IAKFsM,GAAAA,MAAAA,EAAc6E,WAAa7E,GAAAA,MAAAA,EAAc6D,aAC3CW,EACEjR,EAAAA,OAACuC,EAAA,CACC,KAAMkK,EAAaoB,UAAY,OAAS,SACxC,cACEpB,EAAaoB,UAAY2D,GAA0BC,GAErD,OAAQhF,EAAaoB,UACrB,MAAO9K,EAAKwB,cACVkI,EAAaoB,UACTzM,EAASiJ,qBACTjJ,EAASgJ,oBACb,CAAEzD,KAAMH,EAAQpB,QAAAA,CAAS,EAE3B,QAASwI,EAAAA,EAZX,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAzN,MAAA,GAiBA,UAAW8B,UACbkP,EACEnR,EAAAA,OAACuC,EAAA,CACC,UAAU,WACV,KAAK,GACL,cAAemP,GACf,MAAO3O,EAAKwB,cAAcnD,EAASyI,MAAO,CACxClD,KAAMH,EAAQpB,QAAAA,CACf,EACD,QAASgK,EAAAA,EAPX,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAjP,MAAA,EAWFgR,EACEnR,EAAAA,OAACyB,GAAA,CACC,UAAU,WACV,MAAOsB,EAAKwB,cAAcnD,EAAS0I,IAAI,EACvC,MAAOtD,EAAQ6I,GAAAA,EAHjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAlP,MAAA,EAQAsM,GAAAA,MAAAA,EAAcM,SAChBiE,EACEhR,EAAAA,OAAC2R,GAAA,CACC,KAAM5O,EAAKwB,cAAcnD,EAAS+H,QAAS,CACzCxC,KAAMH,EAAQpB,QAAAA,CACf,EACD,QAAS0H,CAAAA,EAJX,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAA3M,MAAA,EAQF6Q,EAAYhR,EAAAA,OAAC4R,IAAa,UAAAnN,CAAA,EAAd,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAtE,MAAmC,EAG7CqG,EAAQqL,OAAS,EAACpF,GAAAA,MAAAA,EAAc6D,aAClCU,EAAY,IAGVxK,EAAQsL,SACVZ,GACElR,EAAAA,OAACC,EAAA,CACC,GAAG,OACH,KAAM8R,GACN,MAAOhP,EAAKwB,cAAcnD,EAASkI,cAAc,CAAA,EAHnD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAnJ,MAAA,GAQJ,MAAM6R,GAAU,CAAEpL,OAAQJ,EAAQyL,cAAAA,EAC5BC,GAAkB,CAAEtL,OAAQJ,EAAQoB,iBAAAA,EACpCuK,GAAS3L,EAAQ2L,OACjBC,GAAU,CAAC5L,EAAQmB,KAAK0K,SAAS,GAAG,EACpCjN,GAAWoB,EAAQmB,KAAK2G,MAAM,GAAG,EAAE,CAAC,EACpCxN,EAASsR,GAAUxG,EAAcpF,EAAQmB,KAAK2G,MAAM,GAAG,EAAE,CAAC,EAC1DgE,GAAc,CAAC9L,EAAQ+L,QAEvBC,EAAS,CAAA,EAEf,OAAIhM,EAAQiM,IACVD,EAAO5S,KAAKI,EAAAA,OAACkB,GAAA,CAAA,EAAmB,YAApB,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAf,MAA+B,CAAG,EACrCqG,EAAQkM,OACjBF,EAAO5S,KAAKI,EAAAA,OAACgB,GAAA,CAAA,EAAe,cAAhB,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAb,MAA6B,CAAG,EAG9CqG,EAAQmM,MAAMlD,QAASmD,GAAS,CAC9BJ,EAAO5S,KACLI,EAAAA,OAACU,EAAA,CAEC,MAAOV,EAAAA,OAAC,OAAA,CAAM4S,SAAAA,EAAKhO,IAAI,MAAM,CAAA,EAAtB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAzE,MAAwB,EAAA,OAC/BW,EACA,OAAQ8R,EAAKhO,IAAI,IAAI,CAAA,EAHhB,cAAcgO,EAAKhO,IAAI,IAAI,CAAC,GADnC,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAzE,MAAA,CAIyB,CAE3B,CACD,EAGCH,EAAAA,OAAC,MAAA,CAAI,UAAU,2BACZ,SAAA,CAAA,CAAC0M,GAAUlG,EAAQqM,UAAY7S,EAAAA,OAAC2I,GAAA,CAAA,EAAD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAxI,MAAa,EAC5C,CAACuM,GAAUlG,EAAQqL,OAClB7R,EAAAA,OAAC4I,GAAA,CAAU,UAAWpC,EAAQjF,GAAI,gBAAiBiF,EAAQqL,KAAAA,EAA3D,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAA1R,MAAiE,EAGnEH,EAAAA,OAAC,MAAA,CACC,UAAWwC,EAAW,kBAAmB,CACvCsQ,SAAU,CAAC,CAACtM,EAAQqL,KAAAA,CACrB,EACD,aAAcvC,GACd,aAAcM,GAEb,SAAA,CAAA,EAAEC,GAAanD,GAAUlG,EAAQqL,SAChCpF,GAAAA,YAAAA,EAAc8E,eACZvR,EAAAA,OAACuH,IAA2B,QAAAf,CAAA,EAA5B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAArG,MAA6C,EAGjDH,EAAAA,OAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,SAAC,MAAA,CAAI,UAAU,wBAAyBoR,SAAAA,CAAAA,EAAxC,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAjR,MAA6C,EAE5C,EAAE0P,GAAanD,IACd1M,EAAAA,OAAC,MAAA,CACC,IAAKuP,EAAc/I,EAAQuM,OAASvM,EAAQwM,cAC5C,IAAI,GACJ,UAAU,UAAA,EAHZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA7S,MAAA,CAGsB,CAAA,EAP1B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAUA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAA,EAAAA,OAAC,IAAA,CACC,UAAU,SACV,KAAMwG,EAAQ0I,OACd,IAAI,WACJ,OAAO,SACP,QAASF,GAET,SAAAhP,EAAAA,OAAC0I,GAAA,CACC,QAASmH,GAAanD,EAASrJ,OAAYmD,EAC3C,KAAM,EAAA,EAFR,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAArG,MAAA,CAEW,EATb,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EAaAH,EAAAA,OAAC,MAAA,CAAI,UAAU,iCACZ,SAAA,CAAA,CAAC0M,GAAUuE,EACX,CAACvE,GAAUyE,EACX1M,IAAc4M,GACbrR,EAAAA,OAACiT,GAAA,CACC,SAAUjD,EAAK5H,SAAW,EAC1B,MAAO4H,EACP,KAAK,aACL,cAAekD,EAAAA,EAJjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA/S,MAAA,EAOD,CAACuM,GAAUsE,CAAAA,CAAAA,EAXd,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA7Q,MAYA,CAAA,CAAA,EA1BF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MA2BA,EAEAH,SAAC,MAAA,CAAI,UAAU,8BACb,kBAAC,KAAA,CACC,SAAA,CAAAA,EAAAA,OAAC,OAAA,CAAK,wBAAyBkS,EAAAA,EAA/B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA/R,MAA+C,WAC9C,QAAA,CACC,SAAA,CAAAH,SAAC,OAAA,CAAI,SAAA,CAAA,IACDoF,GACFpF,EAAAA,OAAC,OAAA,CAAK,UAAU,YAAY,SAAA,CAAA,IAAEc,CAAAA,CAAAA,EAA9B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAX,MAAqC,CAAA,CAAA,EAFvC,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAGA,EACAH,EAAAA,OAACmF,GAAA,CACC,SAAUC,IAAY,GACtB,OAAQtE,GAAU,GAClB,OAAQuQ,IAAO7K,EAAQjF,EAAAA,EAHzB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAApB,MAAA,EAKC+Q,EAAAA,CAAAA,EAVH,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA/Q,MAWA,CAAA,CAAA,EAbF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAcA,CAAA,EAfF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAgBA,EAECqS,EAAOpK,OAAS,YACd,MAAA,CAAI,UAAU,0BAA2BoK,SAAAA,GAA1C,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAArS,MAAiD,EAGlDqG,EAAQjF,KAAO8P,GAAM/E,GAAY,EAAEuD,GAAanD,IAC/C1M,EAAAA,OAACqI,GAAA,CAAkB,UAAA5D,CAAA,EAAnB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAtE,MAAwC,EAGzC,EAAE0P,GAAanD,IACd1M,EAAAA,OAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CACC,UAAU,uBACV,eAAgB4M,EAEfpG,SAAAA,CAAAA,EAAQjF,KAAO8P,GAAM/E,GACpBtM,EAAAA,OAACwE,IAAY,UAAAC,CAAA,EAAb,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAtE,MAAkC,EAGnCqG,EAAQzB,KAAKqD,OAAS,GAAK5B,EAAQzB,OAAS,WAC3C/E,EAAAA,OAAC,MAAA,CACC,UAAU,qCACV,wBAAyBgS,EAAAA,EAF3B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA7R,MAAA,EAMFH,EAAAA,OAAC,MAAA,CAAI,UAAU,0BACb,SAAA,CAAAA,SAAC,KAAA,CACC,SAAA,CAAAA,SAAC,KAAA,CACC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,uBACF,eAAe,QAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAD,MAAA,CAEyB,EAH3B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,WACC,KAAA,CACC,SAAAH,EAAAA,OAACmT,GAAA,CACC,MAAO3M,EAAQ4M,WACf,KAAK,UACL,MAAM,QACN,IAAI,SAAA,EAJN,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAjT,MAAA,CAIe,EALjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAOA,CAAA,CAAA,EAdF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAeA,EAECgS,GAAO1J,IAAI,CAAC4K,EAAMC,IACjBtT,EAAAA,OAAC,KAAA,CAEC,UAAWwC,EAAW,CACpB+Q,SAAUF,EAAKG,WAAAA,CAChB,EAED,SAAA,CAAAxT,EAAAA,OAAC,KAAA,CACC,wBAAyB,CACvB4G,OAAQyM,EAAKI,cAAAA,EAEf,MAAOJ,EAAK1M,KACZ,UAAU,WAAA,EALZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAxG,MAAA,WAQC,KAAA,CAAG,UAAU,YAAY,MAAOkT,EAAKK,aAAe,GAClDL,SAAAA,CAAAA,EAAKG,aACJxT,EAAAA,OAAC,OAAA,CACC,MAAO+C,EAAKwB,cAAcnD,EAASiI,eAAgB,CACjDsK,KAAM5Q,EAAK6Q,WACTP,EAAKG,YACL1H,EAAAA,CACF,CACD,EAED,SAAA9L,EAAAA,OAACC,EAAA,CACC,GAAG,QACH,KAAM4G,GACN,UAAU,gBAAA,EAHZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA1G,MAAA,CAG4B,EAX9B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EAcC,IACHH,EAAAA,OAAC,OAAA,CACC,wBAAyB,CACvB4G,OAAQyM,EAAKQ,eAAAA,CACf,EAHF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA1T,MAAA,CAGI,CAAA,EApBN,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAsBA,CAAA,CAAA,EAnCKmT,EADP,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAnT,MAAA,CAqCA,CACD,CAAA,EAzDH,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MA0DA,CAAA,CAAA,EAzEF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EA4EAH,EAAAA,OAAC,MAAA,CAAI,UAAU,gCACb,SAAA,CAAAA,EAAAA,OAAC8T,EAAA,CACC,GAAI,KAAKtN,EAAQmB,IAAI,GACrB,MAAO5E,EAAKgR,aAAavN,EAAQwN,cAAc,EAE/C,SAAAhU,EAAAA,OAACiU,EAAA,CACC,MAAOzN,EAAQwN,eACf,SAAUE,EAAAA,EAFZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAA/T,MAAA,CAE4B,EAN9B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EAUAH,EAAAA,OAAC8T,EAAA,CACC,MAAA,GACA,GAAI,KAAKtN,EAAQmB,IAAI,aACrB,MAAO5E,EAAKgR,aAAavN,EAAQ2N,eAAe,EAEhD,SAAAnU,EAAAA,OAACiU,EAAA,CACC,MAAOzN,EAAQ2N,gBACf,SAAUC,EAAAA,EAFZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAjU,MAAA,CAE6B,EAP/B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,EAWAH,EAAAA,OAAC8T,EAAA,CACC,MAAA,GACA,GAAI,KAAKtN,EAAQmB,IAAI,aACrB,MAAO5E,EAAKgR,aAAavN,EAAQ6N,eAAe,EAEhD,SAAArU,EAAAA,OAACiU,EAAA,CACC,MAAOzN,EAAQ6N,gBACf,SAAUC,EAAAA,EAFZ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAnU,MAAA,CAE6B,EAP/B,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAAA,CASA,CAAA,EA/BF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAgCA,CAAA,CAAA,EA7GF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MA8GA,CAAA,CAAA,EAvKJ,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAyKA,CAAA,CAAA,EAjMF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAAA,EAoMC,EAAEkM,GAAYK,IACb1M,EAAAA,OAAC,MAAA,CAAI,UAAU,4BACb,SAAA,CAAAA,SAAC8T,EAAA,CAAQ,MAAK,GAAC,GAAI,KAAKtN,EAAQmB,IAAI,YAClC,SAAA3H,EAAAA,OAACI,EAAA,CAAiB,sBAAsB,eAAe,UAAA,EAAvD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAD,MAAiE,CAAA,EADnE,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAA,MAEA,EACAH,SAAC8T,EAAA,CAAQ,MAAK,GAAC,GAAI,KAAKtN,EAAQmB,IAAI,GAClC,SAAA3H,EAAAA,OAACI,EAAA,CAAiB,mBAAmB,eAAe,OAAA,EAApD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAD,MAA2D,CAAA,EAD7D,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAA,MAEA,EACAH,EAAAA,OAAC8T,GAAQ,MAAK,GAAC,GAAI,KAAKtN,EAAQmB,IAAI,gBAClC,SAAA3H,EAAAA,OAACI,EAAA,CACC,GAAE,6BACF,eAAe,mBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAD,MAAA,CAEoC,EAHtC,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAA,MAKA,EACAH,SAAC8T,EAAA,CAAQ,MAAK,GAAC,GAAI,KAAKtN,EAAQmB,IAAI,SAClC,SAAA3H,EAAAA,OAACI,EAAA,CAAiB,mBAAmB,eAAe,OAAA,EAApD,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAD,MAA2D,CAAA,EAD7D,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,EAAA,EAAAA,MAEA,CAAA,CAAA,EAfF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,CAAA,EAAAA,MAgBA,WAGDoU,GAAA,CACC,SAAA,CAAAvU,SAAC,QAAA,CAAOyL,SAAAA,GAAiBjF,CAAO,CAAA,EAAhC,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,CAAA,EAAArG,MAAkC,EAClCH,EAAAA,OAAC,OAAA,CACC,KAAK,SACL,QAASoS,IAAWE,GAAc,MAAQ,SAAA,EAF5C,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,CAAA,EAAAnS,MAAA,WAIC,OAAA,CAAK,IAAI,YAAY,KAAMqG,EAAQ6I,GAAAA,EAApC,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,CAAA,EAAAlP,MAAwC,CAAA,CAAA,EAN1C,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,KAAA,aAAA,CAAA,EAAAA,MAOA,CAAA,CAAA,EArOF,OAAA,GAAA,CAAA,SAAA,yHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAsOA,CAEJ,EClgCaqU,GAAsDA,CAAC,CAClE/P,UAAAA,CACF,IAAM,CACJ,MAAM1C,EAAWC,EAAAA,EACXyS,EAASlV,EAAAA,YAAY,IAAM,CAC/BwC,EAAS2S,GAAc,CAAEnT,GAAIkD,CAAAA,CAAW,CAAC,CAAA,EACxC,CAAC1C,EAAU0C,CAAS,CAAC,EAExB,OACEzE,EAAAA,OAAC,MAAA,CAAI,UAAU,uBACb,SAAA,CAAAA,SAAC,IAAA,CACC,SAAAA,EAAAA,OAACI,EAAA,CACC,GAAE,6BACF,eAAe,8DACf,OAAQ,CAAEU,OAAAA,CAAAA,CAAO,EAHnB,OAAA,GAAA,CAAA,SAAA,+HAAA,WAAA,GAAA,aAAA,CAAA,EAAAX,MAAA,CAGqB,EAJvB,OAAA,GAAA,CAAA,SAAA,+HAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAMA,EACAH,EAAAA,OAAC2R,GAAA,CAAO,QAAS8C,EACf,SAAAzU,EAAAA,OAACI,EAAA,CACC,GAAE,8BACF,eAAe,qBAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,+HAAA,WAAA,GAAA,aAAA,CAAA,EAAAD,MAAA,CAEsC,EAHxC,OAAA,GAAA,CAAA,SAAA,+HAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,CAAA,EAbF,OAAA,GAAA,CAAA,SAAA,+HAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAcA,CAEJ"}