{"version":3,"file":"annual_report_modal-Dxn39VgW.js","sources":["../../app/javascript/images/archetypes/booster.png","../../app/javascript/images/archetypes/lurker.png","../../app/javascript/images/archetypes/oracle.png","../../app/javascript/images/archetypes/pollster.png","../../app/javascript/images/archetypes/replier.png","../../app/javascript/mastodon/features/annual_report/archetype.tsx","../../app/javascript/mastodon/features/annual_report/followers.tsx","../../app/javascript/mastodon/features/annual_report/highlighted_post.tsx","../../app/javascript/mastodon/features/annual_report/most_used_hashtag.tsx","../../app/javascript/material-icons/400-24px/chat_bubble.svg?react","../../app/javascript/mastodon/features/annual_report/new_posts.tsx","../../app/javascript/mastodon/features/annual_report/percentile.tsx","../../app/javascript/mastodon/features/annual_report/index.tsx","../../app/javascript/mastodon/features/ui/components/annual_report_modal.tsx"],"sourcesContent":["export default \"__VITE_ASSET__DZPJR6Sl__\"","export default \"__VITE_ASSET__BvsmLUTI__\"","export default \"__VITE_ASSET__Betr$l1H__\"","export default \"__VITE_ASSET__WlTljEm___\"","export default \"__VITE_ASSET__Bpqfnmqx__\"","import { FormattedMessage } from 'react-intl';\n\nimport booster from '@/images/archetypes/booster.png';\nimport lurker from '@/images/archetypes/lurker.png';\nimport oracle from '@/images/archetypes/oracle.png';\nimport pollster from '@/images/archetypes/pollster.png';\nimport replier from '@/images/archetypes/replier.png';\nimport type { Archetype as ArchetypeData } from 'mastodon/models/annual_report';\n\nexport const Archetype: React.FC<{\n  data: ArchetypeData;\n}> = ({ data }) => {\n  let illustration, label;\n\n  switch (data) {\n    case 'booster':\n      illustration = booster;\n      label = (\n        <FormattedMessage\n          id='annual_report.summary.archetype.booster'\n          defaultMessage='The cool-hunter'\n        />\n      );\n      break;\n    case 'replier':\n      illustration = replier;\n      label = (\n        <FormattedMessage\n          id='annual_report.summary.archetype.replier'\n          defaultMessage='The social butterfly'\n        />\n      );\n      break;\n    case 'pollster':\n      illustration = pollster;\n      label = (\n        <FormattedMessage\n          id='annual_report.summary.archetype.pollster'\n          defaultMessage='The pollster'\n        />\n      );\n      break;\n    case 'lurker':\n      illustration = lurker;\n      label = (\n        <FormattedMessage\n          id='annual_report.summary.archetype.lurker'\n          defaultMessage='The lurker'\n        />\n      );\n      break;\n    case 'oracle':\n      illustration = oracle;\n      label = (\n        <FormattedMessage\n          id='annual_report.summary.archetype.oracle'\n          defaultMessage='The oracle'\n        />\n      );\n      break;\n  }\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__archetype'>\n      <div className='annual-report__summary__archetype__label'>{label}</div>\n      <img src={illustration} alt='' />\n    </div>\n  );\n};\n","import { FormattedMessage, FormattedNumber } from 'react-intl';\n\nimport { Sparklines, SparklinesCurve } from 'react-sparklines';\n\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport type { TimeSeriesMonth } from 'mastodon/models/annual_report';\n\nexport const Followers: React.FC<{\n  data: TimeSeriesMonth[];\n  total?: number;\n}> = ({ data, total }) => {\n  const change = data.reduce((sum, item) => sum + item.followers, 0);\n\n  const cumulativeGraph = data.reduce(\n    (newData, item) => [\n      ...newData,\n      item.followers + (newData[newData.length - 1] ?? 0),\n    ],\n    [0],\n  );\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__followers'>\n      <Sparklines data={cumulativeGraph} margin={0}>\n        <svg>\n          <defs>\n            <linearGradient id='gradient' x1='0%' y1='0%' x2='0%' y2='100%'>\n              <stop\n                offset='0%'\n                stopColor='var(--sparkline-gradient-top)'\n                stopOpacity='1'\n              />\n              <stop\n                offset='100%'\n                stopColor='var(--sparkline-gradient-bottom)'\n                stopOpacity='0'\n              />\n            </linearGradient>\n          </defs>\n        </svg>\n\n        <SparklinesCurve style={{ fill: 'none' }} />\n      </Sparklines>\n\n      <div className='annual-report__summary__followers__foreground'>\n        <div className='annual-report__summary__followers__number'>\n          {change > -1 ? '+' : '-'}\n          <FormattedNumber value={change} />\n        </div>\n\n        <div className='annual-report__summary__followers__label'>\n          <span>\n            <FormattedMessage\n              id='annual_report.summary.followers.followers'\n              defaultMessage='followers'\n            />\n          </span>\n          <div className='annual-report__summary__followers__footnote'>\n            <FormattedMessage\n              id='annual_report.summary.followers.total'\n              defaultMessage='{count} total'\n              values={{ count: <ShortNumber value={total ?? 0} /> }}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable @typescript-eslint/no-unsafe-return,\n                  @typescript-eslint/no-explicit-any,\n                  @typescript-eslint/no-unsafe-assignment */\n\nimport { useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { toggleStatusSpoilers } from 'mastodon/actions/statuses';\nimport { DetailedStatus } from 'mastodon/features/status/components/detailed_status';\nimport { me } from 'mastodon/initial_state';\nimport type { TopStatuses } from 'mastodon/models/annual_report';\nimport { makeGetStatus, makeGetPictureInPicture } from 'mastodon/selectors';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nconst getStatus = makeGetStatus() as unknown as (arg0: any, arg1: any) => any;\nconst getPictureInPicture = makeGetPictureInPicture() as unknown as (\n  arg0: any,\n  arg1: any,\n) => any;\n\nexport const HighlightedPost: React.FC<{\n  data: TopStatuses;\n}> = ({ data }) => {\n  let statusId, label;\n\n  if (data.by_reblogs) {\n    statusId = data.by_reblogs;\n    label = (\n      <FormattedMessage\n        id='annual_report.summary.highlighted_post.by_reblogs'\n        defaultMessage='most boosted post'\n      />\n    );\n  } else if (data.by_favourites) {\n    statusId = data.by_favourites;\n    label = (\n      <FormattedMessage\n        id='annual_report.summary.highlighted_post.by_favourites'\n        defaultMessage='most favourited post'\n      />\n    );\n  } else {\n    statusId = data.by_replies;\n    label = (\n      <FormattedMessage\n        id='annual_report.summary.highlighted_post.by_replies'\n        defaultMessage='post with the most replies'\n      />\n    );\n  }\n\n  const dispatch = useAppDispatch();\n  const domain = useAppSelector((state) => state.meta.get('domain'));\n  const status = useAppSelector((state) =>\n    statusId ? getStatus(state, { id: statusId }) : undefined,\n  );\n  const pictureInPicture = useAppSelector((state) =>\n    statusId ? getPictureInPicture(state, { id: statusId }) : undefined,\n  );\n  const account = useAppSelector((state) =>\n    me ? state.accounts.get(me) : undefined,\n  );\n\n  const handleToggleHidden = useCallback(() => {\n    dispatch(toggleStatusSpoilers(statusId));\n  }, [dispatch, statusId]);\n\n  if (!status) {\n    return (\n      <div className='annual-report__bento__box annual-report__summary__most-boosted-post' />\n    );\n  }\n\n  const displayName = (\n    <span className='display-name'>\n      <strong className='display-name__html'>\n        <FormattedMessage\n          id='annual_report.summary.highlighted_post.possessive'\n          defaultMessage=\"{name}'s\"\n          values={{\n            name: account && (\n              <bdi\n                dangerouslySetInnerHTML={{ __html: account.display_name_html }}\n              />\n            ),\n          }}\n        />\n      </strong>\n      <span className='display-name__account'>{label}</span>\n    </span>\n  );\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__most-boosted-post'>\n      <DetailedStatus\n        status={status}\n        pictureInPicture={pictureInPicture}\n        domain={domain}\n        onToggleHidden={handleToggleHidden}\n        overrideDisplayName={displayName}\n      />\n    </div>\n  );\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport type { NameAndCount } from 'mastodon/models/annual_report';\n\nexport const MostUsedHashtag: React.FC<{\n  data: NameAndCount[];\n}> = ({ data }) => {\n  const hashtag = data[0];\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__most-used-hashtag'>\n      <div className='annual-report__summary__most-used-hashtag__hashtag'>\n        {hashtag ? (\n          <>#{hashtag.name}</>\n        ) : (\n          <FormattedMessage\n            id='annual_report.summary.most_used_hashtag.none'\n            defaultMessage='None'\n          />\n        )}\n      </div>\n      <div className='annual-report__summary__most-used-hashtag__label'>\n        <FormattedMessage\n          id='annual_report.summary.most_used_hashtag.most_used_hashtag'\n          defaultMessage='most used hashtag'\n        />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nconst SvgChatBubble = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M80-80v-720q0-33 23.5-56.5T160-880h640q33 0 56.5 23.5T880-800v480q0 33-23.5 56.5T800-240H240L80-80Zm126-240h594v-480H160v525l46-45Zm-46 0v-480 480Z\" }));\nexport default SvgChatBubble;\n","import { FormattedNumber, FormattedMessage } from 'react-intl';\n\nimport ChatBubbleIcon from '@/material-icons/400-24px/chat_bubble.svg?react';\nimport type { TimeSeriesMonth } from 'mastodon/models/annual_report';\n\nexport const NewPosts: React.FC<{\n  data: TimeSeriesMonth[];\n}> = ({ data }) => {\n  const posts = data.reduce((sum, item) => sum + item.statuses, 0);\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__new-posts'>\n      <svg width={500} height={500}>\n        <defs>\n          <pattern\n            id='posts'\n            x='0'\n            y='0'\n            width='32'\n            height='35'\n            patternUnits='userSpaceOnUse'\n          >\n            <circle cx='12' cy='12' r='12' fill='var(--lime)' />\n            <ChatBubbleIcon\n              fill='var(--indigo-1)'\n              x='4'\n              y='4'\n              width='16'\n              height='16'\n            />\n          </pattern>\n        </defs>\n\n        <rect\n          width={500}\n          height={500}\n          fill='url(#posts)'\n          style={{ opacity: 0.2 }}\n        />\n      </svg>\n\n      <div className='annual-report__summary__new-posts__number'>\n        <FormattedNumber value={posts} />\n      </div>\n      <div className='annual-report__summary__new-posts__label'>\n        <FormattedMessage\n          id='annual_report.summary.new_posts.new_posts'\n          defaultMessage='new posts'\n        />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable react/jsx-no-useless-fragment */\nimport { FormattedMessage, FormattedNumber } from 'react-intl';\n\nimport { domain } from 'mastodon/initial_state';\nimport type { Percentiles } from 'mastodon/models/annual_report';\n\nexport const Percentile: React.FC<{\n  data: Percentiles;\n}> = ({ data }) => {\n  const percentile = data.statuses;\n\n  return (\n    <div className='annual-report__bento__box annual-report__summary__percentile'>\n      <FormattedMessage\n        id='annual_report.summary.percentile.text'\n        defaultMessage='<topLabel>That puts you in the top</topLabel><percentage></percentage><bottomLabel>of {domain} users.</bottomLabel>'\n        values={{\n          topLabel: (str) => (\n            <div className='annual-report__summary__percentile__label'>\n              {str}\n            </div>\n          ),\n          percentage: () => (\n            <div className='annual-report__summary__percentile__number'>\n              <FormattedNumber\n                value={Math.min(percentile, 99) / 100}\n                style='percent'\n                maximumFractionDigits={percentile < 1 ? 1 : 0}\n              />\n            </div>\n          ),\n          bottomLabel: (str) => (\n            <div>\n              <div className='annual-report__summary__percentile__label'>\n                {str}\n              </div>\n\n              {percentile < 6 && (\n                <div className='annual-report__summary__percentile__footnote'>\n                  <FormattedMessage\n                    id='annual_report.summary.percentile.we_wont_tell_bernie'\n                    defaultMessage=\"We won't tell Bernie.\"\n                  />\n                </div>\n              )}\n            </div>\n          ),\n\n          domain,\n        }}\n      >\n        {(message) => <>{message}</>}\n      </FormattedMessage>\n    </div>\n  );\n};\n","import { useState, useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport {\n  importFetchedStatuses,\n  importFetchedAccounts,\n} from 'mastodon/actions/importer';\nimport { apiRequestGet, apiRequestPost } from 'mastodon/api';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { me } from 'mastodon/initial_state';\nimport type { Account } from 'mastodon/models/account';\nimport type { AnnualReport as AnnualReportData } from 'mastodon/models/annual_report';\nimport type { Status } from 'mastodon/models/status';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { Archetype } from './archetype';\nimport { Followers } from './followers';\nimport { HighlightedPost } from './highlighted_post';\nimport { MostUsedHashtag } from './most_used_hashtag';\nimport { NewPosts } from './new_posts';\nimport { Percentile } from './percentile';\n\ninterface AnnualReportResponse {\n  annual_reports: AnnualReportData[];\n  accounts: Account[];\n  statuses: Status[];\n}\n\nexport const AnnualReport: React.FC<{\n  year: string;\n}> = ({ year }) => {\n  const [response, setResponse] = useState<AnnualReportResponse | null>(null);\n  const [loading, setLoading] = useState(false);\n  const currentAccount = useAppSelector((state) =>\n    me ? state.accounts.get(me) : undefined,\n  );\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n\n    apiRequestGet<AnnualReportResponse>(`v1/annual_reports/${year}`)\n      .then((data) => {\n        dispatch(importFetchedStatuses(data.statuses));\n        dispatch(importFetchedAccounts(data.accounts));\n\n        setResponse(data);\n        setLoading(false);\n\n        return apiRequestPost(`v1/annual_reports/${year}/read`);\n      })\n      .catch(() => {\n        setLoading(false);\n      });\n  }, [dispatch, year, setResponse, setLoading]);\n\n  if (loading) {\n    return <LoadingIndicator />;\n  }\n\n  const report = response?.annual_reports[0];\n\n  if (!report) {\n    return null;\n  }\n\n  return (\n    <div className='annual-report'>\n      <div className='annual-report__header'>\n        <h1>\n          <FormattedMessage\n            id='annual_report.summary.thanks'\n            defaultMessage='Thanks for being part of Mastodon!'\n          />\n        </h1>\n        <p>\n          <FormattedMessage\n            id='annual_report.summary.here_it_is'\n            defaultMessage='Here is your {year} in review:'\n            values={{ year: report.year }}\n          />\n        </p>\n      </div>\n\n      <div className='annual-report__bento annual-report__summary'>\n        <Archetype data={report.data.archetype} />\n        <HighlightedPost data={report.data.top_statuses} />\n        <Followers\n          data={report.data.time_series}\n          total={currentAccount?.followers_count}\n        />\n        <MostUsedHashtag data={report.data.top_hashtags} />\n        <Percentile data={report.data.percentiles} />\n        <NewPosts data={report.data.time_series} />\n      </div>\n    </div>\n  );\n};\n","import { useEffect } from 'react';\n\nimport { AnnualReport } from 'mastodon/features/annual_report';\n\nconst AnnualReportModal: React.FC<{\n  year: string;\n  onChangeBackgroundColor: (arg0: string) => void;\n}> = ({ year, onChangeBackgroundColor }) => {\n  useEffect(() => {\n    onChangeBackgroundColor('var(--indigo-1)');\n  }, [onChangeBackgroundColor]);\n\n  return (\n    <div className='modal-root__modal annual-report-modal'>\n      <AnnualReport year={year} />\n    </div>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default AnnualReportModal;\n"],"names":["booster","lurker","oracle","pollster","replier","Archetype","data","illustration","label","jsxDEV","FormattedMessage","this","Followers","total","change","reduce","sum","item","followers","cumulativeGraph","newData","length","Sparklines","SparklinesCurve","fill","FormattedNumber","count","ShortNumber","getStatus","makeGetStatus","getPictureInPicture","makeGetPictureInPicture","HighlightedPost","statusId","by_reblogs","by_favourites","by_replies","dispatch","useAppDispatch","domain","useAppSelector","state","meta","get","status","id","undefined","pictureInPicture","account","me","accounts","handleToggleHidden","useCallback","toggleStatusSpoilers","displayName","name","__html","display_name_html","DetailedStatus","MostUsedHashtag","hashtag","Fragment","SvgChatBubble","props","React.createElement","NewPosts","posts","statuses","ChatBubbleIcon","opacity","Percentile","percentile","topLabel","str","percentage","Math","min","bottomLabel","message","AnnualReport","year","response","setResponse","useState","loading","setLoading","currentAccount","useEffect","apiRequestGet","then","importFetchedStatuses","importFetchedAccounts","apiRequestPost","catch","LoadingIndicator","report","annual_reports","archetype","top_statuses","time_series","followers_count","top_hashtags","percentiles","AnnualReportModal","onChangeBackgroundColor"],"mappings":"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"}