{"version":3,"file":"directory-index-CQaXXkJ5.js","sources":["../../app/javascript/mastodon/features/directory/components/account_card.tsx","../../app/javascript/mastodon/features/directory/index.tsx"],"sourcesContent":["import type { MouseEventHandler } from 'react';\nimport { useCallback } from 'react';\n\nimport { FormattedMessage, defineMessages, useIntl } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\n\nimport {\n  followAccount,\n  unblockAccount,\n  unmuteAccount,\n} from 'mastodon/actions/accounts';\nimport { openModal } from 'mastodon/actions/modal';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { Button } from 'mastodon/components/button';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { autoPlayGif, me } from 'mastodon/initial_state';\nimport type { Account } from 'mastodon/models/account';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nconst messages = defineMessages({\n  unfollow: { id: 'account.unfollow', defaultMessage: 'Unfollow' },\n  follow: { id: 'account.follow', defaultMessage: 'Follow' },\n  cancel_follow_request: {\n    id: 'account.cancel_follow_request',\n    defaultMessage: 'Withdraw follow request',\n  },\n  requested: {\n    id: 'account.requested',\n    defaultMessage: 'Awaiting approval. Click to cancel follow request',\n  },\n  unblock: { id: 'account.unblock_short', defaultMessage: 'Unblock' },\n  unmute: { id: 'account.unmute_short', defaultMessage: 'Unmute' },\n  edit_profile: { id: 'account.edit_profile', defaultMessage: 'Edit profile' },\n});\n\nconst getAccount = makeGetAccount();\n\nexport const AccountCard: React.FC<{ accountId: string }> = ({ accountId }) => {\n  const intl = useIntl();\n  const account = useAppSelector((s) => getAccount(s, accountId));\n  const dispatch = useAppDispatch();\n\n  const handleMouseEnter = useCallback<MouseEventHandler>(\n    ({ currentTarget }) => {\n      if (autoPlayGif) {\n        return;\n      }\n      const emojis =\n        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n\n      emojis.forEach((emoji) => {\n        const original = emoji.getAttribute('data-original');\n        if (original) emoji.src = original;\n      });\n    },\n    [],\n  );\n\n  const handleMouseLeave = useCallback<MouseEventHandler>(\n    ({ currentTarget }) => {\n      if (autoPlayGif) {\n        return;\n      }\n\n      const emojis =\n        currentTarget.querySelectorAll<HTMLImageElement>('.custom-emoji');\n\n      emojis.forEach((emoji) => {\n        const staticUrl = emoji.getAttribute('data-static');\n        if (staticUrl) emoji.src = staticUrl;\n      });\n    },\n    [],\n  );\n\n  const handleFollow = useCallback(() => {\n    if (!account) return;\n\n    if (\n      account.getIn(['relationship', 'following']) ||\n      account.getIn(['relationship', 'requested'])\n    ) {\n      dispatch(\n        openModal({ modalType: 'CONFIRM_UNFOLLOW', modalProps: { account } }),\n      );\n    } else {\n      dispatch(followAccount(account.get('id')));\n    }\n  }, [account, dispatch]);\n\n  const handleBlock = useCallback(() => {\n    if (account?.relationship?.blocking) {\n      dispatch(unblockAccount(account.get('id')));\n    }\n  }, [account, dispatch]);\n\n  const handleMute = useCallback(() => {\n    if (account?.relationship?.muting) {\n      dispatch(unmuteAccount(account.get('id')));\n    }\n  }, [account, dispatch]);\n\n  const handleEditProfile = useCallback(() => {\n    window.open('/settings/profile', '_blank');\n  }, []);\n\n  if (!account) return null;\n\n  let actionBtn;\n\n  if (me !== account.get('id')) {\n    if (!account.get('relationship')) {\n      // Wait until the relationship is loaded\n      actionBtn = '';\n    } else if (account.getIn(['relationship', 'requested'])) {\n      actionBtn = (\n        <Button\n          text={intl.formatMessage(messages.cancel_follow_request)}\n          title={intl.formatMessage(messages.requested)}\n          onClick={handleFollow}\n        />\n      );\n    } else if (account.getIn(['relationship', 'muting'])) {\n      actionBtn = (\n        <Button\n          text={intl.formatMessage(messages.unmute)}\n          onClick={handleMute}\n        />\n      );\n    } else if (!account.getIn(['relationship', 'blocking'])) {\n      actionBtn = (\n        <Button\n          disabled={account.relationship?.blocked_by}\n          className={classNames({\n            'button--destructive': account.getIn(['relationship', 'following']),\n          })}\n          text={intl.formatMessage(\n            account.getIn(['relationship', 'following'])\n              ? messages.unfollow\n              : messages.follow,\n          )}\n          onClick={handleFollow}\n        />\n      );\n    } else if (account.getIn(['relationship', 'blocking'])) {\n      actionBtn = (\n        <Button\n          text={intl.formatMessage(messages.unblock)}\n          onClick={handleBlock}\n        />\n      );\n    }\n  } else {\n    actionBtn = (\n      <Button\n        text={intl.formatMessage(messages.edit_profile)}\n        onClick={handleEditProfile}\n      />\n    );\n  }\n\n  return (\n    <div className='account-card'>\n      <Link to={`/@${account.get('acct')}`} className='account-card__permalink'>\n        <div className='account-card__header'>\n          <img\n            src={\n              autoPlayGif ? account.get('header') : account.get('header_static')\n            }\n            alt=''\n          />\n        </div>\n\n        <div className='account-card__title'>\n          <div className='account-card__title__avatar'>\n            <Avatar account={account as Account} size={56} />\n          </div>\n          <DisplayName account={account as Account} />\n        </div>\n      </Link>\n\n      {account.get('note').length > 0 && (\n        <div\n          className='account-card__bio translate'\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          dangerouslySetInnerHTML={{ __html: account.get('note_emojified') }}\n        />\n      )}\n\n      <div className='account-card__actions'>\n        <div className='account-card__counters'>\n          <div className='account-card__counters__item'>\n            <ShortNumber value={account.get('statuses_count')} />\n            <small>\n              <FormattedMessage id='account.posts' defaultMessage='Posts' />\n            </small>\n          </div>\n\n          <div className='account-card__counters__item'>\n            <ShortNumber value={account.get('followers_count')} />{' '}\n            <small>\n              <FormattedMessage\n                id='account.followers'\n                defaultMessage='Followers'\n              />\n            </small>\n          </div>\n\n          <div className='account-card__counters__item'>\n            <ShortNumber value={account.get('following_count')} />{' '}\n            <small>\n              <FormattedMessage\n                id='account.following'\n                defaultMessage='Following'\n              />\n            </small>\n          </div>\n        </div>\n\n        <div className='account-card__actions__button'>{actionBtn}</div>\n      </div>\n    </div>\n  );\n};\n","import type { ChangeEventHandler } from 'react';\nimport { useCallback, useEffect, useRef } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { List as ImmutableList } from 'immutable';\n\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport {\n  addColumn,\n  removeColumn,\n  moveColumn,\n  changeColumnParams,\n} from 'mastodon/actions/columns';\nimport { fetchDirectory, expandDirectory } from 'mastodon/actions/directory';\nimport { Column } from 'mastodon/components/column';\nimport type { ColumnRef } from 'mastodon/components/column';\nimport { ColumnHeader } from 'mastodon/components/column_header';\nimport { LoadMore } from 'mastodon/components/load_more';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { RadioButton } from 'mastodon/components/radio_button';\nimport ScrollContainer from 'mastodon/containers/scroll_container';\nimport { useSearchParam } from 'mastodon/hooks/useSearchParam';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport { AccountCard } from './components/account_card';\n\nconst messages = defineMessages({\n  title: { id: 'column.directory', defaultMessage: 'Browse profiles' },\n  recentlyActive: {\n    id: 'directory.recently_active',\n    defaultMessage: 'Recently active',\n  },\n  newArrivals: { id: 'directory.new_arrivals', defaultMessage: 'New arrivals' },\n  local: { id: 'directory.local', defaultMessage: 'From {domain} only' },\n  federated: {\n    id: 'directory.federated',\n    defaultMessage: 'From known fediverse',\n  },\n});\n\nexport const Directory: React.FC<{\n  columnId?: string;\n  multiColumn?: boolean;\n  params?: { order: string; local?: boolean };\n}> = ({ columnId, multiColumn, params }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  const column = useRef<ColumnRef>(null);\n\n  const [orderParam, setOrderParam] = useSearchParam('order');\n  const [localParam, setLocalParam] = useSearchParam('local');\n\n  let localParamBool: boolean | undefined;\n\n  if (localParam === 'false') {\n    localParamBool = false;\n  }\n\n  const order = orderParam ?? params?.order ?? 'active';\n  const local = localParamBool ?? params?.local ?? true;\n\n  const handlePin = useCallback(() => {\n    if (columnId) {\n      dispatch(removeColumn(columnId));\n    } else {\n      dispatch(addColumn('DIRECTORY', { order, local }));\n    }\n  }, [dispatch, columnId, order, local]);\n\n  const domain = useAppSelector((s) => s.meta.get('domain') as string);\n  const accountIds = useAppSelector(\n    (state) =>\n      state.user_lists.getIn(\n        ['directory', 'items'],\n        ImmutableList(),\n      ) as ImmutableList<string>,\n  );\n  const isLoading = useAppSelector(\n    (state) =>\n      state.user_lists.getIn(['directory', 'isLoading'], true) as boolean,\n  );\n\n  useEffect(() => {\n    void dispatch(fetchDirectory({ order, local }));\n  }, [dispatch, order, local]);\n\n  const handleMove = useCallback(\n    (dir: number) => {\n      dispatch(moveColumn(columnId, dir));\n    },\n    [dispatch, columnId],\n  );\n\n  const handleHeaderClick = useCallback(() => {\n    column.current?.scrollTop();\n  }, []);\n\n  const handleChangeOrder = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (e) => {\n      if (columnId) {\n        dispatch(changeColumnParams(columnId, ['order'], e.target.value));\n      } else {\n        setOrderParam(e.target.value);\n      }\n    },\n    [dispatch, columnId, setOrderParam],\n  );\n\n  const handleChangeLocal = useCallback<ChangeEventHandler<HTMLInputElement>>(\n    (e) => {\n      if (columnId) {\n        dispatch(\n          changeColumnParams(columnId, ['local'], e.target.value === '1'),\n        );\n      } else if (e.target.value === '1') {\n        setLocalParam('true');\n      } else {\n        setLocalParam('false');\n      }\n    },\n    [dispatch, columnId, setLocalParam],\n  );\n\n  const handleLoadMore = useCallback(() => {\n    void dispatch(expandDirectory({ order, local }));\n  }, [dispatch, order, local]);\n\n  const pinned = !!columnId;\n  const initialLoad = isLoading && accountIds.size === 0;\n\n  const scrollableArea = (\n    <div className='scrollable'>\n      <div className='filter-form'>\n        <div className='filter-form__column' role='group'>\n          <RadioButton\n            name='order'\n            value='active'\n            label={intl.formatMessage(messages.recentlyActive)}\n            checked={order === 'active'}\n            onChange={handleChangeOrder}\n          />\n          <RadioButton\n            name='order'\n            value='new'\n            label={intl.formatMessage(messages.newArrivals)}\n            checked={order === 'new'}\n            onChange={handleChangeOrder}\n          />\n        </div>\n\n        <div className='filter-form__column' role='group'>\n          <RadioButton\n            name='local'\n            value='1'\n            label={intl.formatMessage(messages.local, { domain })}\n            checked={local}\n            onChange={handleChangeLocal}\n          />\n          <RadioButton\n            name='local'\n            value='0'\n            label={intl.formatMessage(messages.federated)}\n            checked={!local}\n            onChange={handleChangeLocal}\n          />\n        </div>\n      </div>\n\n      <div className='directory__list'>\n        {initialLoad ? (\n          <LoadingIndicator />\n        ) : (\n          accountIds.map((accountId) => (\n            <AccountCard accountId={accountId} key={accountId} />\n          ))\n        )}\n      </div>\n\n      <LoadMore\n        onClick={handleLoadMore}\n        visible={!initialLoad}\n        loading={isLoading}\n      />\n    </div>\n  );\n\n  return (\n    <Column\n      bindToDocument={!multiColumn}\n      ref={column}\n      label={intl.formatMessage(messages.title)}\n    >\n      <ColumnHeader\n        icon='address-book-o'\n        iconComponent={PeopleIcon}\n        title={intl.formatMessage(messages.title)}\n        onPin={handlePin}\n        onMove={handleMove}\n        onClick={handleHeaderClick}\n        pinned={pinned}\n        multiColumn={multiColumn}\n      />\n\n      {multiColumn && !pinned ? (\n        // @ts-expect-error ScrollContainer is not properly typed yet\n        <ScrollContainer scrollKey='directory'>\n          {scrollableArea}\n        </ScrollContainer>\n      ) : (\n        scrollableArea\n      )}\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export -- Needed because this is called as an async components\nexport default Directory;\n"],"names":["messages","defineMessages","unfollow","id","defaultMessage","follow","cancel_follow_request","requested","unblock","unmute","edit_profile","getAccount","makeGetAccount","AccountCard","accountId","intl","useIntl","account","useAppSelector","s","dispatch","useAppDispatch","handleMouseEnter","useCallback","currentTarget","autoPlayGif","querySelectorAll","forEach","emoji","original","getAttribute","src","handleMouseLeave","staticUrl","handleFollow","getIn","openModal","modalType","modalProps","followAccount","get","handleBlock","relationship","blocking","unblockAccount","handleMute","muting","unmuteAccount","handleEditProfile","window","open","actionBtn","me","jsxDEV","Button","formatMessage","this","blocked_by","classNames","Link","Avatar","DisplayName","length","__html","ShortNumber","FormattedMessage","title","recentlyActive","newArrivals","local","federated","Directory","columnId","multiColumn","params","column","useRef","orderParam","setOrderParam","useSearchParam","localParam","setLocalParam","localParamBool","order","handlePin","removeColumn","addColumn","domain","meta","accountIds","state","user_lists","ImmutableList","isLoading","useEffect","fetchDirectory","handleMove","dir","moveColumn","handleHeaderClick","current","scrollTop","handleChangeOrder","e","changeColumnParams","target","value","handleChangeLocal","handleLoadMore","expandDirectory","pinned","initialLoad","size","scrollableArea","RadioButton","LoadingIndicator","map","LoadMore","Column","ColumnHeader","PeopleIcon","ScrollContainer","Helmet"],"mappings":"+1CAuBA,MAAMA,EAAWC,EAAe,CAC9BC,SAAU,CAAEC,GAAE,mBAAsBC,eAAc,UAAA,EAClDC,OAAQ,CAAEF,GAAE,iBAAoBC,eAAc,QAAA,EAC9CE,sBAAuB,CACrBH,GAAE,gCACFC,eAAc,yBAAA,EAEhBG,UAAW,CACTJ,GAAE,oBACFC,eAAc,mDAAA,EAEhBI,QAAS,CAAEL,GAAE,wBAA2BC,eAAc,SAAA,EACtDK,OAAQ,CAAEN,GAAE,uBAA0BC,eAAc,QAAA,EACpDM,aAAc,CAAEP,0BAA4BC,8BAC9C,CAAC,EAEKO,GAAaC,GAAAA,EAENC,GAA+CA,CAAC,CAAEC,UAAAA,KAAgB,OAC7E,MAAMC,EAAOC,EAAAA,EACPC,EAAUC,EAAgBC,GAAMR,GAAWQ,EAAGL,CAAS,CAAC,EACxDM,EAAWC,EAAAA,EAEXC,EAAmBC,EAAAA,YACvB,CAAC,CAAEC,cAAAA,CAAAA,IAAoB,CACrB,GAAIC,EACF,OAGAD,EAAcE,iBAAmC,eAAe,EAE3DC,QAASC,GAAU,CACxB,MAAMC,EAAWD,EAAME,aAAa,eAAe,EAC/CD,MAAgBE,IAAMF,EAAAA,CAC3B,CAAA,EAEH,CAAA,CAAA,EAGIG,EAAmBT,EAAAA,YACvB,CAAC,CAAEC,cAAAA,CAAAA,IAAoB,CACrB,GAAIC,EACF,OAIAD,EAAcE,iBAAmC,eAAe,EAE3DC,QAASC,GAAU,CACxB,MAAMK,EAAYL,EAAME,aAAa,aAAa,EAC9CG,MAAiBF,IAAME,EAAAA,CAC5B,CAAA,EAEH,CAAA,CAAA,EAGIC,EAAeX,EAAAA,YAAY,IAAM,CAChCN,IAGHA,EAAQkB,MAAM,CAAC,eAAgB,WAAW,CAAC,GAC3ClB,EAAQkB,MAAM,CAAC,eAAgB,WAAW,CAAC,EAE3Cf,EACEgB,EAAU,CAAEC,UAAW,mBAAoBC,WAAY,CAAErB,QAAAA,CAAAA,EAAW,CAAA,EAGtEG,EAASmB,EAActB,EAAQuB,IAAI,IAAI,CAAC,CAAC,EAC3C,EACC,CAACvB,EAASG,CAAQ,CAAC,EAEhBqB,EAAclB,EAAAA,YAAY,IAAM,QAChCN,EAAAA,GAAAA,YAAAA,EAASyB,eAATzB,MAAAA,EAAuB0B,UACzBvB,EAASwB,EAAe3B,EAAQuB,IAAI,IAAI,CAAC,CAAC,CAC5C,EACC,CAACvB,EAASG,CAAQ,CAAC,EAEhByB,EAAatB,EAAAA,YAAY,IAAM,QAC/BN,EAAAA,GAAAA,YAAAA,EAASyB,eAATzB,MAAAA,EAAuB6B,QACzB1B,EAAS2B,EAAc9B,EAAQuB,IAAI,IAAI,CAAC,CAAC,CAC3C,EACC,CAACvB,EAASG,CAAQ,CAAC,EAEhB4B,EAAoBzB,EAAAA,YAAY,IAAM,CAC1C0B,OAAOC,KAAK,oBAAqB,QAAQ,CAAA,EACxC,EAAE,EAEL,GAAI,CAACjC,EAAS,OAAO,KAErB,IAAIkC,EAEJ,OAAIC,KAAOnC,EAAQuB,IAAI,IAAI,EACpBvB,EAAQuB,IAAI,cAAc,EAGpBvB,EAAQkB,MAAM,CAAC,eAAgB,WAAW,CAAC,EACpDgB,EACEE,EAAAA,OAACC,EAAA,CACC,KAAMvC,EAAKwC,cAAcvD,EAASM,qBAAqB,EACvD,MAAOS,EAAKwC,cAAcvD,EAASO,SAAS,EAC5C,QAAS2B,CAAAA,EAHX,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAsB,MAAA,EAMOvC,EAAQkB,MAAM,CAAC,eAAgB,QAAQ,CAAC,EACjDgB,EACEE,EAAAA,OAACC,EAAA,CACC,KAAMvC,EAAKwC,cAAcvD,EAASS,MAAM,EACxC,QAASoC,CAAAA,EAFX,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAW,MAAA,EAKQvC,EAAQkB,MAAM,CAAC,eAAgB,UAAU,CAAC,EAe3ClB,EAAQkB,MAAM,CAAC,eAAgB,UAAU,CAAC,IACnDgB,EACEE,EAAAA,OAACC,EAAA,CACC,KAAMvC,EAAKwC,cAAcvD,EAASQ,OAAO,EACzC,QAASiC,CAAAA,EAFX,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAe,MAAA,GAhBFL,EACEE,EAAAA,OAACC,EAAA,CACC,UAAUrC,EAAAA,EAAQyB,eAARzB,YAAAA,EAAsBwC,WAChC,UAAWC,GAAW,CACpB,sBAAuBzC,EAAQkB,MAAM,CAAC,eAAgB,WAAW,CAAC,CAAA,CACnE,EACD,KAAMpB,EAAKwC,cACTtC,EAAQkB,MAAM,CAAC,eAAgB,WAAW,CAAC,EACvCnC,EAASE,SACTF,EAASK,MAAAA,EAEf,QAAS6B,CAAAA,EAVX,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAsB,MAAA,EAlBFL,EAAY,GAwCdA,EACEE,EAAAA,OAACC,EAAA,CACC,KAAMvC,EAAKwC,cAAcvD,EAASU,YAAY,EAC9C,QAASsC,CAAAA,EAFX,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAQ,MAAA,EAQFH,EAAAA,OAAC,MAAA,CAAI,UAAU,eACb,SAAA,CAAAA,EAAAA,OAACM,GAAA,CAAK,GAAI,KAAK1C,EAAQuB,IAAI,MAAM,CAAC,GAAI,UAAU,0BAC9C,SAAA,CAAAa,EAAAA,OAAC,MAAA,CAAI,UAAU,uBACb,SAAAA,EAAAA,OAAC,MAAA,CACC,IACE5B,EAAcR,EAAQuB,IAAI,QAAQ,EAAIvB,EAAQuB,IAAI,eAAe,EAEnE,IAAI,EAAA,EAJN,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAgB,MAAA,CAIQ,EALV,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAOA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,sBACb,SAAA,CAAAA,EAAAA,OAAC,OAAI,UAAU,8BACb,kBAACO,EAAA,CAAO,QAAA3C,EAA6B,KAAM,EAAA,EAA3C,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAuC,MAA8C,CAAA,EADhD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAEA,EACAH,EAAAA,OAACQ,IAAY,QAAA5C,CAAA,EAAb,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAuC,MAAyC,CAAA,CAAA,EAJ3C,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAKA,CAAA,CAAA,EAfF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAgBA,EAECvC,EAAQuB,IAAI,MAAM,EAAEsB,OAAS,GAC5BT,EAAAA,OAAC,MAAA,CACC,UAAU,8BACV,aAAc/B,EACd,aAAcU,EACd,wBAAyB,CAAE+B,OAAQ9C,EAAQuB,IAAI,gBAAgB,CAAA,CAAE,EAJnE,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAgB,MAAA,EAQFH,EAAAA,OAAC,MAAA,CAAI,UAAU,wBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,yBACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAA,SAACW,EAAA,CAAY,MAAO/C,EAAQuB,IAAI,gBAAgB,CAAA,EAAhD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAgB,MAAkD,WACjD,QAAA,CACC,SAAAH,EAAAA,OAACY,GAAiB,mBAAmB,eAAe,SAApD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAT,MAA2D,CAAA,EAD7D,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAEA,CAAA,CAAA,EAJF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAA,SAACW,EAAA,CAAY,MAAO/C,EAAQuB,IAAI,iBAAiB,CAAA,EAAjD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAgB,MAAmD,EAAI,aACtD,QAAA,CACC,SAAAH,EAAAA,OAACY,EAAA,CACC,GAAE,oBACF,eAAe,WAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAT,MAAA,CAE4B,EAH9B,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,CAAA,CAAA,EAPF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAQA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,+BACb,SAAA,CAAAA,SAACW,EAAA,CAAY,MAAO/C,EAAQuB,IAAI,iBAAiB,CAAA,EAAjD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAgB,MAAmD,EAAI,aACtD,QAAA,CACC,SAAAH,EAAAA,OAACY,EAAA,CACC,GAAE,oBACF,eAAe,WAAA,EAFjB,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAT,MAAA,CAE4B,EAH9B,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAKA,CAAA,CAAA,EAPF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,EAAA,EAAAA,MAQA,CAAA,CAAA,EA1BF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MA2BA,EAEAH,SAAC,MAAA,CAAI,UAAU,gCAAiCF,SAAAA,CAAAA,EAAhD,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAK,MAA0D,CAAA,CAAA,EA9B5D,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MA+BA,CAAA,CAAA,EA3DF,OAAA,GAAA,CAAA,SAAA,gHAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MA4DA,CAEJ,ECvMMxD,EAAWC,EAAe,CAC9BiE,MAAO,CAAE/D,GAAE,mBAAsBC,eAAc,iBAAA,EAC/C+D,eAAgB,CACdhE,GAAE,4BACFC,eAAc,iBAAA,EAEhBgE,YAAa,CAAEjE,GAAE,yBAA4BC,eAAc,cAAA,EAC3DiE,MAAO,CAAElE,GAAE,kBAAqBC,eAAc,oBAAA,EAC9CkE,UAAW,CACTnE,GAAE,sBACFC,eAAc,sBAAA,CAElB,CAAC,EAEYmE,GAIRA,CAAC,CAAEC,SAAAA,EAAUC,YAAAA,EAAaC,OAAAA,KAAa,CAC1C,MAAM3D,EAAOC,EAAAA,EACPI,EAAWC,EAAAA,EAEXsD,EAASC,EAAAA,OAAkB,IAAI,EAE/B,CAACC,EAAYC,CAAa,EAAIC,EAAe,OAAO,EACpD,CAACC,EAAYC,CAAa,EAAIF,EAAe,OAAO,EAE1D,IAAIG,EAEAF,IAAe,UACjBE,EAAiB,IAGnB,MAAMC,EAAQN,IAAcH,GAAAA,YAAAA,EAAQS,QAAS,SACvCd,EAAQa,IAAkBR,GAAAA,YAAAA,EAAQL,QAAS,GAE3Ce,EAAY7D,EAAAA,YAAY,IAAM,CAEhCH,EADEoD,EACOa,EAAab,CAAQ,EAErBc,EAAU,YAAa,CAAEH,MAAAA,EAAOd,MAAAA,CAAAA,CAAO,CAFjB,CAGjC,EACC,CAACjD,EAAUoD,EAAUW,EAAOd,CAAK,CAAC,EAE/BkB,EAASrE,EAAgBC,GAAMA,EAAEqE,KAAKhD,IAAI,QAAQ,CAAW,EAC7DiD,EAAavE,EAChBwE,GACCA,EAAMC,WAAWxD,MACf,CAAC,YAAa,OAAO,EACrByD,EAAAA,CAAc,CAChB,EAEEC,EAAY3E,EACfwE,GACCA,EAAMC,WAAWxD,MAAM,CAAC,YAAa,WAAW,EAAG,EAAI,CAAA,EAG3D2D,EAAAA,UAAU,IAAM,CACT1E,EAAS2E,EAAe,CAAEZ,MAAAA,EAAOd,MAAAA,CAAAA,CAAO,CAAC,CAAA,EAC7C,CAACjD,EAAU+D,EAAOd,CAAK,CAAC,EAE3B,MAAM2B,EAAazE,EAAAA,YAChB0E,GAAgB,CACf7E,EAAS8E,EAAW1B,EAAUyB,CAAG,CAAC,CAAA,EAEpC,CAAC7E,EAAUoD,CAAQ,CAAA,EAGf2B,EAAoB5E,EAAAA,YAAY,IAAM,QAC1CoD,EAAAA,EAAOyB,UAAPzB,MAAAA,EAAgB0B,WAAU,EACzB,EAAE,EAECC,EAAoB/E,EAAAA,YACvBgF,GAAM,CACD/B,EACFpD,EAASoF,EAAmBhC,EAAU,CAAC,OAAO,EAAG+B,EAAEE,OAAOC,KAAK,CAAC,EAEhE5B,EAAcyB,EAAEE,OAAOC,KAAK,CAC9B,EAEF,CAACtF,EAAUoD,EAAUM,CAAa,CAAA,EAG9B6B,EAAoBpF,EAAAA,YACvBgF,GAAM,CACD/B,EACFpD,EACEoF,EAAmBhC,EAAU,CAAC,OAAO,EAAG+B,EAAEE,OAAOC,QAAU,GAAG,CAAA,EAEvDH,EAAEE,OAAOC,QAAU,IAC5BzB,EAAc,MAAM,EAEpBA,EAAc,OAAO,CACvB,EAEF,CAAC7D,EAAUoD,EAAUS,CAAa,CAAA,EAG9B2B,EAAiBrF,EAAAA,YAAY,IAAM,CAClCH,EAASyF,EAAgB,CAAE1B,MAAAA,EAAOd,MAAAA,CAAAA,CAAO,CAAC,CAAA,EAC9C,CAACjD,EAAU+D,EAAOd,CAAK,CAAC,EAErByC,EAAS,CAAC,CAACtC,EACXuC,EAAclB,GAAaJ,EAAWuB,OAAS,EAE/CC,EACJ5D,EAAAA,OAAC,MAAA,CAAI,UAAU,aACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,cACb,SAAA,CAAAA,EAAAA,OAAC,MAAA,CAAI,UAAU,sBAAsB,KAAK,QACxC,SAAA,CAAAA,EAAAA,OAAC6D,EAAA,CACC,KAAK,QACL,MAAM,SACN,MAAOnG,EAAKwC,cAAcvD,EAASmE,cAAc,EACjD,QAASgB,IAAU,SACnB,SAAUmB,CAAAA,EALZ,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,EAAA,EAAA9C,MAAA,EAOAH,EAAAA,OAAC6D,EAAA,CACC,KAAK,QACL,MAAM,MACN,MAAOnG,EAAKwC,cAAcvD,EAASoE,WAAW,EAC9C,QAASe,IAAU,MACnB,SAAUmB,CAAAA,EALZ,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,EAAA,EAAA9C,MAAA,CAK8B,CAAA,EAbhC,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAeA,EAEAH,EAAAA,OAAC,MAAA,CAAI,UAAU,sBAAsB,KAAK,QACxC,SAAA,CAAAA,EAAAA,OAAC6D,EAAA,CACC,KAAK,QACL,MAAM,IACN,MAAOnG,EAAKwC,cAAcvD,EAASqE,MAAO,CAAEkB,OAAAA,EAAQ,EACpD,QAASlB,EACT,SAAUsC,CAAAA,EALZ,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,EAAA,EAAAnD,MAAA,EAOAH,EAAAA,OAAC6D,EAAA,CACC,KAAK,QACL,MAAM,IACN,MAAOnG,EAAKwC,cAAcvD,EAASsE,SAAS,EAC5C,QAAS,CAACD,EACV,SAAUsC,CAAAA,EALZ,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,EAAA,EAAAnD,MAAA,CAK8B,CAAA,EAbhC,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAeA,CAAA,CAAA,EAjCF,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAkCA,WAEC,MAAA,CAAI,UAAU,kBACZuD,SAAAA,WACEI,GAAA,GAAD,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAA3D,MAAiB,EAEjBiC,EAAW2B,IAAKtG,GACduC,EAAAA,OAACxC,GAAA,CAAY,UAAAC,GAA2BA,EAAxC,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAA0C,MAAkD,CAAA,CACnD,EANL,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAQA,EAEAH,EAAAA,OAACgE,GAAA,CACC,QAAST,EACT,QAAS,CAACG,EACV,QAASlB,CAAAA,EAHX,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAArC,MAAA,CAGqB,CAAA,EAlDvB,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAoDA,EAGF,OACEH,EAAAA,OAACiE,GAAA,CACC,eAAgB,CAAC7C,EACjB,IAAKE,EACL,MAAO5D,EAAKwC,cAAcvD,EAASkE,KAAK,EAExC,SAAA,CAAAb,EAAAA,OAACkE,GAAA,CACC,KAAK,iBACL,cAAeC,EACf,MAAOzG,EAAKwC,cAAcvD,EAASkE,KAAK,EACxC,MAAOkB,EACP,OAAQY,EACR,QAASG,EACT,OAAAW,EACA,YAAArC,CAAA,EARF,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAjB,MAAA,EAWCiB,GAAe,CAACqC,EAEfzD,SAACoE,GAAA,CAAgB,UAAU,YACxBR,SAAAA,CAAAA,EADH,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAzD,MAEA,EAEAyD,WAGDS,EAAA,CACC,SAAA,CAAArE,EAAAA,OAAC,QAAA,CAAOtC,SAAAA,EAAKwC,cAAcvD,EAASkE,KAAK,CAAA,EAAzC,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAV,MAA2C,EAC3CH,SAAC,OAAA,CAAK,KAAK,SAAS,QAAQ,SAAA,EAA5B,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAG,MAAqC,CAAA,CAAA,EAFvC,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAGA,CAAA,CAAA,EA5BF,OAAA,GAAA,CAAA,SAAA,8FAAA,WAAA,IAAA,aAAA,CAAA,EAAAA,MAAA,CA+BJ"}