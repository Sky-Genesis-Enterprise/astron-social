{"version":3,"file":"poll-wjP7LpZg.js","sources":["../../app/javascript/mastodon/api/polls.ts","../../app/javascript/mastodon/actions/polls.ts","../../app/javascript/mastodon/components/poll.tsx"],"sourcesContent":["import { apiRequestGet, apiRequestPost } from 'mastodon/api';\nimport type { ApiPollJSON } from 'mastodon/api_types/polls';\n\nexport const apiGetPoll = (pollId: string) =>\n  apiRequestGet<ApiPollJSON>(`v1/polls/${pollId}`);\n\nexport const apiPollVote = (pollId: string, choices: string[]) =>\n  apiRequestPost<ApiPollJSON>(`v1/polls/${pollId}/votes`, {\n    choices,\n  });\n","import { apiGetPoll, apiPollVote } from 'mastodon/api/polls';\nimport type { ApiPollJSON } from 'mastodon/api_types/polls';\nimport { createPollFromServerJSON } from 'mastodon/models/poll';\nimport {\n  createAppAsyncThunk,\n  createDataLoadingThunk,\n} from 'mastodon/store/typed_functions';\n\nimport { importPolls } from './importer/polls';\n\nexport const importFetchedPoll = createAppAsyncThunk(\n  'poll/importFetched',\n  (args: { poll: ApiPollJSON }, { dispatch, getState }) => {\n    const { poll } = args;\n\n    dispatch(\n      importPolls({\n        polls: [createPollFromServerJSON(poll, getState().polls[poll.id])],\n      }),\n    );\n  },\n);\n\nexport const vote = createDataLoadingThunk(\n  'poll/vote',\n  ({ pollId, choices }: { pollId: string; choices: string[] }) =>\n    apiPollVote(pollId, choices),\n  async (poll, { dispatch, discardLoadData }) => {\n    await dispatch(importFetchedPoll({ poll }));\n    return discardLoadData;\n  },\n);\n\nexport const fetchPoll = createDataLoadingThunk(\n  'poll/fetch',\n  ({ pollId }: { pollId: string }) => apiGetPoll(pollId),\n  async (poll, { dispatch }) => {\n    await dispatch(importFetchedPoll({ poll }));\n  },\n);\n","import type { KeyboardEventHandler } from 'react';\nimport { useCallback, useMemo, useState } from 'react';\n\nimport { defineMessages, FormattedMessage, useIntl } from 'react-intl';\n\nimport classNames from 'classnames';\n\nimport { animated, useSpring } from '@react-spring/web';\nimport escapeTextContentForBrowser from 'escape-html';\n\nimport CheckIcon from '@/material-icons/400-24px/check.svg?react';\nimport { openModal } from 'mastodon/actions/modal';\nimport { fetchPoll, vote } from 'mastodon/actions/polls';\nimport { Icon } from 'mastodon/components/icon';\nimport emojify from 'mastodon/features/emoji/emoji';\nimport { useIdentity } from 'mastodon/identity_context';\nimport { makeEmojiMap } from 'mastodon/models/custom_emoji';\nimport type * as Model from 'mastodon/models/poll';\nimport type { Status } from 'mastodon/models/status';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport { RelativeTimestamp } from './relative_timestamp';\n\nconst messages = defineMessages({\n  closed: {\n    id: 'poll.closed',\n    defaultMessage: 'Closed',\n  },\n  voted: {\n    id: 'poll.voted',\n    defaultMessage: 'You voted for this answer',\n  },\n  votes: {\n    id: 'poll.votes',\n    defaultMessage: '{votes, plural, one {# vote} other {# votes}}',\n  },\n});\n\ninterface PollProps {\n  pollId: string;\n  status: Status;\n  lang?: string;\n  disabled?: boolean;\n}\n\nexport const Poll: React.FC<PollProps> = ({ pollId, disabled, status }) => {\n  // Third party hooks\n  const poll = useAppSelector((state) => state.polls[pollId]);\n  const identity = useIdentity();\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n\n  // State\n  const [revealed, setRevealed] = useState(false);\n  const [selected, setSelected] = useState<Record<string, boolean>>({});\n\n  // Derived values\n  const expired = useMemo(() => {\n    if (!poll) {\n      return false;\n    }\n    const expiresAt = poll.expires_at;\n    return poll.expired || new Date(expiresAt).getTime() < Date.now();\n  }, [poll]);\n  const timeRemaining = useMemo(() => {\n    if (!poll) {\n      return null;\n    }\n    if (expired) {\n      return intl.formatMessage(messages.closed);\n    }\n    return <RelativeTimestamp timestamp={poll.expires_at} futureDate />;\n  }, [expired, intl, poll]);\n  const votesCount = useMemo(() => {\n    if (!poll) {\n      return null;\n    }\n    if (poll.voters_count) {\n      return (\n        <FormattedMessage\n          id='poll.total_people'\n          defaultMessage='{count, plural, one {# person} other {# people}}'\n          values={{ count: poll.voters_count }}\n        />\n      );\n    }\n    return (\n      <FormattedMessage\n        id='poll.total_votes'\n        defaultMessage='{count, plural, one {# vote} other {# votes}}'\n        values={{ count: poll.votes_count }}\n      />\n    );\n  }, [poll]);\n\n  const voteDisabled =\n    disabled || Object.values(selected).every((item) => !item);\n\n  // Event handlers\n  const handleVote = useCallback(() => {\n    if (voteDisabled) {\n      return;\n    }\n\n    if (identity.signedIn) {\n      void dispatch(vote({ pollId, choices: Object.keys(selected) }));\n    } else {\n      dispatch(\n        openModal({\n          modalType: 'INTERACTION',\n          modalProps: {\n            type: 'vote',\n            accountId: status.getIn(['account', 'id']),\n            url: status.get('uri'),\n          },\n        }),\n      );\n    }\n  }, [voteDisabled, dispatch, identity, pollId, selected, status]);\n\n  const handleReveal = useCallback(() => {\n    setRevealed(true);\n  }, []);\n\n  const handleRefresh = useCallback(() => {\n    if (disabled) {\n      return;\n    }\n    void dispatch(fetchPoll({ pollId }));\n  }, [disabled, dispatch, pollId]);\n\n  const handleOptionChange = useCallback(\n    (choiceIndex: number) => {\n      if (!poll) {\n        return;\n      }\n      if (poll.multiple) {\n        setSelected((prev) => ({\n          ...prev,\n          [choiceIndex]: !prev[choiceIndex],\n        }));\n      } else {\n        setSelected({ [choiceIndex]: true });\n      }\n    },\n    [poll],\n  );\n\n  if (!poll) {\n    return null;\n  }\n  const showResults = poll.voted || revealed || expired;\n\n  return (\n    <div className='poll'>\n      <ul>\n        {poll.options.map((option, i) => (\n          <PollOption\n            key={option.title || i}\n            index={i}\n            poll={poll}\n            option={option}\n            showResults={showResults}\n            active={!!selected[i]}\n            onChange={handleOptionChange}\n          />\n        ))}\n      </ul>\n\n      <div className='poll__footer'>\n        {!showResults && (\n          <button\n            className='button button-secondary'\n            disabled={voteDisabled}\n            onClick={handleVote}\n          >\n            <FormattedMessage id='poll.vote' defaultMessage='Vote' />\n          </button>\n        )}\n        {!showResults && (\n          <>\n            <button className='poll__link' onClick={handleReveal}>\n              <FormattedMessage id='poll.reveal' defaultMessage='See results' />\n            </button>{' '}\n            ·{' '}\n          </>\n        )}\n        {showResults && !disabled && (\n          <>\n            <button className='poll__link' onClick={handleRefresh}>\n              <FormattedMessage id='poll.refresh' defaultMessage='Refresh' />\n            </button>{' '}\n            ·{' '}\n          </>\n        )}\n        {votesCount}\n        {poll.expires_at && <> · {timeRemaining}</>}\n      </div>\n    </div>\n  );\n};\n\ntype PollOptionProps = Pick<PollProps, 'disabled' | 'lang'> & {\n  active: boolean;\n  onChange: (index: number) => void;\n  poll: Model.Poll;\n  option: Model.PollOption;\n  index: number;\n  showResults?: boolean;\n};\n\nconst PollOption: React.FC<PollOptionProps> = (props) => {\n  const { active, lang, disabled, poll, option, index, showResults, onChange } =\n    props;\n  const voted = option.voted || poll.own_votes?.includes(index);\n  const title = option.translation?.title ?? option.title;\n\n  const intl = useIntl();\n\n  // Derived values\n  const percent = useMemo(() => {\n    const pollVotesCount = poll.voters_count ?? poll.votes_count;\n    return pollVotesCount === 0\n      ? 0\n      : (option.votes_count / pollVotesCount) * 100;\n  }, [option, poll]);\n  const isLeading = useMemo(\n    () =>\n      poll.options\n        .filter((other) => other.title !== option.title)\n        .every((other) => option.votes_count >= other.votes_count),\n    [poll, option],\n  );\n  const titleHtml = useMemo(() => {\n    let titleHtml = option.translation?.titleHtml ?? option.titleHtml;\n\n    if (!titleHtml) {\n      const emojiMap = makeEmojiMap(poll.emojis);\n      titleHtml = emojify(escapeTextContentForBrowser(title), emojiMap);\n    }\n\n    return titleHtml;\n  }, [option, poll, title]);\n\n  // Handlers\n  const handleOptionChange = useCallback(() => {\n    onChange(index);\n  }, [index, onChange]);\n  const handleOptionKeyPress: KeyboardEventHandler = useCallback(\n    (event) => {\n      if (event.key === 'Enter' || event.key === ' ') {\n        onChange(index);\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    },\n    [index, onChange],\n  );\n\n  const widthSpring = useSpring({\n    from: {\n      width: '0%',\n    },\n    to: {\n      width: `${percent}%`,\n    },\n  });\n\n  return (\n    <li>\n      <label\n        className={classNames('poll__option', { selectable: !showResults })}\n      >\n        <input\n          name='vote-options'\n          type={poll.multiple ? 'checkbox' : 'radio'}\n          value={index}\n          checked={active}\n          onChange={handleOptionChange}\n          disabled={disabled}\n        />\n\n        {!showResults && (\n          <span\n            className={classNames('poll__input', {\n              checkbox: poll.multiple,\n              active,\n            })}\n            tabIndex={0}\n            role={poll.multiple ? 'checkbox' : 'radio'}\n            onKeyDown={handleOptionKeyPress}\n            aria-checked={active}\n            aria-label={title}\n            lang={lang}\n            data-index={index}\n          />\n        )}\n        {showResults && (\n          <span\n            className='poll__number'\n            title={intl.formatMessage(messages.votes, {\n              votes: option.votes_count,\n            })}\n          >\n            {Math.round(percent)}%\n          </span>\n        )}\n\n        <span\n          className='poll__option__text translate'\n          lang={lang}\n          dangerouslySetInnerHTML={{ __html: titleHtml }}\n        />\n\n        {!!voted && (\n          <span className='poll__voted'>\n            <Icon\n              id='check'\n              icon={CheckIcon}\n              className='poll__voted__mark'\n              title={intl.formatMessage(messages.voted)}\n            />\n          </span>\n        )}\n      </label>\n\n      {showResults && (\n        <animated.span\n          className={classNames('poll__chart', { leading: isLeading })}\n          style={widthSpring}\n        />\n      )}\n    </li>\n  );\n};\n"],"names":["apiGetPoll","pollId","apiRequestGet","apiPollVote","choices","apiRequestPost","importFetchedPoll","createAppAsyncThunk","args","dispatch","getState","poll","importPolls","polls","createPollFromServerJSON","id","vote","createDataLoadingThunk","discardLoadData","fetchPoll","messages","defineMessages","closed","defaultMessage","voted","votes","Poll","disabled","status","useAppSelector","state","identity","useIdentity","intl","useIntl","useAppDispatch","revealed","setRevealed","useState","selected","setSelected","expired","useMemo","expiresAt","expires_at","Date","getTime","now","timeRemaining","formatMessage","RelativeTimestamp","this","votesCount","voters_count","jsxDEV","FormattedMessage","count","votes_count","voteDisabled","Object","values","every","item","handleVote","useCallback","signedIn","keys","openModal","modalType","modalProps","type","accountId","getIn","url","get","handleReveal","handleRefresh","handleOptionChange","choiceIndex","multiple","prev","showResults","options","map","option","i","PollOption","title","Fragment","props","active","lang","index","onChange","own_votes","includes","translation","percent","pollVotesCount","isLeading","filter","other","titleHtml","emojiMap","makeEmojiMap","emojis","emojify","escapeTextContentForBrowser","handleOptionKeyPress","event","key","stopPropagation","preventDefault","widthSpring","useSpring","from","width","to","classNames","selectable","checkbox","Math","round","__html","Icon","CheckIcon","animated","leading"],"mappings":"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"}