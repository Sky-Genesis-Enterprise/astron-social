{"version":3,"file":"account_featured-index-DYf32DJx.js","sources":["../../app/javascript/mastodon/features/account_featured/components/empty_message.tsx","../../app/javascript/mastodon/features/account_featured/components/featured_tag.tsx","../../app/javascript/mastodon/features/account_featured/index.tsx"],"sourcesContent":["import { FormattedMessage } from 'react-intl';\n\nimport { useParams } from 'react-router';\n\nimport { LimitedAccountHint } from 'mastodon/features/account_timeline/components/limited_account_hint';\nimport { me } from 'mastodon/initial_state';\n\ninterface EmptyMessageProps {\n  suspended: boolean;\n  hidden: boolean;\n  blockedBy: boolean;\n  accountId?: string;\n}\n\nexport const EmptyMessage: React.FC<EmptyMessageProps> = ({\n  accountId,\n  suspended,\n  hidden,\n  blockedBy,\n}) => {\n  const { acct } = useParams<{ acct?: string }>();\n  if (!accountId) {\n    return null;\n  }\n\n  let message: React.ReactNode = null;\n\n  if (me === accountId) {\n    message = (\n      <FormattedMessage\n        id='empty_column.account_featured.me'\n        defaultMessage='You have not featured anything yet. Did you know that you can feature your hashtags you use the most, and even your friend’s accounts on your profile?'\n      />\n    );\n  } else if (suspended) {\n    message = (\n      <FormattedMessage\n        id='empty_column.account_suspended'\n        defaultMessage='Account suspended'\n      />\n    );\n  } else if (hidden) {\n    message = <LimitedAccountHint accountId={accountId} />;\n  } else if (blockedBy) {\n    message = (\n      <FormattedMessage\n        id='empty_column.account_unavailable'\n        defaultMessage='Profile unavailable'\n      />\n    );\n  } else if (acct) {\n    message = (\n      <FormattedMessage\n        id='empty_column.account_featured.other'\n        defaultMessage='{acct} has not featured anything yet. Did you know that you can feature your hashtags you use the most, and even your friend’s accounts on your profile?'\n        values={{ acct }}\n      />\n    );\n  } else {\n    message = (\n      <FormattedMessage\n        id='empty_column.account_featured_other.unknown'\n        defaultMessage='This account has not featured anything yet.'\n      />\n    );\n  }\n\n  return <div className='empty-column-indicator'>{message}</div>;\n};\n","import { defineMessages, useIntl } from 'react-intl';\n\nimport type { Map as ImmutableMap } from 'immutable';\n\nimport { Hashtag } from 'mastodon/components/hashtag';\n\nexport type TagMap = ImmutableMap<\n  'id' | 'name' | 'url' | 'statuses_count' | 'last_status_at' | 'accountId',\n  string | null\n>;\n\ninterface FeaturedTagProps {\n  tag: TagMap;\n  account: string;\n}\n\nconst messages = defineMessages({\n  lastStatusAt: {\n    id: 'account.featured_tags.last_status_at',\n    defaultMessage: 'Last post on {date}',\n  },\n  empty: {\n    id: 'account.featured_tags.last_status_never',\n    defaultMessage: 'No posts',\n  },\n});\n\nexport const FeaturedTag: React.FC<FeaturedTagProps> = ({ tag, account }) => {\n  const intl = useIntl();\n  const name = tag.get('name') ?? '';\n  const count = Number.parseInt(tag.get('statuses_count') ?? '');\n  return (\n    <Hashtag\n      key={name}\n      name={name}\n      to={`/@${account}/tagged/${name}`}\n      uses={count}\n      withGraph={false}\n      description={\n        count > 0\n          ? intl.formatMessage(messages.lastStatusAt, {\n              date: intl.formatDate(tag.get('last_status_at') ?? '', {\n                month: 'short',\n                day: '2-digit',\n                year: 'numeric',\n              }),\n            })\n          : intl.formatMessage(messages.empty)\n      }\n    />\n  );\n};\n","import { useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { useParams } from 'react-router';\n\nimport { List as ImmutableList } from 'immutable';\n\nimport { fetchEndorsedAccounts } from 'mastodon/actions/accounts';\nimport { fetchFeaturedTags } from 'mastodon/actions/featured_tags';\nimport { Account } from 'mastodon/components/account';\nimport { ColumnBackButton } from 'mastodon/components/column_back_button';\nimport { LoadingIndicator } from 'mastodon/components/loading_indicator';\nimport { RemoteHint } from 'mastodon/components/remote_hint';\nimport { AccountHeader } from 'mastodon/features/account_timeline/components/account_header';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport Column from 'mastodon/features/ui/components/column';\nimport { useAccountId } from 'mastodon/hooks/useAccountId';\nimport { useAccountVisibility } from 'mastodon/hooks/useAccountVisibility';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport { EmptyMessage } from './components/empty_message';\nimport { FeaturedTag } from './components/featured_tag';\nimport type { TagMap } from './components/featured_tag';\n\ninterface Params {\n  acct?: string;\n  id?: string;\n}\n\nconst AccountFeatured: React.FC<{ multiColumn: boolean }> = ({\n  multiColumn,\n}) => {\n  const accountId = useAccountId();\n  const { suspended, blockedBy, hidden } = useAccountVisibility(accountId);\n  const forceEmptyState = suspended || blockedBy || hidden;\n  const { acct = '' } = useParams<Params>();\n\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    if (accountId) {\n      void dispatch(fetchFeaturedTags({ accountId }));\n      void dispatch(fetchEndorsedAccounts({ accountId }));\n    }\n  }, [accountId, dispatch]);\n\n  const isLoading = useAppSelector(\n    (state) =>\n      !accountId ||\n      !!state.user_lists.getIn(['featured_tags', accountId, 'isLoading']),\n  );\n  const featuredTags = useAppSelector(\n    (state) =>\n      state.user_lists.getIn(\n        ['featured_tags', accountId, 'items'],\n        ImmutableList(),\n      ) as ImmutableList<TagMap>,\n  );\n  const featuredAccountIds = useAppSelector(\n    (state) =>\n      state.user_lists.getIn(\n        ['featured_accounts', accountId, 'items'],\n        ImmutableList(),\n      ) as ImmutableList<string>,\n  );\n\n  if (accountId === null) {\n    return <BundleColumnError multiColumn={multiColumn} errorType='routing' />;\n  }\n\n  if (isLoading) {\n    return (\n      <AccountFeaturedWrapper accountId={accountId}>\n        <div className='scrollable__append'>\n          <LoadingIndicator />\n        </div>\n      </AccountFeaturedWrapper>\n    );\n  }\n\n  if (featuredTags.isEmpty() && featuredAccountIds.isEmpty()) {\n    return (\n      <AccountFeaturedWrapper accountId={accountId}>\n        <EmptyMessage\n          blockedBy={blockedBy}\n          hidden={hidden}\n          suspended={suspended}\n          accountId={accountId}\n        />\n        <RemoteHint accountId={accountId} />\n      </AccountFeaturedWrapper>\n    );\n  }\n\n  return (\n    <Column>\n      <ColumnBackButton />\n\n      <div className='scrollable scrollable--flex'>\n        {accountId && (\n          <AccountHeader accountId={accountId} hideTabs={forceEmptyState} />\n        )}\n        {!featuredTags.isEmpty() && (\n          <>\n            <h4 className='column-subheading'>\n              <FormattedMessage\n                id='account.featured.hashtags'\n                defaultMessage='Hashtags'\n              />\n            </h4>\n            {featuredTags.map((tag) => (\n              <FeaturedTag key={tag.get('id')} tag={tag} account={acct} />\n            ))}\n          </>\n        )}\n        {!featuredAccountIds.isEmpty() && (\n          <>\n            <h4 className='column-subheading'>\n              <FormattedMessage\n                id='account.featured.accounts'\n                defaultMessage='Profiles'\n              />\n            </h4>\n            {featuredAccountIds.map((featuredAccountId) => (\n              <Account key={featuredAccountId} id={featuredAccountId} />\n            ))}\n          </>\n        )}\n        <RemoteHint accountId={accountId} />\n      </div>\n    </Column>\n  );\n};\n\nconst AccountFeaturedWrapper = ({\n  children,\n  accountId,\n}: React.PropsWithChildren<{ accountId?: string }>) => {\n  return (\n    <Column>\n      <ColumnBackButton />\n      <div className='scrollable scrollable--flex'>\n        {accountId && <AccountHeader accountId={accountId} />}\n        {children}\n      </div>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default AccountFeatured;\n"],"names":["EmptyMessage","accountId","suspended","hidden","blockedBy","acct","useParams","message","me","jsxDEV","FormattedMessage","this","LimitedAccountHint","messages","defineMessages","lastStatusAt","id","defaultMessage","empty","FeaturedTag","tag","account","intl","useIntl","name","get","count","Number","parseInt","Hashtag","formatMessage","date","formatDate","month","day","year","AccountFeatured","multiColumn","useAccountId","useAccountVisibility","forceEmptyState","dispatch","useAppDispatch","useEffect","fetchFeaturedTags","fetchEndorsedAccounts","isLoading","useAppSelector","state","user_lists","getIn","featuredTags","ImmutableList","featuredAccountIds","BundleColumnError","AccountFeaturedWrapper","LoadingIndicator","isEmpty","RemoteHint","Column","ColumnBackButton","AccountHeader","Fragment","map","featuredAccountId","Account","children"],"mappings":"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"}