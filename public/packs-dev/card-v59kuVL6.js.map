{"version":3,"file":"card-v59kuVL6.js","sources":["../../app/javascript/images/logo.svg","../../app/javascript/mastodon/components/logo.tsx","../../node_modules/punycode/punycode.es6.js","../../app/javascript/material-icons/400-24px/description-fill.svg?react","../../app/javascript/mastodon/features/explore/components/author_link.jsx","../../app/javascript/mastodon/components/more_from_author.tsx","../../app/javascript/mastodon/features/status/components/card.jsx"],"sourcesContent":["export default \"data:image/svg+xml,%3csvg%20width='65'%20height='65'%20viewBox='0%200%2061%2065'%20fill='none'%20xmlns='http://www.w3.org/2000/svg'%3e%3cpath%20d='M60.7539%2014.3904C59.8143%207.40642%2053.7273%201.90257%2046.5117%200.836066C45.2943%200.655854%2040.6819%200%2029.9973%200H29.9175C19.2299%200%2016.937%200.655854%2015.7196%200.836066C8.70488%201.87302%202.29885%206.81852%200.744617%2013.8852C-0.00294988%2017.3654%20-0.0827298%2021.2237%200.0561464%2024.7629C0.254119%2029.8384%200.292531%2034.905%200.753482%2039.9598C1.07215%2043.3175%201.62806%2046.6484%202.41704%2049.9276C3.89445%2055.9839%209.87499%2061.0239%2015.7344%2063.0801C22.0077%2065.2244%2028.7542%2065.5804%2035.2184%2064.1082C35.9295%2063.9428%2036.6318%2063.7508%2037.3252%2063.5321C38.8971%2063.0329%2040.738%2062.4745%2042.0913%2061.4937C42.1099%2061.4799%2042.1251%2061.4621%2042.1358%2061.4417C42.1466%2061.4212%2042.1526%2061.3986%2042.1534%2061.3755V56.4773C42.153%2056.4557%2042.1479%2056.4345%2042.1383%2056.4151C42.1287%2056.3958%2042.1149%2056.3788%2042.0979%2056.3655C42.0809%2056.3522%2042.0611%2056.3429%2042.04%2056.3382C42.019%2056.3335%2041.9971%2056.3336%2041.9761%2056.3384C37.8345%2057.3276%2033.5905%2057.8234%2029.3324%2057.8156C22.0045%2057.8156%2020.0336%2054.3384%2019.4693%2052.8908C19.0156%2051.6397%2018.7275%2050.3346%2018.6124%2049.0088C18.6112%2048.9866%2018.6153%2048.9643%2018.6243%2048.9439C18.6333%2048.9236%2018.647%2048.9056%2018.6643%2048.8915C18.6816%2048.8774%2018.7019%2048.8675%2018.7237%2048.8628C18.7455%2048.858%2018.7681%2048.8585%2018.7897%2048.8641C22.8622%2049.8465%2027.037%2050.3423%2031.2265%2050.3412C32.234%2050.3412%2033.2387%2050.3412%2034.2463%2050.3146C38.4598%2050.1964%2042.9009%2049.9808%2047.0465%2049.1713C47.1499%2049.1506%2047.2534%2049.1329%2047.342%2049.1063C53.881%2047.8507%2060.1038%2043.9097%2060.7362%2033.9301C60.7598%2033.5372%2060.8189%2029.8148%2060.8189%2029.4071C60.8218%2028.0215%2061.2651%2019.5781%2060.7539%2014.3904Z'%20fill='url(%23paint0_linear_89_8)'/%3e%3cpath%20d='M50.3943%2022.237V39.5876H43.5185V22.7481C43.5185%2019.2029%2042.0411%2017.3949%2039.036%2017.3949C35.7325%2017.3949%2034.0778%2019.5338%2034.0778%2023.7585V32.9759H27.2434V23.7585C27.2434%2019.5338%2025.5857%2017.3949%2022.2822%2017.3949C19.2949%2017.3949%2017.8027%2019.2029%2017.8027%2022.7481V39.5876H10.9298V22.237C10.9298%2018.6918%2011.835%2015.8754%2013.6453%2013.7877C15.5128%2011.7049%2017.9623%2010.6355%2021.0028%2010.6355C24.522%2010.6355%2027.1813%2011.9885%2028.9542%2014.6917L30.665%2017.5633L32.3788%2014.6917C34.1517%2011.9885%2036.811%2010.6355%2040.3243%2010.6355C43.3619%2010.6355%2045.8114%2011.7049%2047.6847%2013.7877C49.4931%2015.8734%2050.3963%2018.6899%2050.3943%2022.237Z'%20fill='white'/%3e%3cdefs%3e%3clinearGradient%20id='paint0_linear_89_8'%20x1='30.5'%20y1='0'%20x2='30.5'%20y2='65'%20gradientUnits='userSpaceOnUse'%3e%3cstop%20stop-color='%236364FF'/%3e%3cstop%20offset='1'%20stop-color='%23563ACC'/%3e%3c/linearGradient%3e%3c/defs%3e%3c/svg%3e\"","import logo from '@/images/logo.svg';\n\nexport const WordmarkLogo: React.FC = () => (\n  <svg viewBox='0 0 261 66' className='logo logo--wordmark' role='img'>\n    <title>Mastodon</title>\n    <use xlinkHref='#logo-symbol-wordmark' />\n  </svg>\n);\n\nexport const IconLogo: React.FC = () => (\n  <svg viewBox='0 0 79 79' className='logo logo--icon' role='img'>\n    <title>Mastodon</title>\n    <use xlinkHref='#logo-symbol-icon' />\n  </svg>\n);\n\nexport const SymbolLogo: React.FC = () => (\n  <img src={logo} alt='Mastodon' className='logo logo--icon' />\n);\n","'use strict';\n\n/** Highest positive signed 32-bit float value */\nconst maxInt = 2147483647; // aka. 0x7FFFFFFF or 2^31-1\n\n/** Bootstring parameters */\nconst base = 36;\nconst tMin = 1;\nconst tMax = 26;\nconst skew = 38;\nconst damp = 700;\nconst initialBias = 72;\nconst initialN = 128; // 0x80\nconst delimiter = '-'; // '\\x2D'\n\n/** Regular expressions */\nconst regexPunycode = /^xn--/;\nconst regexNonASCII = /[^\\0-\\x7F]/; // Note: U+007F DEL is excluded too.\nconst regexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g; // RFC 3490 separators\n\n/** Error messages */\nconst errors = {\n\t'overflow': 'Overflow: input needs wider integers to process',\n\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t'invalid-input': 'Invalid input'\n};\n\n/** Convenience shortcuts */\nconst baseMinusTMin = base - tMin;\nconst floor = Math.floor;\nconst stringFromCharCode = String.fromCharCode;\n\n/*--------------------------------------------------------------------------*/\n\n/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */\nfunction error(type) {\n\tthrow new RangeError(errors[type]);\n}\n\n/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */\nfunction map(array, callback) {\n\tconst result = [];\n\tlet length = array.length;\n\twhile (length--) {\n\t\tresult[length] = callback(array[length]);\n\t}\n\treturn result;\n}\n\n/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {String} A new string of characters returned by the callback\n * function.\n */\nfunction mapDomain(domain, callback) {\n\tconst parts = domain.split('@');\n\tlet result = '';\n\tif (parts.length > 1) {\n\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t// the local part (i.e. everything up to `@`) intact.\n\t\tresult = parts[0] + '@';\n\t\tdomain = parts[1];\n\t}\n\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\tdomain = domain.replace(regexSeparators, '\\x2E');\n\tconst labels = domain.split('.');\n\tconst encoded = map(labels, callback).join('.');\n\treturn result + encoded;\n}\n\n/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */\nfunction ucs2decode(string) {\n\tconst output = [];\n\tlet counter = 0;\n\tconst length = string.length;\n\twhile (counter < length) {\n\t\tconst value = string.charCodeAt(counter++);\n\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t// It's a high surrogate, and there is a next character.\n\t\t\tconst extra = string.charCodeAt(counter++);\n\t\t\tif ((extra & 0xFC00) == 0xDC00) { // Low surrogate.\n\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t} else {\n\t\t\t\t// It's an unmatched surrogate; only append this code unit, in case the\n\t\t\t\t// next code unit is the high surrogate of a surrogate pair.\n\t\t\t\toutput.push(value);\n\t\t\t\tcounter--;\n\t\t\t}\n\t\t} else {\n\t\t\toutput.push(value);\n\t\t}\n\t}\n\treturn output;\n}\n\n/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */\nconst ucs2encode = codePoints => String.fromCodePoint(...codePoints);\n\n/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */\nconst basicToDigit = function(codePoint) {\n\tif (codePoint >= 0x30 && codePoint < 0x3A) {\n\t\treturn 26 + (codePoint - 0x30);\n\t}\n\tif (codePoint >= 0x41 && codePoint < 0x5B) {\n\t\treturn codePoint - 0x41;\n\t}\n\tif (codePoint >= 0x61 && codePoint < 0x7B) {\n\t\treturn codePoint - 0x61;\n\t}\n\treturn base;\n};\n\n/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */\nconst digitToBasic = function(digit, flag) {\n\t//  0..25 map to ASCII a..z or A..Z\n\t// 26..35 map to ASCII 0..9\n\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n};\n\n/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */\nconst adapt = function(delta, numPoints, firstTime) {\n\tlet k = 0;\n\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\tdelta += floor(delta / numPoints);\n\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\tdelta = floor(delta / baseMinusTMin);\n\t}\n\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n};\n\n/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */\nconst decode = function(input) {\n\t// Don't use UCS-2.\n\tconst output = [];\n\tconst inputLength = input.length;\n\tlet i = 0;\n\tlet n = initialN;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points: let `basic` be the number of input code\n\t// points before the last delimiter, or `0` if there is none, then copy\n\t// the first basic code points to the output.\n\n\tlet basic = input.lastIndexOf(delimiter);\n\tif (basic < 0) {\n\t\tbasic = 0;\n\t}\n\n\tfor (let j = 0; j < basic; ++j) {\n\t\t// if it's not a basic code point\n\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\terror('not-basic');\n\t\t}\n\t\toutput.push(input.charCodeAt(j));\n\t}\n\n\t// Main decoding loop: start just after the last delimiter if any basic code\n\t// points were copied; start at the beginning otherwise.\n\n\tfor (let index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t// `index` is the index of the next character to be consumed.\n\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t// which gets added to `i`. The overflow checking is easier\n\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t// value at the end to obtain `delta`.\n\t\tconst oldi = i;\n\t\tfor (let w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\tif (index >= inputLength) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\n\t\t\tconst digit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\tif (digit >= base) {\n\t\t\t\terror('invalid-input');\n\t\t\t}\n\t\t\tif (digit > floor((maxInt - i) / w)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\ti += digit * w;\n\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\tif (digit < t) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst baseMinusT = base - t;\n\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tw *= baseMinusT;\n\n\t\t}\n\n\t\tconst out = output.length + 1;\n\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t// incrementing `n` each time, so we'll fix that now:\n\t\tif (floor(i / out) > maxInt - n) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tn += floor(i / out);\n\t\ti %= out;\n\n\t\t// Insert `n` at position `i` of the output.\n\t\toutput.splice(i++, 0, n);\n\n\t}\n\n\treturn String.fromCodePoint(...output);\n};\n\n/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */\nconst encode = function(input) {\n\tconst output = [];\n\n\t// Convert the input in UCS-2 to an array of Unicode code points.\n\tinput = ucs2decode(input);\n\n\t// Cache the length.\n\tconst inputLength = input.length;\n\n\t// Initialize the state.\n\tlet n = initialN;\n\tlet delta = 0;\n\tlet bias = initialBias;\n\n\t// Handle the basic code points.\n\tfor (const currentValue of input) {\n\t\tif (currentValue < 0x80) {\n\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t}\n\t}\n\n\tconst basicLength = output.length;\n\tlet handledCPCount = basicLength;\n\n\t// `handledCPCount` is the number of code points that have been handled;\n\t// `basicLength` is the number of basic code points.\n\n\t// Finish the basic string with a delimiter unless it's empty.\n\tif (basicLength) {\n\t\toutput.push(delimiter);\n\t}\n\n\t// Main encoding loop:\n\twhile (handledCPCount < inputLength) {\n\n\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t// larger one:\n\t\tlet m = maxInt;\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\tm = currentValue;\n\t\t\t}\n\t\t}\n\n\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t// but guard against overflow.\n\t\tconst handledCPCountPlusOne = handledCPCount + 1;\n\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\terror('overflow');\n\t\t}\n\n\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\tn = m;\n\n\t\tfor (const currentValue of input) {\n\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\t\t\tif (currentValue === n) {\n\t\t\t\t// Represent delta as a generalized variable-length integer.\n\t\t\t\tlet q = delta;\n\t\t\t\tfor (let k = base; /* no condition */; k += base) {\n\t\t\t\t\tconst t = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst qMinusT = q - t;\n\t\t\t\t\tconst baseMinusT = base - t;\n\t\t\t\t\toutput.push(\n\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t);\n\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t}\n\n\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount === basicLength);\n\t\t\t\tdelta = 0;\n\t\t\t\t++handledCPCount;\n\t\t\t}\n\t\t}\n\n\t\t++delta;\n\t\t++n;\n\n\t}\n\treturn output.join('');\n};\n\n/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */\nconst toUnicode = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexPunycode.test(string)\n\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t: string;\n\t});\n};\n\n/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */\nconst toASCII = function(input) {\n\treturn mapDomain(input, function(string) {\n\t\treturn regexNonASCII.test(string)\n\t\t\t? 'xn--' + encode(string)\n\t\t\t: string;\n\t});\n};\n\n/*--------------------------------------------------------------------------*/\n\n/** Define the public API */\nconst punycode = {\n\t/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */\n\t'version': '2.3.1',\n\t/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */\n\t'ucs2': {\n\t\t'decode': ucs2decode,\n\t\t'encode': ucs2encode\n\t},\n\t'decode': decode,\n\t'encode': encode,\n\t'toASCII': toASCII,\n\t'toUnicode': toUnicode\n};\n\nexport { ucs2decode, ucs2encode, decode, encode, toASCII, toUnicode };\nexport default punycode;\n","import * as React from \"react\";\nconst SvgDescriptionFill = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M320-240h320v-80H320v80Zm0-160h320v-80H320v80ZM240-80q-33 0-56.5-23.5T160-160v-640q0-33 23.5-56.5T240-880h320l240 240v480q0 33-23.5 56.5T720-80H240Zm280-520h200L520-800v200Z\" }));\nexport default SvgDescriptionFill;\n","import PropTypes from 'prop-types';\n\nimport { Link } from 'react-router-dom';\n\nimport { Avatar } from 'mastodon/components/avatar';\nimport { useAppSelector } from 'mastodon/store';\n\nexport const AuthorLink = ({ accountId }) => {\n  const account = useAppSelector(state => state.getIn(['accounts', accountId]));\n\n  if (!account) {\n    return null;\n  }\n\n  return (\n    <Link to={`/@${account.get('acct')}`} className='story__details__shared__author-link' data-hover-card-account={accountId}>\n      <Avatar account={account} size={16} />\n      <bdi dangerouslySetInnerHTML={{ __html: account.get('display_name_html') }} />\n    </Link>\n  );\n};\n\nAuthorLink.propTypes = {\n  accountId: PropTypes.string.isRequired,\n};\n","import { FormattedMessage } from 'react-intl';\n\nimport { IconLogo } from 'mastodon/components/logo';\nimport { AuthorLink } from 'mastodon/features/explore/components/author_link';\n\nexport const MoreFromAuthor: React.FC<{ accountId: string }> = ({\n  accountId,\n}) => (\n  <FormattedMessage\n    id='link_preview.more_from_author'\n    defaultMessage='More from {name}'\n    values={{ name: <AuthorLink accountId={accountId} /> }}\n  >\n    {(chunks) => (\n      <div className='more-from-author'>\n        <IconLogo />\n        {chunks}\n      </div>\n    )}\n  </FormattedMessage>\n);\n","import punycode from 'punycode';\n\nimport PropTypes from 'prop-types';\nimport { PureComponent } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport classNames from 'classnames';\n\n\nimport { is } from 'immutable';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\n\nimport DescriptionIcon from '@/material-icons/400-24px/description-fill.svg?react';\nimport OpenInNewIcon from '@/material-icons/400-24px/open_in_new.svg?react';\nimport PlayArrowIcon from '@/material-icons/400-24px/play_arrow-fill.svg?react';\nimport { Blurhash } from 'mastodon/components/blurhash';\nimport { Icon }  from 'mastodon/components/icon';\nimport { MoreFromAuthor } from 'mastodon/components/more_from_author';\nimport { RelativeTimestamp } from 'mastodon/components/relative_timestamp';\nimport { useBlurhash } from 'mastodon/initial_state';\n\nconst IDNA_PREFIX = 'xn--';\n\nconst decodeIDNA = domain => {\n  return domain\n    .split('.')\n    .map(part => part.indexOf(IDNA_PREFIX) === 0 ? punycode.decode(part.slice(IDNA_PREFIX.length)) : part)\n    .join('.');\n};\n\nconst getHostname = url => {\n  const parser = document.createElement('a');\n  parser.href = url;\n  return parser.hostname;\n};\n\nconst domParser = new DOMParser();\n\nconst addAutoPlay = html => {\n  const document = domParser.parseFromString(html, 'text/html').documentElement;\n  const iframe = document.querySelector('iframe');\n\n  if (iframe) {\n    if (iframe.src.indexOf('?') !== -1) {\n      iframe.src += '&';\n    } else {\n      iframe.src += '?';\n    }\n\n    iframe.src += 'autoplay=1&auto_play=1';\n\n    // DOM parser creates html/body elements around original HTML fragment,\n    // so we need to get innerHTML out of the body and not the entire document\n    return document.querySelector('body').innerHTML;\n  }\n\n  return html;\n};\n\nexport default class Card extends PureComponent {\n\n  static propTypes = {\n    card: ImmutablePropTypes.map,\n    onOpenMedia: PropTypes.func.isRequired,\n    sensitive: PropTypes.bool,\n  };\n\n  state = {\n    previewLoaded: false,\n    embedded: false,\n    revealed: !this.props.sensitive,\n  };\n\n  UNSAFE_componentWillReceiveProps (nextProps) {\n    if (!is(this.props.card, nextProps.card)) {\n      this.setState({ embedded: false, previewLoaded: false });\n    }\n\n    if (this.props.sensitive !== nextProps.sensitive) {\n      this.setState({ revealed: !nextProps.sensitive });\n    }\n  }\n\n  componentDidMount () {\n    window.addEventListener('resize', this.handleResize, { passive: true });\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.handleResize);\n  }\n\n  handleEmbedClick = () => {\n    this.setState({ embedded: true });\n  };\n\n  handleExternalLinkClick = (e) => {\n    e.stopPropagation();\n  };\n\n  setRef = c => {\n    this.node = c;\n  };\n\n  handleImageLoad = () => {\n    this.setState({ previewLoaded: true });\n  };\n\n  handleReveal = e => {\n    e.preventDefault();\n    e.stopPropagation();\n    this.setState({ revealed: true });\n  };\n\n  renderVideo () {\n    const { card } = this.props;\n    const content = { __html: addAutoPlay(card.get('html')) };\n\n    return (\n      <div\n        ref={this.setRef}\n        className='status-card__image status-card-video'\n        dangerouslySetInnerHTML={content}\n        style={{ aspectRatio: '16 / 9' }}\n      />\n    );\n  }\n\n  render () {\n    const { card } = this.props;\n    const { embedded, revealed } = this.state;\n\n    if (card === null) {\n      return null;\n    }\n\n    const provider    = card.get('provider_name').length === 0 ? decodeIDNA(getHostname(card.get('url'))) : card.get('provider_name');\n    const interactive = card.get('type') === 'video';\n    const language    = card.get('language') || '';\n    const largeImage  = (card.get('image')?.length > 0 && card.get('width') > card.get('height')) || interactive;\n    const showAuthor  = !!card.getIn(['authors', 0, 'accountId']);\n\n    const description = (\n      <div className='status-card__content' dir='auto'>\n        <span className='status-card__host'>\n          <span lang={language}>{provider}</span>\n          {card.get('published_at') && <> · <RelativeTimestamp timestamp={card.get('published_at')} /></>}\n        </span>\n\n        <strong className='status-card__title' title={card.get('title')} lang={language}>{card.get('title')}</strong>\n\n        {!showAuthor && (card.get('author_name').length > 0 ? <span className='status-card__author'><FormattedMessage id='link_preview.author' defaultMessage='By {name}' values={{ name: <strong>{card.get('author_name')}</strong> }} /></span> : <span className='status-card__description' lang={language}>{card.get('description')}</span>)}\n      </div>\n    );\n\n    const thumbnailStyle = {\n      visibility: revealed ? null : 'hidden',\n    };\n\n    if (largeImage && card.get('type') === 'video') {\n      thumbnailStyle.aspectRatio = `16 / 9`;\n    } else if (largeImage) {\n      thumbnailStyle.aspectRatio = '1.91 / 1';\n    } else {\n      thumbnailStyle.aspectRatio = 1;\n    }\n\n    let embed;\n\n    let canvas = (\n      <Blurhash\n        className={classNames('status-card__image-preview', {\n          'status-card__image-preview--hidden': revealed && this.state.previewLoaded,\n        })}\n        hash={card.get('blurhash')}\n        dummy={!useBlurhash}\n      />\n    );\n\n    const thumbnailDescription = card.get('image_description');\n    const thumbnail = <img src={card.get('image')} alt={thumbnailDescription} title={thumbnailDescription} lang={language} style={thumbnailStyle} onLoad={this.handleImageLoad} className='status-card__image-image' />;\n\n    let spoilerButton = (\n      <button type='button' onClick={this.handleReveal} className='spoiler-button__overlay'>\n        <span className='spoiler-button__overlay__label'>\n          <FormattedMessage id='status.sensitive_warning' defaultMessage='Sensitive content' />\n          <span className='spoiler-button__overlay__action'><FormattedMessage id='status.media.show' defaultMessage='Click to show' /></span>\n        </span>\n      </button>\n    );\n\n    spoilerButton = (\n      <div className={classNames('spoiler-button', { 'spoiler-button--minified': revealed })}>\n        {spoilerButton}\n      </div>\n    );\n\n    if (interactive) {\n      if (embedded) {\n        embed = this.renderVideo();\n      } else {\n        embed = (\n          <div className='status-card__image'>\n            {canvas}\n            {thumbnail}\n\n            {revealed ? (\n              <div className='status-card__actions' onClick={this.handleEmbedClick} role='none'>\n                <div>\n                  <button type='button' onClick={this.handleEmbedClick}><Icon id='play' icon={PlayArrowIcon} /></button>\n                  <a href={card.get('url')} onClick={this.handleExternalLinkClick} target='_blank' rel='noopener'><Icon id='external-link' icon={OpenInNewIcon} /></a>\n                </div>\n              </div>\n            ) : spoilerButton}\n          </div>\n        );\n      }\n\n      return (\n        <div className={classNames('status-card', { expanded: largeImage })} ref={this.setRef} onClick={revealed ? null : this.handleReveal} role={revealed ? 'button' : null}>\n          {embed}\n          <a href={card.get('url')} target='_blank' rel='noopener'>{description}</a>\n        </div>\n      );\n    } else if (card.get('image')) {\n      embed = (\n        <div className='status-card__image'>\n          {canvas}\n          {thumbnail}\n        </div>\n      );\n    } else {\n      embed = (\n        <div className='status-card__image'>\n          <Icon id='file-text' icon={DescriptionIcon} />\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <a href={card.get('url')} className={classNames('status-card', { expanded: largeImage, bottomless: showAuthor })} target='_blank' rel='noopener' ref={this.setRef}>\n          {embed}\n          {description}\n        </a>\n\n        {showAuthor && <MoreFromAuthor accountId={card.getIn(['authors', 0, 'accountId'])} />}\n      </>\n    );\n  }\n\n}\n"],"names":["logo","WordmarkLogo","jsxDEV","this","IconLogo","SymbolLogo","maxInt","base","tMin","tMax","skew","damp","initialBias","initialN","delimiter","regexPunycode","regexNonASCII","regexSeparators","errors","baseMinusTMin","floor","stringFromCharCode","error","type","map","array","callback","result","length","mapDomain","domain","parts","labels","encoded","ucs2decode","string","output","counter","value","extra","ucs2encode","codePoints","basicToDigit","codePoint","digitToBasic","digit","flag","adapt","delta","numPoints","firstTime","k","decode","input","inputLength","i","n","bias","basic","j","index","oldi","w","t","baseMinusT","out","encode","currentValue","basicLength","handledCPCount","handledCPCountPlusOne","q","qMinusT","toUnicode","toASCII","punycode","SvgDescriptionFill","props","React.createElement","AuthorLink","accountId","account","useAppSelector","state","getIn","Link","get","Avatar","__html","MoreFromAuthor","FormattedMessage","name","chunks","IDNA_PREFIX","decodeIDNA","split","part","indexOf","slice","join","getHostname","url","parser","document","createElement","href","hostname","domParser","DOMParser","addAutoPlay","html","parseFromString","documentElement","iframe","querySelector","src","innerHTML","Card","PureComponent","previewLoaded","embedded","revealed","sensitive","handleEmbedClick","setState","handleExternalLinkClick","e","stopPropagation","setRef","c","node","handleImageLoad","handleReveal","preventDefault","UNSAFE_componentWillReceiveProps","nextProps","is","card","componentDidMount","window","addEventListener","handleResize","passive","componentWillUnmount","removeEventListener","renderVideo","content","aspectRatio","render","provider","interactive","language","largeImage","showAuthor","description","Fragment","RelativeTimestamp","thumbnailStyle","visibility","embed","canvas","Blurhash","classNames","useBlurhash","thumbnailDescription","thumbnail","spoilerButton","Icon","PlayArrowIcon","OpenInNewIcon","expanded","DescriptionIcon","bottomless"],"mappings":"ijBAAA,MAAAA,EAAe,y7FCEFC,GAAyBA,IACpCC,EAAAA,OAAC,MAAA,CAAI,QAAQ,aAAa,UAAU,sBAAsB,KAAK,MAC7D,SAAA,CAAAA,EAAAA,OAAC,SAAM,SAAA,UAAA,EAAP,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,EAAA,aAAA,CAAA,EAAAC,MAAe,EACfD,EAAAA,OAAC,MAAA,CAAI,UAAU,uBAAA,EAAf,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,EAAA,aAAA,CAAA,EAAAC,MAAsC,CAAA,CAAA,EAFxC,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,EAAA,aAAA,CAAA,EAAAA,MAGA,EAGWC,GAAqBA,IAChCF,EAAAA,OAAC,MAAA,CAAI,QAAQ,YAAY,UAAU,kBAAkB,KAAK,MACxD,SAAA,CAAAA,EAAAA,OAAC,SAAM,SAAA,UAAA,EAAP,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,GAAA,aAAA,CAAA,EAAAC,MAAe,EACfD,EAAAA,OAAC,MAAA,CAAI,UAAU,mBAAA,EAAf,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,GAAA,aAAA,CAAA,EAAAC,MAAkC,CAAA,CAAA,EAFpC,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAGA,EAGWE,GAAuBA,IAClCH,EAAAA,OAAC,MAAA,CAAI,IAAKF,EAAM,IAAI,WAAW,UAAU,mBAAzC,OAAA,GAAA,CAAA,SAAA,qFAAA,WAAA,GAAA,aAAA,CAAA,EAAAG,MAA0D,ECdtDG,EAAS,WAGTC,EAAO,GACPC,EAAO,EACPC,EAAO,GACPC,GAAO,GACPC,GAAO,IACPC,EAAc,GACdC,EAAW,IACXC,EAAY,IAGZC,GAAgB,QAChBC,GAAgB,aAChBC,GAAkB,4BAGlBC,GAAS,CACd,SAAY,kDACZ,YAAa,iDACb,gBAAiB,eAClB,EAGMC,EAAgBZ,EAAOC,EACvBY,EAAQ,KAAK,MACbC,EAAqB,OAAO,aAUlC,SAASC,EAAMC,EAAM,CACpB,MAAM,IAAI,WAAWL,GAAOK,CAAI,CAAC,CAClC,CAUA,SAASC,GAAIC,EAAOC,EAAU,CAC7B,MAAMC,EAAS,CAAA,EACf,IAAIC,EAASH,EAAM,OACnB,KAAOG,KACND,EAAOC,CAAM,EAAIF,EAASD,EAAMG,CAAM,CAAC,EAExC,OAAOD,CACR,CAYA,SAASE,EAAUC,EAAQJ,EAAU,CACpC,MAAMK,EAAQD,EAAO,MAAM,GAAG,EAC9B,IAAIH,EAAS,GACTI,EAAM,OAAS,IAGlBJ,EAASI,EAAM,CAAC,EAAI,IACpBD,EAASC,EAAM,CAAC,GAGjBD,EAASA,EAAO,QAAQb,GAAiB,GAAM,EAC/C,MAAMe,EAASF,EAAO,MAAM,GAAG,EACzBG,EAAUT,GAAIQ,EAAQN,CAAQ,EAAE,KAAK,GAAG,EAC9C,OAAOC,EAASM,CACjB,CAeA,SAASC,EAAWC,EAAQ,CAC3B,MAAMC,EAAS,CAAA,EACf,IAAIC,EAAU,EACd,MAAMT,EAASO,EAAO,OACtB,KAAOE,EAAUT,GAAQ,CACxB,MAAMU,EAAQH,EAAO,WAAWE,GAAS,EACzC,GAAIC,GAAS,OAAUA,GAAS,OAAUD,EAAUT,EAAQ,CAE3D,MAAMW,EAAQJ,EAAO,WAAWE,GAAS,GACpCE,EAAQ,QAAW,MACvBH,EAAO,OAAOE,EAAQ,OAAU,KAAOC,EAAQ,MAAS,KAAO,GAI/DH,EAAO,KAAKE,CAAK,EACjBD,IAEJ,MACGD,EAAO,KAAKE,CAAK,CAEpB,CACC,OAAOF,CACR,CAUA,MAAMI,GAAaC,GAAc,OAAO,cAAc,GAAGA,CAAU,EAW7DC,GAAe,SAASC,EAAW,CACxC,OAAIA,GAAa,IAAQA,EAAY,GAC7B,IAAMA,EAAY,IAEtBA,GAAa,IAAQA,EAAY,GAC7BA,EAAY,GAEhBA,GAAa,IAAQA,EAAY,IAC7BA,EAAY,GAEbpC,CACR,EAaMqC,EAAe,SAASC,EAAOC,EAAM,CAG1C,OAAOD,EAAQ,GAAK,IAAMA,EAAQ,MAAQC,GAAQ,IAAM,EACzD,EAOMC,EAAQ,SAASC,EAAOC,EAAWC,EAAW,CACnD,IAAIC,EAAI,EAGR,IAFAH,EAAQE,EAAY9B,EAAM4B,EAAQrC,EAAI,EAAIqC,GAAS,EACnDA,GAAS5B,EAAM4B,EAAQC,CAAS,EACFD,EAAQ7B,EAAgBV,GAAQ,EAAG0C,GAAK5C,EACrEyC,EAAQ5B,EAAM4B,EAAQ7B,CAAa,EAEpC,OAAOC,EAAM+B,GAAKhC,EAAgB,GAAK6B,GAASA,EAAQtC,GAAK,CAC9D,EASM0C,EAAS,SAASC,EAAO,CAE9B,MAAMjB,EAAS,CAAA,EACTkB,EAAcD,EAAM,OAC1B,IAAIE,EAAI,EACJC,EAAI3C,EACJ4C,EAAO7C,EAMP8C,EAAQL,EAAM,YAAYvC,CAAS,EACnC4C,EAAQ,IACXA,EAAQ,GAGT,QAASC,EAAI,EAAGA,EAAID,EAAO,EAAEC,EAExBN,EAAM,WAAWM,CAAC,GAAK,KAC1BrC,EAAM,WAAW,EAElBc,EAAO,KAAKiB,EAAM,WAAWM,CAAC,CAAC,EAMhC,QAASC,EAAQF,EAAQ,EAAIA,EAAQ,EAAI,EAAGE,EAAQN,GAAwC,CAO3F,MAAMO,EAAON,EACb,QAASO,EAAI,EAAGX,EAAI5C,GAA0B4C,GAAK5C,EAAM,CAEpDqD,GAASN,GACZhC,EAAM,eAAe,EAGtB,MAAMuB,EAAQH,GAAaW,EAAM,WAAWO,GAAO,CAAC,EAEhDf,GAAStC,GACZe,EAAM,eAAe,EAElBuB,EAAQzB,GAAOd,EAASiD,GAAKO,CAAC,GACjCxC,EAAM,UAAU,EAGjBiC,GAAKV,EAAQiB,EACb,MAAMC,EAAIZ,GAAKM,EAAOjD,EAAQ2C,GAAKM,EAAOhD,EAAOA,EAAO0C,EAAIM,EAE5D,GAAIZ,EAAQkB,EACX,MAGD,MAAMC,EAAazD,EAAOwD,EACtBD,EAAI1C,EAAMd,EAAS0D,CAAU,GAChC1C,EAAM,UAAU,EAGjBwC,GAAKE,CAER,CAEE,MAAMC,EAAM7B,EAAO,OAAS,EAC5BqB,EAAOV,EAAMQ,EAAIM,EAAMI,EAAKJ,GAAQ,CAAC,EAIjCzC,EAAMmC,EAAIU,CAAG,EAAI3D,EAASkD,GAC7BlC,EAAM,UAAU,EAGjBkC,GAAKpC,EAAMmC,EAAIU,CAAG,EAClBV,GAAKU,EAGL7B,EAAO,OAAOmB,IAAK,EAAGC,CAAC,CAEzB,CAEC,OAAO,OAAO,cAAc,GAAGpB,CAAM,CACtC,EASM8B,EAAS,SAASb,EAAO,CAC9B,MAAMjB,EAAS,CAAA,EAGfiB,EAAQnB,EAAWmB,CAAK,EAGxB,MAAMC,EAAcD,EAAM,OAG1B,IAAIG,EAAI3C,EACJmC,EAAQ,EACRS,EAAO7C,EAGX,UAAWuD,KAAgBd,EACtBc,EAAe,KAClB/B,EAAO,KAAKf,EAAmB8C,CAAY,CAAC,EAI9C,MAAMC,EAAchC,EAAO,OAC3B,IAAIiC,EAAiBD,EAWrB,IALIA,GACHhC,EAAO,KAAKtB,CAAS,EAIfuD,EAAiBf,GAAa,CAIpC,IAAI,EAAIhD,EACR,UAAW6D,KAAgBd,EACtBc,GAAgBX,GAAKW,EAAe,IACvC,EAAIA,GAMN,MAAMG,EAAwBD,EAAiB,EAC3C,EAAIb,EAAIpC,GAAOd,EAAS0C,GAASsB,CAAqB,GACzDhD,EAAM,UAAU,EAGjB0B,IAAU,EAAIQ,GAAKc,EACnBd,EAAI,EAEJ,UAAWW,KAAgBd,EAI1B,GAHIc,EAAeX,GAAK,EAAER,EAAQ1C,GACjCgB,EAAM,UAAU,EAEb6C,IAAiBX,EAAG,CAEvB,IAAIe,EAAIvB,EACR,QAASG,EAAI5C,GAA0B4C,GAAK5C,EAAM,CACjD,MAAMwD,EAAIZ,GAAKM,EAAOjD,EAAQ2C,GAAKM,EAAOhD,EAAOA,EAAO0C,EAAIM,EAC5D,GAAIc,EAAIR,EACP,MAED,MAAMS,EAAUD,EAAIR,EACdC,EAAazD,EAAOwD,EAC1B3B,EAAO,KACNf,EAAmBuB,EAAamB,EAAIS,EAAUR,EAAY,CAAC,CAAC,CAClE,EACKO,EAAInD,EAAMoD,EAAUR,CAAU,CACnC,CAEI5B,EAAO,KAAKf,EAAmBuB,EAAa2B,EAAG,CAAC,CAAC,CAAC,EAClDd,EAAOV,EAAMC,EAAOsB,EAAuBD,IAAmBD,CAAW,EACzEpB,EAAQ,EACR,EAAEqB,CACN,CAGE,EAAErB,EACF,EAAEQ,CAEJ,CACC,OAAOpB,EAAO,KAAK,EAAE,CACtB,EAaMqC,GAAY,SAASpB,EAAO,CACjC,OAAOxB,EAAUwB,EAAO,SAASlB,EAAQ,CACxC,OAAOpB,GAAc,KAAKoB,CAAM,EAC7BiB,EAAOjB,EAAO,MAAM,CAAC,EAAE,YAAW,CAAE,EACpCA,CACL,CAAE,CACF,EAaMuC,GAAU,SAASrB,EAAO,CAC/B,OAAOxB,EAAUwB,EAAO,SAASlB,EAAQ,CACxC,OAAOnB,GAAc,KAAKmB,CAAM,EAC7B,OAAS+B,EAAO/B,CAAM,EACtBA,CACL,CAAE,CACF,EAKMwC,GAAW,CAMhB,QAAW,QAQX,KAAQ,CACP,OAAUzC,EACV,OAAUM,EACZ,EACC,OAAUY,EACV,OAAUc,EACV,QAAWQ,GACX,UAAaD,EACd,ECvbMG,GAAsBC,GAA0BC,EAAAA,cAAoB,MAAO,CAAE,MAAO,6BAA8B,OAAQ,GAAI,QAAS,iBAAkB,MAAO,GAAI,GAAGD,GAAyBC,EAAAA,cAAoB,OAAQ,CAAE,EAAG,+KAA+K,CAAE,CAAC,ECM5YC,GAAaA,CAAC,CAAEC,UAAAA,KAAgB,CAC3C,MAAMC,EAAUC,EAAeC,GAASA,EAAMC,MAAM,CAAC,WAAYJ,CAAS,CAAC,CAAC,EAE5E,OAAKC,EAKH/E,EAAAA,OAACmF,EAAA,CAAK,GAAI,KAAKJ,EAAQK,IAAI,MAAM,CAAC,GAAI,UAAU,sCAAsC,0BAAyBN,EAC7G,SAAA,CAAA9E,EAAAA,OAACqF,EAAA,CAAO,QAAAN,EAAkB,KAAM,EAAA,EAAhC,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAA9E,MAAmC,EACnCD,EAAAA,OAAC,OAAI,wBAAyB,CAAEsF,OAAQP,EAAQK,IAAI,mBAAmB,CAAA,GAAvE,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAnF,MAA2E,CAAA,CAAA,EAF7E,OAAA,GAAA,CAAA,SAAA,6GAAA,WAAA,GAAA,aAAA,CAAA,EAAAA,MAGA,EAPO,IASX,ECfasF,GAAkDA,CAAC,CAC9DT,UAAAA,CACF,IACE9E,EAAAA,OAACwF,EAAA,CACC,GAAE,gCACF,eAAe,mBACf,OAAQ,CAAEC,KAAMzF,SAAC6E,IAAW,UAAAC,CAAA,EAAZ,OAAA,GAAA,CAAA,SAAA,iGAAA,WAAA,GAAA,aAAA,EAAA,EAAA7E,MAAiC,CAAA,EAEhD,SAACyF,GACA1F,EAAAA,OAAC,MAAA,CAAI,UAAU,mBACb,SAAA,CAAAA,EAAAA,OAACE,GAAA,GAAD,OAAA,GAAA,CAAA,SAAA,iGAAA,WAAA,GAAA,aAAA,CAAA,EAAAD,MAAS,EACRyF,CAAAA,CAAAA,EAFH,OAAA,GAAA,CAAA,SAAA,iGAAA,WAAA,GAAA,aAAA,CAAA,EAAAzF,MAGA,CAAA,EATJ,OAAA,GAAA,CAAA,SAAA,iGAAA,WAAA,EAAA,aAAA,CAAA,EAAAA,MAWA,ECGI0F,EAAc,OAEdC,GAAahE,GACVA,EACJiE,MAAM,GAAG,EACTvE,IAAIwE,GAAQA,EAAKC,QAAQJ,CAAW,IAAM,EAAIlB,GAASvB,OAAO4C,EAAKE,MAAML,EAAYjE,MAAM,CAAC,EAAIoE,CAAI,EACpGG,KAAK,GAAG,EAGPC,GAAcC,GAAO,CACzB,MAAMC,EAASC,SAASC,cAAc,GAAG,EACzCF,OAAAA,EAAOG,KAAOJ,EACPC,EAAOI,QAChB,EAEMC,GAAY,IAAIC,UAEhBC,GAAcC,GAAQ,CAC1B,MAAMP,EAAWI,GAAUI,gBAAgBD,EAAM,WAAW,EAAEE,gBACxDC,EAASV,EAASW,cAAc,QAAQ,EAE9C,OAAID,GACEA,EAAOE,IAAIlB,QAAQ,GAAG,IAAM,GAC9BgB,EAAOE,KAAO,IAEdF,EAAOE,KAAO,IAGhBF,EAAOE,KAAO,yBAIPZ,EAASW,cAAc,MAAM,EAAEE,WAGjCN,CACT,EAEA,MAAqBO,WAAaC,EAAAA,aAAc,CAAhD,kCAQEnC,EAAAA,aAAQ,CACNoC,cAAe,GACfC,SAAU,GACVC,SAAU,CAAC,KAAK5C,MAAM6C,SAAAA,GAqBxBC,EAAAA,wBAAmBA,IAAM,CACvB,KAAKC,SAAS,CAAEJ,SAAU,EAAA,CAAM,CAAA,GAGlCK,EAAAA,+BAA2BC,GAAM,CAC/BA,EAAEC,gBAAAA,CAAgB,GAGpBC,EAAAA,cAASC,GAAK,CACZ,KAAKC,KAAOD,CAAAA,GAGdE,EAAAA,uBAAkBA,IAAM,CACtB,KAAKP,SAAS,CAAEL,cAAe,EAAA,CAAM,CAAA,GAGvCa,EAAAA,oBAAeN,GAAK,CAClBA,EAAEO,eAAAA,EACFP,EAAEC,gBAAAA,EACF,KAAKH,SAAS,CAAEH,SAAU,EAAA,CAAM,CAAA,GArClCa,iCAAkCC,EAAW,CACtCC,EAAG,KAAK3D,MAAM4D,KAAMF,EAAUE,IAAI,GACrC,KAAKb,SAAS,CAAEJ,SAAU,GAAOD,cAAe,GAAO,EAGrD,KAAK1C,MAAM6C,YAAca,EAAUb,WACrC,KAAKE,SAAS,CAAEH,SAAU,CAACc,EAAUb,UAAW,CAClD,CAGFgB,mBAAqB,CACnBC,OAAOC,iBAAiB,SAAU,KAAKC,aAAc,CAAEC,QAAS,GAAM,CAAA,CAGxEC,sBAAwB,CACtBJ,OAAOK,oBAAoB,SAAU,KAAKH,YAAY,CAAA,CAyBxDI,aAAe,CACb,KAAM,CAAER,KAAAA,GAAS,KAAK5D,MAChBqE,EAAU,CAAE1D,OAAQqB,GAAY4B,EAAKnD,IAAI,MAAM,CAAC,CAAA,EAEtD,OACEpF,EAAAA,OAAC,MAAA,CACC,IAAK,KAAK8H,OACV,UAAU,uCACV,wBAAyBkB,EACzB,MAAO,CAAEC,YAAa,QAAA,CAAS,EAJjC,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,CAImC,CAKvCC,QAAU,OACR,KAAM,CAAEX,KAAAA,GAAS,KAAK5D,MAChB,CAAE2C,SAAAA,EAAUC,SAAAA,CAAAA,EAAa,KAAKtC,MAEpC,GAAIsD,IAAS,KACX,OAAO,KAGT,MAAMY,EAAcZ,EAAKnD,IAAI,eAAe,EAAE1D,SAAW,EAAIkE,GAAWM,GAAYqC,EAAKnD,IAAI,KAAK,CAAC,CAAC,EAAImD,EAAKnD,IAAI,eAAe,EAC1HgE,EAAcb,EAAKnD,IAAI,MAAM,IAAM,QACnCiE,EAAcd,EAAKnD,IAAI,UAAU,GAAK,GACtCkE,IAAef,EAAAA,EAAKnD,IAAI,OAAO,IAAhBmD,YAAAA,EAAmB7G,QAAS,GAAK6G,EAAKnD,IAAI,OAAO,EAAImD,EAAKnD,IAAI,QAAQ,GAAMgE,EAC3FG,EAAc,CAAC,CAAChB,EAAKrD,MAAM,CAAC,UAAW,EAAG,WAAW,CAAC,EAEtDsE,EACJxJ,EAAAA,OAAC,MAAA,CAAI,UAAU,uBAAuB,IAAI,OACxC,SAAA,CAAAA,EAAAA,OAAC,OAAA,CAAK,UAAU,oBACd,SAAA,CAAAA,SAAC,OAAA,CAAK,KAAMqJ,EAAWF,SAAAA,CAAAA,EAAvB,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAgC,EAC/BZ,EAAKnD,IAAI,cAAc,GAAKpF,EAAAA,OAAAyJ,EAAAA,SAAA,CAAE,SAAA,CAAA,eAAIC,EAAA,CAAkB,UAAWnB,EAAKnD,IAAI,cAAc,CAAA,EAArD,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAuD,CAAA,CAAA,EAA5D,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA+D,CAAA,CAAA,EAF9F,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,EAEApF,EAAAA,OAAC,SAAA,CAAO,UAAU,qBAAqB,MAAOuI,EAAKnD,IAAI,OAAO,EAAG,KAAMiE,EAAWd,SAAAA,EAAKnD,IAAI,OAAO,CAAA,EAAlG,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAoG,EAEnG,CAACmE,IAAehB,EAAKnD,IAAI,aAAa,EAAE1D,OAAS,EAAI1B,EAAAA,OAAC,OAAA,CAAK,UAAU,sBAAsB,SAAAA,EAAAA,OAACwF,GAAiB,GAAE,sBAAuB,eAAe,YAAY,OAAQ,CAAEC,KAAMzF,EAAAA,OAAC,SAAA,CAAQuI,SAAAA,EAAKnD,IAAI,aAAa,CAAA,EAA/B,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,GAAA,EAAA,IAAiC,IAAvH,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,GAAA,EAAA,OAAtC,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA4K,EAAUpF,EAAAA,OAAC,OAAA,CAAK,UAAU,2BAA2B,KAAMqJ,EAAWd,SAAAA,EAAKnD,IAAI,aAAa,CAAA,EAAlF,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,GAAA,EAAA,IAAoF,EAAA,CAAA,EARlU,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IASA,EAGIuE,EAAiB,CACrBC,WAAYrC,EAAW,KAAO,QAAA,EAG5B+B,GAAcf,EAAKnD,IAAI,MAAM,IAAM,QACrCuE,EAAeV,YAAc,SACpBK,EACTK,EAAeV,YAAc,WAE7BU,EAAeV,YAAc,EAG/B,IAAIY,EAEAC,EACF9J,EAAAA,OAAC+J,EAAA,CACC,UAAWC,EAAW,6BAA8B,CAClD,qCAAsCzC,GAAY,KAAKtC,MAAMoC,aAAAA,CAC9D,EACD,KAAMkB,EAAKnD,IAAI,UAAU,EACzB,MAAO,CAAC6E,CAAAA,EALV,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAAA,EASF,MAAMC,EAAuB3B,EAAKnD,IAAI,mBAAmB,EACnD+E,WAAa,MAAA,CAAI,IAAK5B,EAAKnD,IAAI,OAAO,EAAG,IAAK8E,EAAsB,MAAOA,EAAsB,KAAMb,EAAU,MAAOM,EAAgB,OAAQ,KAAK1B,gBAAiB,UAAU,4BAApK,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA8L,EAEhN,IAAImC,EACFpK,EAAAA,OAAC,SAAA,CAAO,KAAK,SAAS,QAAS,KAAKkI,aAAc,UAAU,0BAC1D,SAAAlI,EAAAA,OAAC,OAAA,CAAK,UAAU,iCACd,SAAA,CAAAA,SAACwF,EAAA,CAAiB,8BAA8B,eAAe,mBAAA,EAA/D,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAkF,EAClFxF,EAAAA,OAAC,QAAK,UAAU,kCAAkC,kBAACwF,EAAA,CAAiB,uBAAuB,eAAe,eAAA,EAAxD,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAuE,CAAA,EAAzH,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA4H,CAAA,CAAA,EAF9H,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,CAAA,EAJF,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAKA,EASF,OANA4E,EACEpK,EAAAA,OAAC,MAAA,CAAI,UAAWgK,EAAW,iBAAkB,CAAE,2BAA4BzC,CAAAA,CAAU,EAClF6C,SAAAA,CAAAA,EADH,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAEA,EAGEhB,GACE9B,EACFuC,EAAQ,KAAKd,YAAAA,EAEbc,EACE7J,EAAAA,OAAC,MAAA,CAAI,UAAU,qBACZ8J,SAAAA,CAAAA,EACAK,EAEA5C,EACCvH,EAAAA,OAAC,MAAA,CAAI,UAAU,uBAAuB,QAAS,KAAKyH,iBAAkB,KAAK,OACzE,SAAAzH,EAAAA,OAAC,MAAA,CACC,SAAA,CAAAA,EAAAA,OAAC,SAAA,CAAO,KAAK,SAAS,QAAS,KAAKyH,iBAAkB,SAAAzH,EAAAA,OAACqK,EAAA,CAAK,GAAG,OAAO,KAAMC,CAAAA,EAAtB,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAoC,CAAA,EAA1F,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA6F,WAC5F,IAAA,CAAE,KAAM/B,EAAKnD,IAAI,KAAK,EAAG,QAAS,KAAKuC,wBAAyB,OAAO,SAAS,IAAI,WAAW,SAAA3H,EAAAA,OAACqK,GAAK,GAAG,gBAAgB,KAAME,GAA/B,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,GAAA,EAAA,IAA6C,CAAA,EAA7I,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAgJ,CAAA,CAAA,EAFlJ,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAGA,CAAA,EAJF,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAKA,EACEH,CAAAA,CAAAA,EAXN,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAYA,EAKFpK,SAAC,OAAI,UAAWgK,EAAW,cAAe,CAAEQ,SAAUlB,EAAY,EAAG,IAAK,KAAKxB,OAAQ,QAASP,EAAW,KAAO,KAAKW,aAAc,KAAMX,EAAW,SAAW,KAC9JsC,SAAAA,CAAAA,EACD7J,EAAAA,OAAC,IAAA,CAAE,KAAMuI,EAAKnD,IAAI,KAAK,EAAG,OAAO,SAAS,IAAI,WAAYoE,SAAAA,CAAAA,EAA1D,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAsE,CAAA,CAAA,EAFxE,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,IAEOjB,EAAKnD,IAAI,OAAO,EACzByE,EACE7J,EAAAA,OAAC,MAAA,CAAI,UAAU,qBACZ8J,SAAAA,CAAAA,EACAK,CAAAA,CAAAA,EAFH,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,EAGFN,EACE7J,EAAAA,OAAC,OAAI,UAAU,qBACb,kBAACqK,EAAA,CAAK,GAAG,YAAY,KAAMI,EAAAA,EAA3B,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAA2C,CAAA,EAD7C,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAEA,EAKFzK,EAAAA,OAAAyJ,WAAA,CACE,SAAA,CAAAzJ,EAAAA,OAAC,IAAA,CAAE,KAAMuI,EAAKnD,IAAI,KAAK,EAAG,UAAW4E,EAAW,cAAe,CAAEQ,SAAUlB,EAAYoB,WAAYnB,CAAAA,CAAY,EAAG,OAAO,SAAS,IAAI,WAAW,IAAK,KAAKzB,OACxJ+B,SAAAA,CAAAA,EACAL,CAAAA,CAAAA,EAFH,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAGA,EAECD,GAAcvJ,EAAAA,OAACuF,GAAA,CAAe,UAAWgD,EAAKrD,MAAM,CAAC,UAAW,EAAG,WAAW,CAAC,CAAA,EAAjE,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,EAAA,EAAA,IAAmE,CAAA,CAAA,EANpF,OAAA,GAAA,CAAA,SAAA,qGAAA,WAAA,IAAA,aAAA,CAAA,EAAA,IAOA,EAAA,CAIN","x_google_ignoreList":[2]}