{"version":3,"file":"account_gallery-index-Dj_5tRfE.js","sources":["../../app/javascript/material-icons/400-24px/headphones-fill.svg?react","../../app/javascript/material-icons/400-24px/movie-fill.svg?react","../../app/javascript/mastodon/features/account_gallery/components/media_item.tsx","../../app/javascript/mastodon/features/account_gallery/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgHeadphonesFill = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"M360-120H200q-33 0-56.5-23.5T120-200v-280q0-75 28.5-140.5t77-114q48.5-48.5 114-77T480-840q75 0 140.5 28.5t114 77q48.5 48.5 77 114T840-480v280q0 33-23.5 56.5T760-120H600v-320h160v-40q0-117-81.5-198.5T480-760q-117 0-198.5 81.5T200-480v40h160v320Z\" }));\nexport default SvgHeadphonesFill;\n","import * as React from \"react\";\nconst SvgMovieFill = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"m160-800 80 160h120l-80-160h80l80 160h120l-80-160h80l80 160h120l-80-160h120q33 0 56.5 23.5T880-720v480q0 33-23.5 56.5T800-160H160q-33 0-56.5-23.5T80-240v-480q0-33 23.5-56.5T160-800Z\" }));\nexport default SvgMovieFill;\n","import { useState, useCallback } from 'react';\n\nimport classNames from 'classnames';\n\nimport HeadphonesIcon from '@/material-icons/400-24px/headphones-fill.svg?react';\nimport MovieIcon from '@/material-icons/400-24px/movie-fill.svg?react';\nimport VisibilityOffIcon from '@/material-icons/400-24px/visibility_off.svg?react';\nimport { AltTextBadge } from 'mastodon/components/alt_text_badge';\nimport { Blurhash } from 'mastodon/components/blurhash';\nimport { Icon } from 'mastodon/components/icon';\nimport { formatTime } from 'mastodon/features/video';\nimport { autoPlayGif, displayMedia, useBlurhash } from 'mastodon/initial_state';\nimport type { Status, MediaAttachment } from 'mastodon/models/status';\nimport { useAppSelector } from 'mastodon/store';\n\nexport const MediaItem: React.FC<{\n  attachment: MediaAttachment;\n  onOpenMedia: (arg0: MediaAttachment) => void;\n}> = ({ attachment, onOpenMedia }) => {\n  const account = useAppSelector((state) =>\n    state.accounts.get(attachment.getIn(['status', 'account']) as string),\n  );\n  const [visible, setVisible] = useState(\n    (displayMedia !== 'hide_all' &&\n      !attachment.getIn(['status', 'sensitive'])) ||\n      displayMedia === 'show_all',\n  );\n  const [loaded, setLoaded] = useState(false);\n  const [error, setError] = useState(false);\n\n  const handleImageLoad = useCallback(() => {\n    setLoaded(true);\n  }, [setLoaded]);\n\n  const handleImageError = useCallback(() => {\n    setError(true);\n  }, [setError]);\n\n  const handleMouseEnter = useCallback(\n    (e: React.MouseEvent<HTMLVideoElement>) => {\n      if (e.target instanceof HTMLVideoElement) {\n        void e.target.play();\n      }\n    },\n    [],\n  );\n\n  const handleMouseLeave = useCallback(\n    (e: React.MouseEvent<HTMLVideoElement>) => {\n      if (e.target instanceof HTMLVideoElement) {\n        e.target.pause();\n        e.target.currentTime = 0;\n      }\n    },\n    [],\n  );\n\n  const handleClick = useCallback(\n    (e: React.MouseEvent<HTMLAnchorElement>) => {\n      if (e.button === 0 && !(e.ctrlKey || e.metaKey)) {\n        e.preventDefault();\n\n        if (visible) {\n          onOpenMedia(attachment);\n        } else {\n          setVisible(true);\n        }\n      }\n    },\n    [attachment, visible, onOpenMedia, setVisible],\n  );\n\n  const status = attachment.get('status') as Status;\n  const description = (attachment.getIn(['translation', 'description']) ||\n    attachment.get('description')) as string | undefined;\n  const previewUrl = attachment.get('preview_url') as string;\n  const fullUrl = attachment.get('url') as string;\n  const avatarUrl = account?.avatar_static;\n  const lang = status.get('language') as string;\n  const blurhash = attachment.get('blurhash') as string;\n  const statusId = status.get('id') as string;\n  const type = attachment.get('type') as string;\n\n  let thumbnail;\n\n  const badges = [];\n\n  if (description && description.length > 0) {\n    badges.push(<AltTextBadge key='alt' description={description} />);\n  }\n\n  if (!visible) {\n    thumbnail = (\n      <div className='media-gallery__item__overlay'>\n        <Icon id='eye-slash' icon={VisibilityOffIcon} />\n      </div>\n    );\n  } else if (type === 'audio') {\n    thumbnail = (\n      <>\n        <img\n          src={previewUrl || avatarUrl}\n          alt={description}\n          lang={lang}\n          onLoad={handleImageLoad}\n          onError={handleImageError}\n        />\n\n        <div className='media-gallery__item__overlay media-gallery__item__overlay--corner'>\n          <Icon id='music' icon={HeadphonesIcon} />\n        </div>\n      </>\n    );\n  } else if (type === 'image') {\n    const focusX = (attachment.getIn(['meta', 'focus', 'x']) || 0) as number;\n    const focusY = (attachment.getIn(['meta', 'focus', 'y']) || 0) as number;\n    const x = (focusX / 2 + 0.5) * 100;\n    const y = (focusY / -2 + 0.5) * 100;\n\n    thumbnail = (\n      <img\n        src={previewUrl}\n        alt={description}\n        lang={lang}\n        style={{ objectPosition: `${x}% ${y}%` }}\n        onLoad={handleImageLoad}\n        onError={handleImageError}\n      />\n    );\n  } else if (['video', 'gifv'].includes(type)) {\n    const duration = attachment.getIn([\n      'meta',\n      'original',\n      'duration',\n    ]) as number;\n\n    thumbnail = (\n      <div className='media-gallery__gifv'>\n        <video\n          className='media-gallery__item-gifv-thumbnail'\n          aria-label={description}\n          lang={lang}\n          src={fullUrl}\n          onMouseEnter={handleMouseEnter}\n          onMouseLeave={handleMouseLeave}\n          onLoadedData={handleImageLoad}\n          autoPlay={autoPlayGif}\n          playsInline\n          loop\n          muted\n        />\n\n        {type === 'video' && (\n          <div className='media-gallery__item__overlay media-gallery__item__overlay--corner'>\n            <Icon id='play' icon={MovieIcon} />\n          </div>\n        )}\n      </div>\n    );\n\n    if (type === 'gifv') {\n      badges.push(\n        <span\n          key='gif'\n          className='media-gallery__alt__label media-gallery__alt__label--non-interactive'\n        >\n          GIF\n        </span>,\n      );\n    } else {\n      badges.push(\n        <span\n          key='video'\n          className='media-gallery__alt__label media-gallery__alt__label--non-interactive'\n        >\n          {formatTime(Math.floor(duration))}\n        </span>,\n      );\n    }\n  }\n\n  return (\n    <div\n      className={classNames('media-gallery__item media-gallery__item--square', {\n        'media-gallery__item--error': error,\n      })}\n    >\n      <Blurhash\n        hash={blurhash}\n        className={classNames('media-gallery__preview', {\n          'media-gallery__preview--hidden': visible && loaded,\n        })}\n        dummy={!useBlurhash}\n      />\n\n      <a\n        className='media-gallery__item-thumbnail'\n        href={`/@${account?.acct}/${statusId}`}\n        onClick={handleClick}\n        target='_blank'\n        rel='noopener noreferrer'\n      >\n        {thumbnail}\n      </a>\n\n      {badges.length > 0 && (\n        <div className='media-gallery__item__badges'>{badges}</div>\n      )}\n    </div>\n  );\n};\n","import { useEffect, useCallback } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { createSelector } from '@reduxjs/toolkit';\nimport type { Map as ImmutableMap } from 'immutable';\nimport { List as ImmutableList } from 'immutable';\n\nimport { openModal } from 'mastodon/actions/modal';\nimport { expandAccountMediaTimeline } from 'mastodon/actions/timelines';\nimport { ColumnBackButton } from 'mastodon/components/column_back_button';\nimport { RemoteHint } from 'mastodon/components/remote_hint';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { AccountHeader } from 'mastodon/features/account_timeline/components/account_header';\nimport { LimitedAccountHint } from 'mastodon/features/account_timeline/components/limited_account_hint';\nimport BundleColumnError from 'mastodon/features/ui/components/bundle_column_error';\nimport Column from 'mastodon/features/ui/components/column';\nimport { useAccountId } from 'mastodon/hooks/useAccountId';\nimport { useAccountVisibility } from 'mastodon/hooks/useAccountVisibility';\nimport type { MediaAttachment } from 'mastodon/models/media_attachment';\nimport type { RootState } from 'mastodon/store';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nimport { MediaItem } from './components/media_item';\n\nconst getAccountGallery = createSelector(\n  [\n    (state: RootState, accountId: string) =>\n      (state.timelines as ImmutableMap<string, unknown>).getIn(\n        [`account:${accountId}:media`, 'items'],\n        ImmutableList(),\n      ) as ImmutableList<string>,\n    (state: RootState) => state.statuses,\n  ],\n  (statusIds, statuses) => {\n    let items = ImmutableList<MediaAttachment>();\n\n    statusIds.forEach((statusId) => {\n      const status = statuses.get(statusId) as\n        | ImmutableMap<string, unknown>\n        | undefined;\n\n      if (status) {\n        items = items.concat(\n          (\n            status.get('media_attachments') as ImmutableList<MediaAttachment>\n          ).map((media) => media.set('status', status)),\n        );\n      }\n    });\n\n    return items;\n  },\n);\n\nexport const AccountGallery: React.FC<{\n  multiColumn: boolean;\n}> = ({ multiColumn }) => {\n  const dispatch = useAppDispatch();\n  const accountId = useAccountId();\n  const attachments = useAppSelector((state) =>\n    accountId\n      ? getAccountGallery(state, accountId)\n      : ImmutableList<MediaAttachment>(),\n  );\n  const isLoading = useAppSelector((state) =>\n    (state.timelines as ImmutableMap<string, unknown>).getIn([\n      `account:${accountId}:media`,\n      'isLoading',\n    ]),\n  );\n  const hasMore = useAppSelector((state) =>\n    (state.timelines as ImmutableMap<string, unknown>).getIn([\n      `account:${accountId}:media`,\n      'hasMore',\n    ]),\n  );\n  const account = useAppSelector((state) =>\n    accountId ? state.accounts.get(accountId) : undefined,\n  );\n  const isAccount = !!account;\n\n  const { suspended, blockedBy, hidden } = useAccountVisibility(accountId);\n\n  const maxId = attachments.last()?.getIn(['status', 'id']) as\n    | string\n    | undefined;\n\n  useEffect(() => {\n    if (accountId && isAccount) {\n      void dispatch(expandAccountMediaTimeline(accountId));\n    }\n  }, [dispatch, accountId, isAccount]);\n\n  const handleLoadMore = useCallback(() => {\n    if (maxId) {\n      void dispatch(expandAccountMediaTimeline(accountId, { maxId }));\n    }\n  }, [dispatch, accountId, maxId]);\n\n  const handleOpenMedia = useCallback(\n    (attachment: MediaAttachment) => {\n      const statusId = attachment.getIn(['status', 'id']);\n      const lang = attachment.getIn(['status', 'language']);\n\n      if (attachment.get('type') === 'video') {\n        dispatch(\n          openModal({\n            modalType: 'VIDEO',\n            modalProps: {\n              media: attachment,\n              statusId,\n              lang,\n              options: { autoPlay: true },\n            },\n          }),\n        );\n      } else if (attachment.get('type') === 'audio') {\n        dispatch(\n          openModal({\n            modalType: 'AUDIO',\n            modalProps: {\n              media: attachment,\n              statusId,\n              lang,\n              options: { autoPlay: true },\n            },\n          }),\n        );\n      } else {\n        const media = attachment.getIn([\n          'status',\n          'media_attachments',\n        ]) as ImmutableList<MediaAttachment>;\n        const index = media.findIndex(\n          (x) => x.get('id') === attachment.get('id'),\n        );\n\n        dispatch(\n          openModal({\n            modalType: 'MEDIA',\n            modalProps: { media, index, statusId, lang },\n          }),\n        );\n      }\n    },\n    [dispatch],\n  );\n\n  if (accountId === null) {\n    return <BundleColumnError multiColumn={multiColumn} errorType='routing' />;\n  }\n\n  let emptyMessage;\n\n  if (accountId) {\n    if (suspended) {\n      emptyMessage = (\n        <FormattedMessage\n          id='empty_column.account_suspended'\n          defaultMessage='Account suspended'\n        />\n      );\n    } else if (hidden) {\n      emptyMessage = <LimitedAccountHint accountId={accountId} />;\n    } else if (blockedBy) {\n      emptyMessage = (\n        <FormattedMessage\n          id='empty_column.account_unavailable'\n          defaultMessage='Profile unavailable'\n        />\n      );\n    } else if (attachments.isEmpty()) {\n      emptyMessage = <RemoteHint accountId={accountId} />;\n    } else {\n      emptyMessage = (\n        <FormattedMessage\n          id='empty_column.account_timeline'\n          defaultMessage='No posts found'\n        />\n      );\n    }\n  }\n\n  const forceEmptyState = suspended || blockedBy || hidden;\n\n  return (\n    <Column>\n      <ColumnBackButton />\n\n      <ScrollableList\n        className='account-gallery__container'\n        prepend={\n          accountId && (\n            <AccountHeader accountId={accountId} hideTabs={forceEmptyState} />\n          )\n        }\n        alwaysPrepend\n        append={accountId && <RemoteHint accountId={accountId} />}\n        scrollKey='account_gallery'\n        isLoading={isLoading}\n        hasMore={!forceEmptyState && hasMore}\n        onLoadMore={handleLoadMore}\n        emptyMessage={emptyMessage}\n        bindToDocument={!multiColumn}\n      >\n        {attachments.map((attachment) => (\n          <MediaItem\n            key={attachment.get('id') as string}\n            attachment={attachment}\n            onOpenMedia={handleOpenMedia}\n          />\n        ))}\n      </ScrollableList>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default AccountGallery;\n"],"names":["SvgHeadphonesFill","props","React.createElement","SvgMovieFill","MediaItem","attachment","onOpenMedia","account","useAppSelector","state","accounts","get","getIn","visible","setVisible","useState","displayMedia","loaded","setLoaded","error","setError","handleImageLoad","useCallback","handleImageError","handleMouseEnter","e","target","HTMLVideoElement","play","handleMouseLeave","pause","currentTime","handleClick","button","ctrlKey","metaKey","preventDefault","status","description","previewUrl","fullUrl","avatarUrl","avatar_static","lang","blurhash","statusId","type","thumbnail","badges","length","push","jsxDEV","AltTextBadge","this","Icon","VisibilityOffIcon","Fragment","HeadphonesIcon","focusX","focusY","x","y","objectPosition","includes","duration","autoPlayGif","MovieIcon","formatTime","Math","floor","classNames","Blurhash","useBlurhash","acct","getAccountGallery","createSelector","accountId","timelines","ImmutableList","statuses","statusIds","items","forEach","concat","map","media","set","AccountGallery","multiColumn","dispatch","useAppDispatch","useAccountId","attachments","isLoading","hasMore","isAccount","undefined","suspended","blockedBy","hidden","useAccountVisibility","maxId","last","useEffect","expandAccountMediaTimeline","handleLoadMore","handleOpenMedia","openModal","modalType","modalProps","options","autoPlay","index","findIndex","BundleColumnError","emptyMessage","FormattedMessage","LimitedAccountHint","isEmpty","RemoteHint","forceEmptyState","Column","ColumnBackButton","ScrollableList","AccountHeader"],"mappings":"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"}