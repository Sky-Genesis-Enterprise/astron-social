{"version":3,"file":"requests-B4nxp2dR.js","sources":["../../app/javascript/mastodon/features/notifications/components/notification_request.jsx","../../app/javascript/mastodon/features/notifications/requests.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { useCallback } from 'react';\n\nimport { defineMessages, useIntl } from 'react-intl';\n\nimport classNames from 'classnames';\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport DeleteIcon from '@/material-icons/400-24px/delete.svg?react';\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport { initBlockModal } from 'mastodon/actions/blocks';\nimport { initMuteModal } from 'mastodon/actions/mutes';\nimport { acceptNotificationRequest, dismissNotificationRequest } from 'mastodon/actions/notification_requests';\nimport { initReport } from 'mastodon/actions/reports';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { CheckBox } from 'mastodon/components/check_box';\nimport { IconButton } from 'mastodon/components/icon_button';\nimport { Dropdown } from 'mastodon/components/dropdown_menu';\nimport { makeGetAccount } from 'mastodon/selectors';\nimport { toCappedNumber } from 'mastodon/utils/numbers';\n\nconst getAccount = makeGetAccount();\n\nconst messages = defineMessages({\n  accept: { id: 'notification_requests.accept', defaultMessage: 'Accept' },\n  dismiss: { id: 'notification_requests.dismiss', defaultMessage: 'Dismiss' },\n  view: { id: 'notification_requests.view', defaultMessage: 'View notifications' },\n  mute: { id: 'account.mute', defaultMessage: 'Mute @{name}' },\n  block: { id: 'account.block', defaultMessage: 'Block @{name}' },\n  report: { id: 'status.report', defaultMessage: 'Report @{name}' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n});\n\nexport const NotificationRequest = ({ id, accountId, notificationsCount, checked, showCheckbox, toggleCheck }) => {\n  const dispatch = useDispatch();\n  const account = useSelector(state => getAccount(state, accountId));\n  const intl = useIntl();\n  const { push: historyPush } = useHistory();\n\n  const handleDismiss = useCallback(() => {\n    dispatch(dismissNotificationRequest({ id }));\n  }, [dispatch, id]);\n\n  const handleAccept = useCallback(() => {\n    dispatch(acceptNotificationRequest({ id }));\n  }, [dispatch, id]);\n\n  const handleMute = useCallback(() => {\n    dispatch(initMuteModal(account));\n  }, [dispatch, account]);\n\n  const handleBlock = useCallback(() => {\n    dispatch(initBlockModal(account));\n  }, [dispatch, account]);\n\n  const handleReport = useCallback(() => {\n    dispatch(initReport(account));\n  }, [dispatch, account]);\n\n  const handleView = useCallback(() => {\n    historyPush(`/notifications/requests/${id}`);\n  }, [historyPush, id]);\n\n  const menu = [\n    { text: intl.formatMessage(messages.view), action: handleView },\n    null,\n    { text: intl.formatMessage(messages.accept), action: handleAccept },\n    null,\n    { text: intl.formatMessage(messages.mute, { name: account.username }), action: handleMute, dangerous: true },\n    { text: intl.formatMessage(messages.block, { name: account.username }), action: handleBlock, dangerous: true },\n    { text: intl.formatMessage(messages.report, { name: account.username }), action: handleReport, dangerous: true },\n  ];\n\n  const handleCheck = useCallback(() => {\n    toggleCheck(id);\n  }, [toggleCheck, id]);\n\n  const handleClick = useCallback((e) => {\n    if (showCheckbox) {\n      toggleCheck(id);\n      e.preventDefault();\n      e.stopPropagation();\n    }\n  }, [toggleCheck, id, showCheckbox]);\n\n  return (\n    /* eslint-disable-next-line jsx-a11y/no-static-element-interactions -- this is just a minor affordance, but we will need a comprehensive accessibility pass */\n    <div className={classNames('notification-request', showCheckbox && 'notification-request--forced-checkbox')} onClick={handleClick}>\n      <div className='notification-request__checkbox' aria-hidden={!showCheckbox}>\n        <CheckBox checked={checked} onChange={handleCheck} />\n      </div>\n      <Link to={`/notifications/requests/${id}`} className='notification-request__link' onClick={handleClick} title={account?.acct}>\n        <Avatar account={account} size={40} counter={toCappedNumber(notificationsCount)} />\n\n        <div className='notification-request__name'>\n          <div className='notification-request__name__display-name'>\n            <bdi><strong dangerouslySetInnerHTML={{ __html: account?.get('display_name_html') }} /></bdi>\n          </div>\n\n          <span>@{account?.get('acct')}</span>\n        </div>\n      </Link>\n\n      <div className='notification-request__actions'>\n        <IconButton iconComponent={DeleteIcon} onClick={handleDismiss} title={intl.formatMessage(messages.dismiss)} />\n        <Dropdown\n          items={menu}\n          icon='ellipsis-h'\n          iconComponent={MoreHorizIcon}\n          title={intl.formatMessage(messages.more)}\n        />\n      </div>\n    </div>\n  );\n};\n\nNotificationRequest.propTypes = {\n  id: PropTypes.string.isRequired,\n  accountId: PropTypes.string.isRequired,\n  notificationsCount: PropTypes.string.isRequired,\n  checked: PropTypes.bool,\n  showCheckbox: PropTypes.bool,\n  toggleCheck: PropTypes.func,\n};\n","import PropTypes from 'prop-types';\nimport { useRef, useCallback, useEffect, useState } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport ArrowDropDownIcon from '@/material-icons/400-24px/arrow_drop_down.svg?react';\nimport InventoryIcon from '@/material-icons/400-24px/inventory_2.svg?react';\nimport MoreHorizIcon from '@/material-icons/400-24px/more_horiz.svg?react';\nimport { openModal } from 'mastodon/actions/modal';\nimport {\n  fetchNotificationRequests,\n  expandNotificationRequests,\n  acceptNotificationRequests,\n  dismissNotificationRequests,\n} from 'mastodon/actions/notification_requests';\nimport { changeSetting } from 'mastodon/actions/settings';\nimport { CheckBox } from 'mastodon/components/check_box';\nimport Column from 'mastodon/components/column';\nimport ColumnHeader from 'mastodon/components/column_header';\nimport { Icon } from 'mastodon/components/icon';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { Dropdown } from 'mastodon/components/dropdown_menu';\n\nimport { NotificationRequest } from './components/notification_request';\nimport { PolicyControls } from './components/policy_controls';\nimport SettingToggle from './components/setting_toggle';\n\nconst messages = defineMessages({\n  title: { id: 'notification_requests.title', defaultMessage: 'Filtered notifications' },\n  maximize: { id: 'notification_requests.maximize', defaultMessage: 'Maximize' },\n  more: { id: 'status.more', defaultMessage: 'More' },\n  acceptMultiple: { id: 'notification_requests.accept_multiple', defaultMessage: '{count, plural, one {Accept # request…} other {Accept # requests…}}' },\n  dismissMultiple: { id: 'notification_requests.dismiss_multiple', defaultMessage: '{count, plural, one {Dismiss # request…} other {Dismiss # requests…}}' },\n  confirmAcceptMultipleTitle: { id: 'notification_requests.confirm_accept_multiple.title', defaultMessage: 'Accept notification requests?' },\n  confirmAcceptMultipleMessage: { id: 'notification_requests.confirm_accept_multiple.message', defaultMessage: 'You are about to accept {count, plural, one {one notification request} other {# notification requests}}. Are you sure you want to proceed?' },\n  confirmAcceptMultipleButton: { id: 'notification_requests.confirm_accept_multiple.button', defaultMessage: '{count, plural, one {Accept request} other {Accept requests}}' },\n  confirmDismissMultipleTitle: { id: 'notification_requests.confirm_dismiss_multiple.title', defaultMessage: 'Dismiss notification requests?' },\n  confirmDismissMultipleMessage: { id: 'notification_requests.confirm_dismiss_multiple.message', defaultMessage: \"You are about to dismiss {count, plural, one {one notification request} other {# notification requests}}. You won't be able to easily access {count, plural, one {it} other {them}} again. Are you sure you want to proceed?\" },\n  confirmDismissMultipleButton: { id: 'notification_requests.confirm_dismiss_multiple.button', defaultMessage: '{count, plural, one {Dismiss request} other {Dismiss requests}}' },\n});\n\nconst ColumnSettings = () => {\n  const dispatch = useDispatch();\n  const settings = useSelector((state) => state.settings.get('notifications'));\n\n  const onChange = useCallback(\n    (key, checked) => {\n      dispatch(changeSetting(['notifications', ...key], checked));\n    },\n    [dispatch],\n  );\n\n  return (\n    <div className='column-settings'>\n      <section>\n        <div className='column-settings__row'>\n          <SettingToggle\n            prefix='notifications'\n            settings={settings}\n            settingPath={['minimizeFilteredBanner']}\n            onChange={onChange}\n            label={\n              <FormattedMessage id='notification_requests.minimize_banner' defaultMessage='Minimize filtered notifications banner' />\n            }\n          />\n        </div>\n      </section>\n\n      <PolicyControls />\n    </div>\n  );\n};\n\nconst SelectRow = ({selectAllChecked, toggleSelectAll, selectedItems, selectionMode, setSelectionMode}) => {\n  const intl = useIntl();\n  const dispatch = useDispatch();\n\n  const selectedCount = selectedItems.length;\n\n  const handleAcceptMultiple = useCallback(() => {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        title: intl.formatMessage(messages.confirmAcceptMultipleTitle),\n        message: intl.formatMessage(messages.confirmAcceptMultipleMessage, { count: selectedItems.length }),\n        confirm: intl.formatMessage(messages.confirmAcceptMultipleButton, { count: selectedItems.length}),\n        onConfirm: () =>\n          dispatch(acceptNotificationRequests({ ids: selectedItems })),\n      },\n    }));\n  }, [dispatch, intl, selectedItems]);\n\n  const handleDismissMultiple = useCallback(() => {\n    dispatch(openModal({\n      modalType: 'CONFIRM',\n      modalProps: {\n        title: intl.formatMessage(messages.confirmDismissMultipleTitle),\n        message: intl.formatMessage(messages.confirmDismissMultipleMessage, { count: selectedItems.length }),\n        confirm: intl.formatMessage(messages.confirmDismissMultipleButton, { count: selectedItems.length}),\n        onConfirm: () =>\n          dispatch(dismissNotificationRequests({ ids: selectedItems })),\n      },\n    }));\n  }, [dispatch, intl, selectedItems]);\n\n  const handleToggleSelectionMode = useCallback(() => {\n    setSelectionMode((mode) => !mode);\n  }, [setSelectionMode]);\n\n  const menu = [\n    { text: intl.formatMessage(messages.acceptMultiple, { count: selectedCount }), action: handleAcceptMultiple },\n    { text: intl.formatMessage(messages.dismissMultiple, { count: selectedCount }), action: handleDismissMultiple },\n  ];\n\n  const handleSelectAll = useCallback(() => {\n    setSelectionMode(true);\n    toggleSelectAll();\n  }, [setSelectionMode, toggleSelectAll]);\n\n  return (\n    <div className='column-header__select-row'>\n      <div className='column-header__select-row__checkbox'>\n        <CheckBox checked={selectAllChecked} indeterminate={selectedCount > 0 && !selectAllChecked} onChange={handleSelectAll} />\n      </div>\n      <Dropdown\n        items={menu}\n        icons='ellipsis-h'\n        iconComponent={MoreHorizIcon}\n        direction='right'\n        title={intl.formatMessage(messages.more)}\n      >\n        <button className='dropdown-button column-header__select-row__select-menu' disabled={selectedItems.length === 0}>\n          <span className='dropdown-button__label'>\n            {selectedCount} selected\n          </span>\n          <Icon id='down' icon={ArrowDropDownIcon} />\n        </button>\n      </Dropdown>\n      <div className='column-header__select-row__mode-button'>\n        <button className='text-btn' tabIndex={0} onClick={handleToggleSelectionMode}>\n          {selectionMode ? (\n            <FormattedMessage id='notification_requests.exit_selection' defaultMessage='Done' />\n          ) :\n            (\n              <FormattedMessage id='notification_requests.edit_selection' defaultMessage='Edit' />\n            )}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nSelectRow.propTypes = {\n  selectAllChecked: PropTypes.func.isRequired,\n  toggleSelectAll: PropTypes.func.isRequired,\n  selectedItems: PropTypes.arrayOf(PropTypes.string).isRequired,\n  selectionMode: PropTypes.bool,\n  setSelectionMode: PropTypes.func.isRequired,\n};\n\nexport const NotificationRequests = ({ multiColumn }) => {\n  const columnRef = useRef();\n  const intl = useIntl();\n  const dispatch = useDispatch();\n  const isLoading = useSelector(state => state.notificationRequests.isLoading);\n  const notificationRequests = useSelector(state => state.notificationRequests.items);\n  const hasMore = useSelector(state => !!state.notificationRequests.next);\n\n  const [selectionMode, setSelectionMode] = useState(false);\n  const [checkedRequestIds, setCheckedRequestIds] = useState([]);\n  const [selectAllChecked, setSelectAllChecked] = useState(false);\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, [columnRef]);\n\n  const handleCheck = useCallback(id => {\n    setCheckedRequestIds(ids => {\n      const position = ids.indexOf(id);\n\n      if(position > -1)\n        ids.splice(position, 1);\n      else\n        ids.push(id);\n\n      setSelectAllChecked(ids.length === notificationRequests.length);\n\n      return [...ids];\n    });\n  }, [setCheckedRequestIds, notificationRequests]);\n\n  const toggleSelectAll = useCallback(() => {\n    setSelectAllChecked(checked => {\n      if(checked)\n        setCheckedRequestIds([]);\n      else\n        setCheckedRequestIds(notificationRequests.map(request => request.id));\n\n      return !checked;\n    });\n  }, [notificationRequests]);\n\n  const handleLoadMore = useCallback(() => {\n    dispatch(expandNotificationRequests());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchNotificationRequests());\n  }, [dispatch]);\n\n  return (\n    <Column bindToDocument={!multiColumn} ref={columnRef} label={intl.formatMessage(messages.title)}>\n      <ColumnHeader\n        icon='archive'\n        iconComponent={InventoryIcon}\n        title={intl.formatMessage(messages.title)}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n        showBackButton\n        appendContent={\n          notificationRequests.length > 0 && (\n            <SelectRow selectionMode={selectionMode} setSelectionMode={setSelectionMode} selectAllChecked={selectAllChecked} toggleSelectAll={toggleSelectAll} selectedItems={checkedRequestIds} />\n          )}\n      >\n        <ColumnSettings />\n      </ColumnHeader>\n\n      <ScrollableList\n        scrollKey='notification_requests'\n        trackScroll={!multiColumn}\n        bindToDocument={!multiColumn}\n        isLoading={isLoading}\n        showLoading={isLoading && notificationRequests.size === 0}\n        hasMore={hasMore}\n        onLoadMore={handleLoadMore}\n        emptyMessage={<FormattedMessage id='empty_column.notification_requests' defaultMessage='All clear! There is nothing here. When you receive new notifications, they will appear here according to your settings.' />}\n      >\n        {notificationRequests.map(request => (\n          <NotificationRequest\n            key={request.id}\n            id={request.id}\n            accountId={request.account_id}\n            notificationsCount={request.notifications_count}\n            showCheckbox={selectionMode}\n            checked={checkedRequestIds.includes(request.id)}\n            toggleCheck={handleCheck}\n          />\n        ))}\n      </ScrollableList>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\nNotificationRequests.propTypes = {\n  multiColumn: PropTypes.bool,\n};\n\nexport default NotificationRequests;\n"],"names":["getAccount","makeGetAccount","messages","defineMessages","accept","id","defaultMessage","dismiss","view","mute","block","report","more","NotificationRequest","accountId","notificationsCount","checked","showCheckbox","toggleCheck","dispatch","useDispatch","account","useSelector","state","intl","useIntl","push","historyPush","useHistory","handleDismiss","useCallback","dismissNotificationRequest","handleAccept","acceptNotificationRequest","handleMute","initMuteModal","handleBlock","initBlockModal","handleReport","initReport","handleView","menu","text","formatMessage","action","name","username","dangerous","handleCheck","handleClick","e","preventDefault","stopPropagation","jsxDEV","classNames","CheckBox","this","Link","acct","Avatar","toCappedNumber","__html","get","IconButton","DeleteIcon","Dropdown","MoreHorizIcon","title","maximize","acceptMultiple","dismissMultiple","confirmAcceptMultipleTitle","confirmAcceptMultipleMessage","confirmAcceptMultipleButton","confirmDismissMultipleTitle","confirmDismissMultipleMessage","confirmDismissMultipleButton","ColumnSettings","settings","onChange","key","changeSetting","SettingToggle","FormattedMessage","PolicyControls","SelectRow","selectAllChecked","toggleSelectAll","selectedItems","selectionMode","setSelectionMode","selectedCount","length","handleAcceptMultiple","openModal","modalType","modalProps","message","count","confirm","onConfirm","acceptNotificationRequests","ids","handleDismissMultiple","dismissNotificationRequests","handleToggleSelectionMode","mode","handleSelectAll","Icon","ArrowDropDownIcon","NotificationRequests","multiColumn","columnRef","useRef","isLoading","notificationRequests","items","hasMore","next","useState","checkedRequestIds","setCheckedRequestIds","setSelectAllChecked","handleHeaderClick","current","scrollTop","position","indexOf","splice","map","request","handleLoadMore","expandNotificationRequests","useEffect","fetchNotificationRequests","Column","ColumnHeader","InventoryIcon","ScrollableList","size","account_id","notifications_count","includes","Helmet"],"mappings":"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"}