{"version":3,"file":"search-index-fS8XVPf_.js","sources":["../../app/javascript/material-icons/400-24px/find_in_page.svg?react","../../app/javascript/mastodon/features/search/components/search_section.tsx","../../app/javascript/mastodon/features/search/index.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgFindInPage = (props) => /* @__PURE__ */ React.createElement(\"svg\", { xmlns: \"http://www.w3.org/2000/svg\", height: 24, viewBox: \"0 -960 960 960\", width: 24, ...props }, /* @__PURE__ */ React.createElement(\"path\", { d: \"m590-160 80 80H240q-33 0-56.5-23.5T160-160v-640q0-33 23.5-56.5T240-880h360l200 240v480q0 20-8.5 36.5T768-96L560-302q-17 11-37 16.5t-43 5.5q-66 0-113-47t-47-113q0-66 47-113t113-47q66 0 113 47t47 113q0 23-5.5 43T618-360l102 104v-356L562-800H240v640h350ZM480-360q33 0 56.5-23.5T560-440q0-33-23.5-56.5T480-520q-33 0-56.5 23.5T400-440q0 33 23.5 56.5T480-360Zm0-80Zm0 0Z\" }));\nexport default SvgFindInPage;\n","import { FormattedMessage } from 'react-intl';\n\nexport const SearchSection: React.FC<{\n  title: React.ReactNode;\n  onClickMore?: () => void;\n  children: React.ReactNode;\n}> = ({ title, onClickMore, children }) => (\n  <div className='search-results__section'>\n    <div className='search-results__section__header'>\n      <h3>{title}</h3>\n      {onClickMore && (\n        <button onClick={onClickMore}>\n          <FormattedMessage\n            id='search_results.see_all'\n            defaultMessage='See all'\n          />\n        </button>\n      )}\n    </div>\n\n    {children}\n  </div>\n);\n","import { useCallback, useEffect, useRef } from 'react';\n\nimport { useIntl, defineMessages, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\n\nimport FindInPageIcon from '@/material-icons/400-24px/find_in_page.svg?react';\nimport PeopleIcon from '@/material-icons/400-24px/group.svg?react';\nimport SearchIcon from '@/material-icons/400-24px/search.svg?react';\nimport TagIcon from '@/material-icons/400-24px/tag.svg?react';\nimport { submitSearch, expandSearch } from 'mastodon/actions/search';\nimport type { ApiSearchType } from 'mastodon/api_types/search';\nimport { Account } from 'mastodon/components/account';\nimport { Column } from 'mastodon/components/column';\nimport type { ColumnRef } from 'mastodon/components/column';\nimport { ColumnHeader } from 'mastodon/components/column_header';\nimport { CompatibilityHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { Icon } from 'mastodon/components/icon';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { StatusQuoteManager } from 'mastodon/components/status_quoted';\nimport { Search } from 'mastodon/features/compose/components/search';\nimport { useSearchParam } from 'mastodon/hooks/useSearchParam';\nimport type { Hashtag as HashtagType } from 'mastodon/models/tags';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nimport { SearchSection } from './components/search_section';\n\nconst messages = defineMessages({\n  title: { id: 'search_results.title', defaultMessage: 'Search for \"{q}\"' },\n});\n\nconst INITIAL_PAGE_LIMIT = 10;\nconst INITIAL_DISPLAY = 4;\n\nconst hidePeek = <T,>(list: T[]) => {\n  if (\n    list.length > INITIAL_PAGE_LIMIT &&\n    list.length % INITIAL_PAGE_LIMIT === 1\n  ) {\n    return list.slice(0, -2);\n  } else {\n    return list;\n  }\n};\n\nconst renderAccounts = (accountIds: string[]) =>\n  hidePeek<string>(accountIds).map((id) => <Account key={id} id={id} />);\n\nconst renderHashtags = (hashtags: HashtagType[]) =>\n  hidePeek<HashtagType>(hashtags).map((hashtag) => (\n    <Hashtag key={hashtag.name} hashtag={hashtag} />\n  ));\n\nconst renderStatuses = (statusIds: string[]) =>\n  hidePeek<string>(statusIds).map((id) => (\n    <StatusQuoteManager key={id} id={id} />\n  ));\n\ntype SearchType = 'all' | ApiSearchType;\n\nconst typeFromParam = (param?: string): SearchType => {\n  if (param && ['all', 'accounts', 'statuses', 'hashtags'].includes(param)) {\n    return param as SearchType;\n  } else {\n    return 'all';\n  }\n};\n\nexport const SearchResults: React.FC<{ multiColumn: boolean }> = ({\n  multiColumn,\n}) => {\n  const columnRef = useRef<ColumnRef>(null);\n  const intl = useIntl();\n  const [q] = useSearchParam('q');\n  const [type, setType] = useSearchParam('type');\n  const isLoading = useAppSelector((state) => state.search.loading);\n  const results = useAppSelector((state) => state.search.results);\n  const dispatch = useAppDispatch();\n  const mappedType = typeFromParam(type);\n  const trimmedValue = q?.trim() ?? '';\n\n  useEffect(() => {\n    if (trimmedValue.length > 0) {\n      void dispatch(\n        submitSearch({\n          q: trimmedValue,\n          type: mappedType === 'all' ? undefined : mappedType,\n        }),\n      );\n    }\n  }, [dispatch, trimmedValue, mappedType]);\n\n  const handleHeaderClick = useCallback(() => {\n    columnRef.current?.scrollTop();\n  }, []);\n\n  const handleSelectAll = useCallback(() => {\n    setType(null);\n  }, [setType]);\n\n  const handleSelectAccounts = useCallback(() => {\n    setType('accounts');\n  }, [setType]);\n\n  const handleSelectHashtags = useCallback(() => {\n    setType('hashtags');\n  }, [setType]);\n\n  const handleSelectStatuses = useCallback(() => {\n    setType('statuses');\n  }, [setType]);\n\n  const handleLoadMore = useCallback(() => {\n    if (mappedType !== 'all') {\n      void dispatch(expandSearch({ type: mappedType }));\n    }\n  }, [dispatch, mappedType]);\n\n  // We request 1 more result than we display so we can tell if there'd be a next page\n  const hasMore =\n    mappedType !== 'all' && results\n      ? results[mappedType].length > INITIAL_PAGE_LIMIT &&\n        results[mappedType].length % INITIAL_PAGE_LIMIT === 1\n      : false;\n\n  let filteredResults;\n\n  if (results) {\n    switch (mappedType) {\n      case 'all':\n        filteredResults =\n          results.accounts.length +\n            results.hashtags.length +\n            results.statuses.length >\n          0 ? (\n            <>\n              {results.accounts.length > 0 && (\n                <SearchSection\n                  key='accounts'\n                  title={\n                    <>\n                      <Icon id='users' icon={PeopleIcon} />\n                      <FormattedMessage\n                        id='search_results.accounts'\n                        defaultMessage='Profiles'\n                      />\n                    </>\n                  }\n                  onClickMore={handleSelectAccounts}\n                >\n                  {results.accounts.slice(0, INITIAL_DISPLAY).map((id) => (\n                    <Account key={id} id={id} />\n                  ))}\n                </SearchSection>\n              )}\n\n              {results.hashtags.length > 0 && (\n                <SearchSection\n                  key='hashtags'\n                  title={\n                    <>\n                      <Icon id='hashtag' icon={TagIcon} />\n                      <FormattedMessage\n                        id='search_results.hashtags'\n                        defaultMessage='Hashtags'\n                      />\n                    </>\n                  }\n                  onClickMore={handleSelectHashtags}\n                >\n                  {results.hashtags.slice(0, INITIAL_DISPLAY).map((hashtag) => (\n                    <Hashtag key={hashtag.name} hashtag={hashtag} />\n                  ))}\n                </SearchSection>\n              )}\n\n              {results.statuses.length > 0 && (\n                <SearchSection\n                  key='statuses'\n                  title={\n                    <>\n                      <Icon id='quote-right' icon={FindInPageIcon} />\n                      <FormattedMessage\n                        id='search_results.statuses'\n                        defaultMessage='Posts'\n                      />\n                    </>\n                  }\n                  onClickMore={handleSelectStatuses}\n                >\n                  {results.statuses.slice(0, INITIAL_DISPLAY).map((id) => (\n                    <StatusQuoteManager key={id} id={id} />\n                  ))}\n                </SearchSection>\n              )}\n            </>\n          ) : (\n            []\n          );\n        break;\n      case 'accounts':\n        filteredResults = renderAccounts(results.accounts);\n        break;\n      case 'hashtags':\n        filteredResults = renderHashtags(results.hashtags);\n        break;\n      case 'statuses':\n        filteredResults = renderStatuses(results.statuses);\n        break;\n    }\n  }\n\n  return (\n    <Column\n      bindToDocument={!multiColumn}\n      ref={columnRef}\n      label={intl.formatMessage(messages.title, { q })}\n    >\n      <ColumnHeader\n        icon={'search'}\n        iconComponent={SearchIcon}\n        title={intl.formatMessage(messages.title, { q })}\n        onClick={handleHeaderClick}\n        multiColumn={multiColumn}\n      />\n\n      <div className='explore__search-header'>\n        <Search singleColumn initialValue={trimmedValue} />\n      </div>\n\n      <div className='account__section-headline'>\n        <button\n          onClick={handleSelectAll}\n          className={mappedType === 'all' ? 'active' : undefined}\n        >\n          <FormattedMessage id='search_results.all' defaultMessage='All' />\n        </button>\n        <button\n          onClick={handleSelectAccounts}\n          className={mappedType === 'accounts' ? 'active' : undefined}\n        >\n          <FormattedMessage\n            id='search_results.accounts'\n            defaultMessage='Profiles'\n          />\n        </button>\n        <button\n          onClick={handleSelectHashtags}\n          className={mappedType === 'hashtags' ? 'active' : undefined}\n        >\n          <FormattedMessage\n            id='search_results.hashtags'\n            defaultMessage='Hashtags'\n          />\n        </button>\n        <button\n          onClick={handleSelectStatuses}\n          className={mappedType === 'statuses' ? 'active' : undefined}\n        >\n          <FormattedMessage\n            id='search_results.statuses'\n            defaultMessage='Posts'\n          />\n        </button>\n      </div>\n\n      <div className='explore__search-results' data-nosnippet>\n        <ScrollableList\n          scrollKey='search-results'\n          isLoading={isLoading}\n          showLoading={isLoading && !results}\n          onLoadMore={handleLoadMore}\n          hasMore={hasMore}\n          emptyMessage={\n            trimmedValue.length > 0 ? (\n              <FormattedMessage\n                id='search_results.no_results'\n                defaultMessage='No results.'\n              />\n            ) : (\n              <FormattedMessage\n                id='search_results.no_search_yet'\n                defaultMessage='Try searching for posts, profiles or hashtags.'\n              />\n            )\n          }\n          bindToDocument\n        >\n          {filteredResults}\n        </ScrollableList>\n      </div>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.title, { q })}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default SearchResults;\n"],"names":["SvgFindInPage","props","React.createElement","SearchSection","title","onClickMore","children","jsxDEV","this","FormattedMessage","messages","defineMessages","id","defaultMessage","INITIAL_PAGE_LIMIT","INITIAL_DISPLAY","hidePeek","list","length","slice","renderAccounts","accountIds","map","Account","renderHashtags","hashtags","hashtag","Hashtag","name","renderStatuses","statusIds","StatusQuoteManager","typeFromParam","param","includes","SearchResults","multiColumn","columnRef","useRef","intl","useIntl","q","useSearchParam","type","setType","isLoading","useAppSelector","state","search","loading","results","dispatch","useAppDispatch","mappedType","trimmedValue","trim","useEffect","submitSearch","undefined","handleHeaderClick","useCallback","current","scrollTop","handleSelectAll","handleSelectAccounts","handleSelectHashtags","handleSelectStatuses","handleLoadMore","expandSearch","hasMore","filteredResults","accounts","statuses","Fragment","Icon","PeopleIcon","TagIcon","FindInPageIcon","Column","formatMessage","ColumnHeader","SearchIcon","Search","ScrollableList","Helmet"],"mappings":"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"}