{"version":3,"file":"streaming-DlYu2k3L.js","sources":["../../node_modules/@gamestdio/websocket/lib/backoff.js","../../__vite-browser-external","../../node_modules/@gamestdio/websocket/lib/index.js","../../app/javascript/mastodon/stream.js","../../app/javascript/mastodon/actions/streaming.js"],"sourcesContent":["\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:true});exports.createBackoff=createBackoff;var backoff={exponential:function exponential(attempt,delay){return Math.floor(Math.random()*Math.pow(2,attempt)*delay);},fibonacci:function fibonacci(attempt,delay){var current=1;if(attempt>current){var prev=1,current=2;for(var index=2;index<attempt;index++){var next=prev+current;prev=current;current=next;}}return Math.floor(Math.random()*current*delay);}};function createBackoff(type,options){return new Backoff(backoff[type],options);}function Backoff(func,options){this.func=func;this.attempts=0;this.delay=typeof options.initialDelay!==\"undefined\"?options.initialDelay:100;}Backoff.prototype.backoff=function(){setTimeout(this.onReady,this.func(++this.attempts,this.delay));};","  export default new Proxy({}, {\n    get(_, key) {\n      throw new Error(`Module \"\" has been externalized for browser compatibility. Cannot access \".${key}\" in client code.  See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  })","'use strict';Object.defineProperty(exports,\"__esModule\",{value:true});var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if(\"value\"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError(\"Cannot call a class as a function\");}}var createBackoff=require('./backoff').createBackoff;var WebSocketImpl=typeof WebSocket!==\"undefined\"?WebSocket:require('ws');var WebSocketClient=function(){/**\n   * @param url DOMString The URL to which to connect; this should be the URL to which the WebSocket server will respond.\n   * @param protocols DOMString|DOMString[] Either a single protocol string or an array of protocol strings. These strings are used to indicate sub-protocols, so that a single server can implement multiple WebSocket sub-protocols (for example, you might want one server to be able to handle different types of interactions depending on the specified protocol). If you don't specify a protocol string, an empty string is assumed.\n   */function WebSocketClient(url,protocols){var options=arguments.length>2&&arguments[2]!==undefined?arguments[2]:{};_classCallCheck(this,WebSocketClient);this.url=url;this.protocols=protocols;this.reconnectEnabled=true;this.listeners={};this.backoff=createBackoff(options.backoff||'exponential',options);this.backoff.onReady=this.onBackoffReady.bind(this);if(typeof options.connect===\"undefined\"||options.connect){this.open();}}_createClass(WebSocketClient,[{key:'open',value:function open(){var reconnect=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;this.isReconnect=reconnect;// keep binaryType used on previous WebSocket connection\nvar binaryType=this.ws&&this.ws.binaryType;this.ws=new WebSocketImpl(this.url,this.protocols);this.ws.onclose=this.onCloseCallback.bind(this);this.ws.onerror=this.onErrorCallback.bind(this);this.ws.onmessage=this.onMessageCallback.bind(this);this.ws.onopen=this.onOpenCallback.bind(this);if(binaryType){this.ws.binaryType=binaryType;}}/**\n   * @ignore\n   */},{key:'onBackoffReady',value:function onBackoffReady(number,delay){// console.log(\"onBackoffReady\", number + ' ' + delay + 'ms');\nthis.open(true);}/**\n   * @ignore\n   */},{key:'onCloseCallback',value:function onCloseCallback(e){if(!this.isReconnect&&this.listeners['onclose']){this.listeners['onclose'].apply(null,arguments);}if(this.reconnectEnabled&&e.code<3000){this.backoff.backoff();}}/**\n   * @ignore\n   */},{key:'onErrorCallback',value:function onErrorCallback(){if(this.listeners['onerror']){this.listeners['onerror'].apply(null,arguments);}}/**\n   * @ignore\n   */},{key:'onMessageCallback',value:function onMessageCallback(){if(this.listeners['onmessage']){this.listeners['onmessage'].apply(null,arguments);}}/**\n   * @ignore\n   */},{key:'onOpenCallback',value:function onOpenCallback(){if(this.listeners['onopen']){this.listeners['onopen'].apply(null,arguments);}if(this.isReconnect&&this.listeners['onreconnect']){this.listeners['onreconnect'].apply(null,arguments);}this.isReconnect=false;}/**\n   * The number of bytes of data that have been queued using calls to send()\n   * but not yet transmitted to the network. This value does not reset to zero\n   * when the connection is closed; if you keep calling send(), this will\n   * continue to climb.\n   *\n   * @type unsigned long\n   * @readonly\n   */},{key:'close',/**\n   * Closes the WebSocket connection or connection attempt, if any. If the\n   * connection is already CLOSED, this method does nothing.\n   *\n   * @param code A numeric value indicating the status code explaining why the connection is being closed. If this parameter is not specified, a default value of 1000 (indicating a normal \"transaction complete\" closure) is assumed. See the list of status codes on the CloseEvent page for permitted values.\n   * @param reason A human-readable string explaining why the connection is closing. This string must be no longer than 123 bytes of UTF-8 text (not characters).\n   *\n   * @return void\n   */value:function close(code,reason){if(typeof code=='undefined'){code=1000;}this.reconnectEnabled=false;this.ws.close(code,reason);}/**\n   * Transmits data to the server over the WebSocket connection.\n   * @param data DOMString|ArrayBuffer|Blob\n   * @return void\n   */},{key:'send',value:function send(data){this.ws.send(data);}/**\n   * An event listener to be called when the WebSocket connection's readyState changes to CLOSED. The listener receives a CloseEvent named \"close\".\n   * @param listener EventListener\n   */},{key:'bufferedAmount',get:function get(){return this.ws.bufferedAmount;}/**\n   * The current state of the connection; this is one of the Ready state constants.\n   * @type unsigned short\n   * @readonly\n   */},{key:'readyState',get:function get(){return this.ws.readyState;}/**\n   * A string indicating the type of binary data being transmitted by the\n   * connection. This should be either \"blob\" if DOM Blob objects are being\n   * used or \"arraybuffer\" if ArrayBuffer objects are being used.\n   * @type DOMString\n   */},{key:'binaryType',get:function get(){return this.ws.binaryType;},set:function set(binaryType){this.ws.binaryType=binaryType;}/**\n   * The extensions selected by the server. This is currently only the empty\n   * string or a list of extensions as negotiated by the connection.\n   * @type DOMString\n   */},{key:'extensions',get:function get(){return this.ws.extensions;},set:function set(extensions){this.ws.extensions=extensions;}/**\n   * A string indicating the name of the sub-protocol the server selected;\n   * this will be one of the strings specified in the protocols parameter when\n   * creating the WebSocket object.\n   * @type DOMString\n   */},{key:'protocol',get:function get(){return this.ws.protocol;},set:function set(protocol){this.ws.protocol=protocol;}},{key:'onclose',set:function set(listener){this.listeners['onclose']=listener;},get:function get(){return this.listeners['onclose'];}/**\n   * An event listener to be called when an error occurs. This is a simple event named \"error\".\n   * @param listener EventListener\n   */},{key:'onerror',set:function set(listener){this.listeners['onerror']=listener;},get:function get(){return this.listeners['onerror'];}/**\n   * An event listener to be called when a message is received from the server. The listener receives a MessageEvent named \"message\".\n   * @param listener EventListener\n   */},{key:'onmessage',set:function set(listener){this.listeners['onmessage']=listener;},get:function get(){return this.listeners['onmessage'];}/**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN; this indicates that the connection is ready to send and receive data. The event is a simple one with the name \"open\".\n   * @param listener EventListener\n   */},{key:'onopen',set:function set(listener){this.listeners['onopen']=listener;},get:function get(){return this.listeners['onopen'];}/**\n   * @param listener EventListener\n   */},{key:'onreconnect',set:function set(listener){this.listeners['onreconnect']=listener;},get:function get(){return this.listeners['onreconnect'];}}]);return WebSocketClient;}();/**\n * The connection is not yet open.\n */WebSocketClient.CONNECTING=WebSocketImpl.CONNECTING;/**\n * The connection is open and ready to communicate.\n */WebSocketClient.OPEN=WebSocketImpl.OPEN;/**\n * The connection is in the process of closing.\n */WebSocketClient.CLOSING=WebSocketImpl.CLOSING;/**\n * The connection is closed or couldn't be opened.\n */WebSocketClient.CLOSED=WebSocketImpl.CLOSED;exports.default=WebSocketClient;","// @ts-check\n\nimport WebSocketClient from '@gamestdio/websocket';\n\nimport { getAccessToken } from './initial_state';\n\n/**\n * @type {WebSocketClient | undefined}\n */\nlet sharedConnection;\n\n/**\n * @typedef Subscription\n * @property {string} channelName\n * @property {Object.<string, string>} params\n * @property {function(): void} onConnect\n * @property {function(StreamEvent): void} onReceive\n * @property {function(): void} onDisconnect\n */\n\n/**\n * @typedef StreamEvent\n * @property {string} event\n * @property {object} payload\n */\n\n/**\n * @type {Array.<Subscription>}\n */\nconst subscriptions = [];\n\n/**\n * @type {Object.<string, number>}\n */\nconst subscriptionCounters = {};\n\n/**\n * @param {Subscription} subscription\n */\nconst addSubscription = subscription => {\n  subscriptions.push(subscription);\n};\n\n/**\n * @param {Subscription} subscription\n */\nconst removeSubscription = subscription => {\n  const index = subscriptions.indexOf(subscription);\n\n  if (index !== -1) {\n    subscriptions.splice(index, 1);\n  }\n};\n\n/**\n * @param {Subscription} subscription\n */\nconst subscribe = ({ channelName, params, onConnect }) => {\n  const key = channelNameWithInlineParams(channelName, params);\n\n  subscriptionCounters[key] = subscriptionCounters[key] || 0;\n\n  if (subscriptionCounters[key] === 0) {\n    // @ts-expect-error\n    sharedConnection.send(JSON.stringify({ type: 'subscribe', stream: channelName, ...params }));\n  }\n\n  subscriptionCounters[key] += 1;\n  onConnect();\n};\n\n/**\n * @param {Subscription} subscription\n */\nconst unsubscribe = ({ channelName, params, onDisconnect }) => {\n  const key = channelNameWithInlineParams(channelName, params);\n\n  subscriptionCounters[key] = subscriptionCounters[key] || 1;\n\n  // @ts-expect-error\n  if (subscriptionCounters[key] === 1 && sharedConnection.readyState === WebSocketClient.OPEN) {\n    // @ts-expect-error\n    sharedConnection.send(JSON.stringify({ type: 'unsubscribe', stream: channelName, ...params }));\n  }\n\n  subscriptionCounters[key] -= 1;\n  onDisconnect();\n};\n\nconst sharedCallbacks = {\n  connected() {\n    subscriptions.forEach(subscription => subscribe(subscription));\n  },\n\n  // @ts-expect-error\n  received(data) {\n    const { stream } = data;\n\n    subscriptions.filter(({ channelName, params }) => {\n      const streamChannelName = stream[0];\n\n      if (stream.length === 1) {\n        return channelName === streamChannelName;\n      }\n\n      const streamIdentifier = stream[1];\n\n      if (['hashtag', 'hashtag:local'].includes(channelName)) {\n        return channelName === streamChannelName && params.tag === streamIdentifier;\n      } else if (channelName === 'list') {\n        return channelName === streamChannelName && params.list === streamIdentifier;\n      }\n\n      return false;\n    }).forEach(subscription => {\n      subscription.onReceive(data);\n    });\n  },\n\n  disconnected() {\n    subscriptions.forEach(subscription => unsubscribe(subscription));\n  },\n\n  reconnected() {\n  },\n};\n\n/**\n * @param {string} channelName\n * @param {Object.<string, string>} params\n * @returns {string}\n */\nconst channelNameWithInlineParams = (channelName, params) => {\n  if (Object.keys(params).length === 0) {\n    return channelName;\n  }\n\n  return `${channelName}&${Object.keys(params).map(key => `${key}=${params[key]}`).join('&')}`;\n};\n\n/**\n * @param {string} channelName\n * @param {Object.<string, string>} params\n * @param {function(Function, Function): { onConnect: (function(): void), onReceive: (function(StreamEvent): void), onDisconnect: (function(): void) }} callbacks\n * @returns {function(): void}\n */\n// @ts-expect-error\nexport const connectStream = (channelName, params, callbacks) => (dispatch, getState) => {\n  const streamingAPIBaseURL = getState().getIn(['meta', 'streaming_api_base_url']);\n  const accessToken = getAccessToken();\n  const { onConnect, onReceive, onDisconnect } = callbacks(dispatch, getState);\n\n  if(!accessToken) throw new Error(\"Trying to connect to the streaming server but no access token is available.\");\n\n  // If we cannot use a websockets connection, we must fall back\n  // to using individual connections for each channel\n  if (!streamingAPIBaseURL.startsWith('ws')) {\n    const connection = createConnection(streamingAPIBaseURL, accessToken, channelNameWithInlineParams(channelName, params), {\n      connected() {\n        onConnect();\n      },\n\n      received(data) {\n        onReceive(data);\n      },\n\n      disconnected() {\n        onDisconnect();\n      },\n\n      reconnected() {\n        onConnect();\n      },\n    });\n\n    return () => {\n      connection.close();\n    };\n  }\n\n  const subscription = {\n    channelName,\n    params,\n    onConnect,\n    onReceive,\n    onDisconnect,\n  };\n\n  addSubscription(subscription);\n\n  // If a connection is open, we can execute the subscription right now. Otherwise,\n  // because we have already registered it, it will be executed on connect\n\n  if (!sharedConnection) {\n    sharedConnection = /** @type {WebSocketClient} */ (createConnection(streamingAPIBaseURL, accessToken, '', sharedCallbacks));\n  } else if (sharedConnection.readyState === WebSocketClient.OPEN) {\n    subscribe(subscription);\n  }\n\n  return () => {\n    removeSubscription(subscription);\n    unsubscribe(subscription);\n  };\n};\n\nconst KNOWN_EVENT_TYPES = [\n  'update',\n  'delete',\n  'notification',\n  'conversation',\n  'filters_changed',\n  'announcement',\n  'announcement.delete',\n  'announcement.reaction',\n];\n\n/**\n * @param {MessageEvent} e\n * @param {function(StreamEvent): void} received\n */\nconst handleEventSourceMessage = (e, received) => {\n  received({\n    event: e.type,\n    payload: e.data,\n  });\n};\n\n/**\n * @param {string} streamingAPIBaseURL\n * @param {string} accessToken\n * @param {string} channelName\n * @param {{ connected: Function, received: function(StreamEvent): void, disconnected: Function, reconnected: Function }} callbacks\n * @returns {WebSocketClient | EventSource}\n */\nconst createConnection = (streamingAPIBaseURL, accessToken, channelName, { connected, received, disconnected, reconnected }) => {\n  const params = channelName.split('&');\n\n  // @ts-expect-error\n  channelName = params.shift();\n\n  if (streamingAPIBaseURL.startsWith('ws')) {\n    // @ts-expect-error\n    const ws = new WebSocketClient(`${streamingAPIBaseURL}/api/v1/streaming/?${params.join('&')}`, accessToken);\n\n    // @ts-expect-error\n    ws.onopen = connected;\n    ws.onmessage = e => received(JSON.parse(e.data));\n    // @ts-expect-error\n    ws.onclose = disconnected;\n    // @ts-expect-error\n    ws.onreconnect = reconnected;\n\n    return ws;\n  }\n\n  channelName = channelName.replace(/:/g, '/');\n\n  if (channelName.endsWith(':media')) {\n    channelName = channelName.replace('/media', '');\n    params.push('only_media=true');\n  }\n\n  params.push(`access_token=${accessToken}`);\n\n  const es = new EventSource(`${streamingAPIBaseURL}/api/v1/streaming/${channelName}?${params.join('&')}`);\n\n  es.onopen = () => {\n    connected();\n  };\n\n  KNOWN_EVENT_TYPES.forEach(type => {\n    es.addEventListener(type, e => handleEventSourceMessage(/** @type {MessageEvent} */(e), received));\n  });\n\n  es.onerror = /** @type {function(): void} */ (disconnected);\n\n  return es;\n};\n","// @ts-check\n\nimport { getLocale } from '../locales';\nimport { connectStream } from '../stream';\n\nimport {\n  fetchAnnouncements,\n  updateAnnouncements,\n  updateReaction as updateAnnouncementsReaction,\n  deleteAnnouncement,\n} from './announcements';\nimport { updateConversations } from './conversations';\nimport { processNewNotificationForGroups, refreshStaleNotificationGroups, pollRecentNotifications as pollRecentGroupNotifications } from './notification_groups';\nimport { updateNotifications } from './notifications';\nimport { updateStatus } from './statuses';\nimport {\n  updateTimeline,\n  deleteFromTimelines,\n  expandHomeTimeline,\n  connectTimeline,\n  disconnectTimeline,\n  fillHomeTimelineGaps,\n  fillPublicTimelineGaps,\n  fillCommunityTimelineGaps,\n  fillListTimelineGaps,\n} from './timelines';\n\n/**\n * @param {number} max\n * @returns {number}\n */\nconst randomUpTo = max =>\n  Math.floor(Math.random() * Math.floor(max));\n\n/**\n * @param {string} timelineId\n * @param {string} channelName\n * @param {Object.<string, string>} params\n * @param {Object} options\n * @param {function(Function, Function): Promise<void>} [options.fallback]\n * @param {function(): void} [options.fillGaps]\n * @param {function(object): boolean} [options.accept]\n * @returns {function(): void}\n */\nexport const connectTimelineStream = (timelineId, channelName, params = {}, options = {}) => {\n  const { messages } = getLocale();\n\n  return connectStream(channelName, params, (dispatch, getState) => {\n    const locale = getState().getIn(['meta', 'locale']);\n\n    // @ts-expect-error\n    let pollingId;\n\n    /**\n     * @param {function(Function, Function): Promise<void>} fallback\n     */\n\n    const useFallback = async fallback => {\n      await fallback(dispatch, getState);\n      // eslint-disable-next-line react-hooks/rules-of-hooks -- this is not a react hook\n      pollingId = setTimeout(() => useFallback(fallback), 20000 + randomUpTo(20000));\n    };\n\n    return {\n      onConnect() {\n        dispatch(connectTimeline(timelineId));\n\n        // @ts-expect-error\n        if (pollingId) {\n          // @ts-ignore\n          clearTimeout(pollingId); pollingId = null;\n        }\n\n        if (options.fillGaps) {\n          dispatch(options.fillGaps());\n        }\n      },\n\n      onDisconnect() {\n        dispatch(disconnectTimeline({ timeline: timelineId }));\n\n        if (options.fallback) {\n          // @ts-expect-error\n          pollingId = setTimeout(() => useFallback(options.fallback), randomUpTo(40000));\n        }\n      },\n\n      onReceive(data) {\n        switch (data.event) {\n        case 'update':\n          // @ts-expect-error\n          dispatch(updateTimeline(timelineId, JSON.parse(data.payload), options.accept));\n          break;\n        case 'status.update':\n          // @ts-expect-error\n          dispatch(updateStatus(JSON.parse(data.payload)));\n          break;\n        case 'delete':\n          dispatch(deleteFromTimelines(data.payload));\n          break;\n        case 'notification': {\n          // @ts-expect-error\n          const notificationJSON = JSON.parse(data.payload);\n          dispatch(updateNotifications(notificationJSON, messages, locale));\n          // TODO: remove this once the groups feature replaces the previous one\n          dispatch(processNewNotificationForGroups(notificationJSON));\n          break;\n        }\n        case 'notifications_merged': {\n          dispatch(refreshStaleNotificationGroups());\n          break;\n        }\n        case 'conversation':\n          // @ts-expect-error\n          dispatch(updateConversations(JSON.parse(data.payload)));\n          break;\n        case 'announcement':\n          // @ts-expect-error\n          dispatch(updateAnnouncements(JSON.parse(data.payload)));\n          break;\n        case 'announcement.reaction':\n          // @ts-expect-error\n          dispatch(updateAnnouncementsReaction(JSON.parse(data.payload)));\n          break;\n        case 'announcement.delete':\n          dispatch(deleteAnnouncement(data.payload));\n          break;\n        }\n      },\n    };\n  });\n};\n\n/**\n * @param {Function} dispatch\n */\nasync function refreshHomeTimelineAndNotification(dispatch) {\n  await dispatch(expandHomeTimeline({ maxId: undefined }));\n\n  // TODO: polling for merged notifications\n  try {\n    await dispatch(pollRecentGroupNotifications());\n  } catch {\n    // TODO\n  }\n\n  await dispatch(fetchAnnouncements());\n}\n\n/**\n * @returns {function(): void}\n */\nexport const connectUserStream = () =>\n  connectTimelineStream('home', 'user', {}, { fallback: refreshHomeTimelineAndNotification, fillGaps: fillHomeTimelineGaps });\n\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @returns {function(): void}\n */\nexport const connectCommunityStream = ({ onlyMedia } = {}) =>\n  connectTimelineStream(`community${onlyMedia ? ':media' : ''}`, `public:local${onlyMedia ? ':media' : ''}`, {}, { fillGaps: () => (fillCommunityTimelineGaps({ onlyMedia })) });\n\n/**\n * @param {Object} options\n * @param {boolean} [options.onlyMedia]\n * @param {boolean} [options.onlyRemote]\n * @returns {function(): void}\n */\nexport const connectPublicStream = ({ onlyMedia, onlyRemote } = {}) =>\n  connectTimelineStream(`public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`, `public${onlyRemote ? ':remote' : ''}${onlyMedia ? ':media' : ''}`, {}, { fillGaps: () => fillPublicTimelineGaps({ onlyMedia, onlyRemote }) });\n\n/**\n * @param {string} columnId\n * @param {string} tagName\n * @param {boolean} onlyLocal\n * @param {function(object): boolean} accept\n * @returns {function(): void}\n */\nexport const connectHashtagStream = (columnId, tagName, onlyLocal, accept) =>\n  connectTimelineStream(`hashtag:${columnId}${onlyLocal ? ':local' : ''}`, `hashtag${onlyLocal ? ':local' : ''}`, { tag: tagName }, { accept });\n\n/**\n * @returns {function(): void}\n */\nexport const connectDirectStream = () =>\n  connectTimelineStream('direct', 'direct');\n\n/**\n * @param {string} listId\n * @returns {function(): void}\n */\nexport const connectListStream = listId =>\n  connectTimelineStream(`list:${listId}`, 'list', { list: listId }, { fillGaps: () => fillListTimelineGaps(listId) });\n"],"names":["backoff_1","createBackoff","backoff","attempt","delay","current","prev","index","next","type","options","Backoff","func","__viteBrowserExternal","_","key","lib","_createClass","defineProperties","target","props","i","descriptor","Constructor","protoProps","staticProps","_classCallCheck","instance","require$$0","WebSocketImpl","require$$1","WebSocketClient","url","protocols","reconnect","binaryType","number","e","code","reason","data","extensions","protocol","listener","sharedConnection","subscriptions","subscriptionCounters","addSubscription","subscription","push","removeSubscription","indexOf","splice","subscribe","channelName","params","onConnect","channelNameWithInlineParams","send","JSON","stringify","stream","unsubscribe","onDisconnect","readyState","OPEN","sharedCallbacks","connected","forEach","received","filter","streamChannelName","length","streamIdentifier","includes","tag","list","onReceive","disconnected","reconnected","Object","keys","map","join","connectStream","callbacks","dispatch","getState","streamingAPIBaseURL","getIn","accessToken","getAccessToken","Error","startsWith","connection","createConnection","close","KNOWN_EVENT_TYPES","handleEventSourceMessage","event","payload","split","shift","ws","onopen","onmessage","parse","onclose","onreconnect","replace","endsWith","es","EventSource","addEventListener","onerror","randomUpTo","max","Math","floor","random","connectTimelineStream","timelineId","messages","getLocale","locale","pollingId","useFallback","fallback","setTimeout","connectTimeline","clearTimeout","fillGaps","disconnectTimeline","timeline","updateTimeline","accept","updateStatus","deleteFromTimelines","notificationJSON","updateNotifications","processNewNotificationForGroups","refreshStaleNotificationGroups","updateConversations","updateAnnouncements","updateAnnouncementsReaction","deleteAnnouncement","refreshHomeTimelineAndNotification","expandHomeTimeline","maxId","undefined","pollRecentGroupNotifications","fetchAnnouncements","connectUserStream","fillHomeTimelineGaps","connectCommunityStream","onlyMedia","fillCommunityTimelineGaps","connectPublicStream","onlyRemote","fillPublicTimelineGaps","connectHashtagStream","columnId","tagName","onlyLocal","connectDirectStream","connectListStream","listId","fillListTimelineGaps"],"mappings":"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","x_google_ignoreList":[0,2]}