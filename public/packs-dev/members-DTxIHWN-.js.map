{"version":3,"file":"members-DTxIHWN-.js","sources":["../../app/javascript/mastodon/features/lists/members.tsx"],"sourcesContent":["import { useCallback, useState, useEffect, useRef } from 'react';\n\nimport { defineMessages, useIntl, FormattedMessage } from 'react-intl';\n\nimport { Helmet } from 'react-helmet';\nimport { useParams, Link } from 'react-router-dom';\n\nimport { useDebouncedCallback } from 'use-debounce';\n\nimport ListAltIcon from '@/material-icons/400-24px/list_alt.svg?react';\nimport SquigglyArrow from '@/svg-icons/squiggly_arrow.svg?react';\nimport { fetchRelationships } from 'mastodon/actions/accounts';\nimport { showAlertForError } from 'mastodon/actions/alerts';\nimport { importFetchedAccounts } from 'mastodon/actions/importer';\nimport { fetchList } from 'mastodon/actions/lists';\nimport { openModal } from 'mastodon/actions/modal';\nimport { apiRequest } from 'mastodon/api';\nimport { apiFollowAccount } from 'mastodon/api/accounts';\nimport {\n  apiGetAccounts,\n  apiAddAccountToList,\n  apiRemoveAccountFromList,\n} from 'mastodon/api/lists';\nimport type { ApiAccountJSON } from 'mastodon/api_types/accounts';\nimport { Avatar } from 'mastodon/components/avatar';\nimport { Button } from 'mastodon/components/button';\nimport { Column } from 'mastodon/components/column';\nimport { ColumnHeader } from 'mastodon/components/column_header';\nimport { ColumnSearchHeader } from 'mastodon/components/column_search_header';\nimport { FollowersCounter } from 'mastodon/components/counters';\nimport { DisplayName } from 'mastodon/components/display_name';\nimport ScrollableList from 'mastodon/components/scrollable_list';\nimport { ShortNumber } from 'mastodon/components/short_number';\nimport { VerifiedBadge } from 'mastodon/components/verified_badge';\nimport { me } from 'mastodon/initial_state';\nimport { useAppDispatch, useAppSelector } from 'mastodon/store';\n\nexport const messages = defineMessages({\n  manageMembers: {\n    id: 'column.list_members',\n    defaultMessage: 'Manage list members',\n  },\n  placeholder: {\n    id: 'lists.search',\n    defaultMessage: 'Search',\n  },\n  enterSearch: { id: 'lists.add_to_list', defaultMessage: 'Add to list' },\n  add: { id: 'lists.add_member', defaultMessage: 'Add' },\n  remove: { id: 'lists.remove_member', defaultMessage: 'Remove' },\n  back: { id: 'column_back_button.label', defaultMessage: 'Back' },\n});\n\ntype Mode = 'remove' | 'add';\n\nconst AccountItem: React.FC<{\n  accountId: string;\n  listId: string;\n  partOfList: boolean;\n  onToggle: (accountId: string) => void;\n}> = ({ accountId, listId, partOfList, onToggle }) => {\n  const intl = useIntl();\n  const dispatch = useAppDispatch();\n  const account = useAppSelector((state) => state.accounts.get(accountId));\n  const relationship = useAppSelector((state) =>\n    accountId ? state.relationships.get(accountId) : undefined,\n  );\n  const following =\n    accountId === me || relationship?.following || relationship?.requested;\n\n  useEffect(() => {\n    if (accountId) {\n      dispatch(fetchRelationships([accountId]));\n    }\n  }, [dispatch, accountId]);\n\n  const handleClick = useCallback(() => {\n    if (partOfList) {\n      void apiRemoveAccountFromList(listId, accountId);\n      onToggle(accountId);\n    } else {\n      if (following) {\n        void apiAddAccountToList(listId, accountId);\n        onToggle(accountId);\n      } else {\n        dispatch(\n          openModal({\n            modalType: 'CONFIRM_FOLLOW_TO_LIST',\n            modalProps: {\n              accountId,\n              onConfirm: () => {\n                apiFollowAccount(accountId)\n                  .then(() => apiAddAccountToList(listId, accountId))\n                  .then(() => {\n                    onToggle(accountId);\n                    return '';\n                  })\n                  .catch((err: unknown) => {\n                    dispatch(showAlertForError(err));\n                  });\n              },\n            },\n          }),\n        );\n      }\n    }\n  }, [dispatch, accountId, following, listId, partOfList, onToggle]);\n\n  if (!account) {\n    return null;\n  }\n\n  const firstVerifiedField = account.fields.find((item) => !!item.verified_at);\n\n  return (\n    <div className='account'>\n      <div className='account__wrapper'>\n        <Link\n          key={account.id}\n          className='account__display-name'\n          title={account.acct}\n          to={`/@${account.acct}`}\n          data-hover-card-account={account.id}\n        >\n          <div className='account__avatar-wrapper'>\n            <Avatar account={account} size={36} />\n          </div>\n\n          <div className='account__contents'>\n            <DisplayName account={account} />\n\n            <div className='account__details'>\n              <ShortNumber\n                value={account.followers_count}\n                renderer={FollowersCounter}\n              />{' '}\n              {firstVerifiedField && (\n                <VerifiedBadge link={firstVerifiedField.value} />\n              )}\n            </div>\n          </div>\n        </Link>\n\n        <div className='account__relationship'>\n          <Button\n            text={intl.formatMessage(\n              partOfList ? messages.remove : messages.add,\n            )}\n            secondary={partOfList}\n            onClick={handleClick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst ListMembers: React.FC<{\n  multiColumn?: boolean;\n}> = ({ multiColumn }) => {\n  const dispatch = useAppDispatch();\n  const { id } = useParams<{ id: string }>();\n  const intl = useIntl();\n\n  const [searching, setSearching] = useState(false);\n  const [accountIds, setAccountIds] = useState<string[]>([]);\n  const [searchAccountIds, setSearchAccountIds] = useState<string[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [mode, setMode] = useState<Mode>('remove');\n\n  useEffect(() => {\n    if (id) {\n      setLoading(true);\n      dispatch(fetchList(id));\n\n      void apiGetAccounts(id)\n        .then((data) => {\n          dispatch(importFetchedAccounts(data));\n          setAccountIds(data.map((a) => a.id));\n          setLoading(false);\n          return '';\n        })\n        .catch(() => {\n          setLoading(false);\n        });\n    }\n  }, [dispatch, id]);\n\n  const handleSearchClick = useCallback(() => {\n    setMode('add');\n  }, [setMode]);\n\n  const handleDismissSearchClick = useCallback(() => {\n    setMode('remove');\n    setSearching(false);\n  }, [setMode]);\n\n  const handleAccountToggle = useCallback(\n    (accountId: string) => {\n      const partOfList = accountIds.includes(accountId);\n\n      if (partOfList) {\n        setAccountIds(accountIds.filter((id) => id !== accountId));\n      } else {\n        setAccountIds([accountId, ...accountIds]);\n      }\n    },\n    [accountIds, setAccountIds],\n  );\n\n  const searchRequestRef = useRef<AbortController | null>(null);\n\n  const handleSearch = useDebouncedCallback(\n    (value: string) => {\n      if (searchRequestRef.current) {\n        searchRequestRef.current.abort();\n      }\n\n      if (value.trim().length === 0) {\n        setSearching(false);\n        return;\n      }\n\n      setLoading(true);\n\n      searchRequestRef.current = new AbortController();\n\n      void apiRequest<ApiAccountJSON[]>('GET', 'v1/accounts/search', {\n        signal: searchRequestRef.current.signal,\n        params: {\n          q: value,\n          resolve: true,\n        },\n      })\n        .then((data) => {\n          dispatch(importFetchedAccounts(data));\n          setSearchAccountIds(data.map((a) => a.id));\n          setLoading(false);\n          setSearching(true);\n          return '';\n        })\n        .catch(() => {\n          setSearching(true);\n          setLoading(false);\n        });\n    },\n    500,\n    { leading: true, trailing: true },\n  );\n\n  let displayedAccountIds: string[];\n\n  if (mode === 'add' && searching) {\n    displayedAccountIds = searchAccountIds;\n  } else {\n    displayedAccountIds = accountIds;\n  }\n\n  return (\n    <Column\n      bindToDocument={!multiColumn}\n      label={intl.formatMessage(messages.manageMembers)}\n    >\n      <ColumnHeader\n        title={intl.formatMessage(messages.manageMembers)}\n        icon='list-ul'\n        iconComponent={ListAltIcon}\n        multiColumn={multiColumn}\n        showBackButton\n      />\n\n      <ColumnSearchHeader\n        placeholder={intl.formatMessage(messages.placeholder)}\n        onBack={handleDismissSearchClick}\n        onSubmit={handleSearch}\n        onActivate={handleSearchClick}\n        active={mode === 'add'}\n      />\n\n      <ScrollableList\n        scrollKey='list_members'\n        trackScroll={!multiColumn}\n        bindToDocument={!multiColumn}\n        isLoading={loading}\n        showLoading={loading && displayedAccountIds.length === 0}\n        hasMore={false}\n        footer={\n          <>\n            {displayedAccountIds.length > 0 && <div className='spacer' />}\n\n            <div className='column-footer'>\n              <Link to={`/lists/${id}`} className='button button--block'>\n                <FormattedMessage id='lists.done' defaultMessage='Done' />\n              </Link>\n            </div>\n          </>\n        }\n        emptyMessage={\n          mode === 'remove' ? (\n            <>\n              <span>\n                <FormattedMessage\n                  id='lists.no_members_yet'\n                  defaultMessage='No members yet.'\n                />\n                <br />\n                <FormattedMessage\n                  id='lists.find_users_to_add'\n                  defaultMessage='Find users to add'\n                />\n              </span>\n\n              <SquigglyArrow className='empty-column-indicator__arrow' />\n            </>\n          ) : (\n            <FormattedMessage\n              id='lists.no_results_found'\n              defaultMessage='No results found.'\n            />\n          )\n        }\n      >\n        {displayedAccountIds.map((accountId) => (\n          <AccountItem\n            key={accountId}\n            accountId={accountId}\n            listId={id}\n            partOfList={\n              displayedAccountIds === accountIds ||\n              accountIds.includes(accountId)\n            }\n            onToggle={handleAccountToggle}\n          />\n        ))}\n      </ScrollableList>\n\n      <Helmet>\n        <title>{intl.formatMessage(messages.manageMembers)}</title>\n        <meta name='robots' content='noindex' />\n      </Helmet>\n    </Column>\n  );\n};\n\n// eslint-disable-next-line import/no-default-export\nexport default ListMembers;\n"],"names":["messages","defineMessages","manageMembers","id","defaultMessage","placeholder","enterSearch","add","remove","back","AccountItem","accountId","listId","partOfList","onToggle","intl","useIntl","dispatch","useAppDispatch","account","useAppSelector","state","accounts","get","relationship","relationships","undefined","following","me","requested","useEffect","fetchRelationships","handleClick","useCallback","apiRemoveAccountFromList","apiAddAccountToList","openModal","modalType","modalProps","onConfirm","apiFollowAccount","then","catch","err","showAlertForError","firstVerifiedField","fields","find","item","verified_at","jsxDEV","Link","acct","Avatar","this","DisplayName","ShortNumber","followers_count","FollowersCounter","VerifiedBadge","value","Button","formatMessage","ListMembers","multiColumn","useParams","searching","setSearching","useState","accountIds","setAccountIds","searchAccountIds","setSearchAccountIds","loading","setLoading","mode","setMode","fetchList","apiGetAccounts","data","importFetchedAccounts","map","a","handleSearchClick","handleDismissSearchClick","handleAccountToggle","includes","filter","searchRequestRef","useRef","handleSearch","useDebouncedCallback","current","abort","trim","length","AbortController","apiRequest","signal","params","q","resolve","leading","trailing","displayedAccountIds","Column","ColumnHeader","ListAltIcon","ColumnSearchHeader","ScrollableList","Fragment","FormattedMessage","SquigglyArrow","Helmet"],"mappings":"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"}