{"version":3,"file":"trends-CZYwXiuR.js","sources":["../../app/javascript/mastodon/features/ui/components/column_link.tsx","../../app/javascript/mastodon/features/navigation_panel/components/trends.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport { useRouteMatch, NavLink } from 'react-router-dom';\n\nimport { Icon } from 'mastodon/components/icon';\nimport type { IconProp } from 'mastodon/components/icon';\n\nexport const ColumnLink: React.FC<{\n  icon: React.ReactNode;\n  iconComponent?: IconProp;\n  activeIcon?: React.ReactNode;\n  activeIconComponent?: IconProp;\n  isActive?: (match: unknown, location: { pathname: string }) => boolean;\n  text: string;\n  to?: string;\n  href?: string;\n  method?: string;\n  badge?: React.ReactNode;\n  transparent?: boolean;\n  optional?: boolean;\n  className?: string;\n  id?: string;\n}> = ({\n  icon,\n  activeIcon,\n  iconComponent,\n  activeIconComponent,\n  text,\n  to,\n  href,\n  method,\n  badge,\n  transparent,\n  optional,\n  ...other\n}) => {\n  const match = useRouteMatch(to ?? '');\n  const className = classNames('column-link', {\n    'column-link--transparent': transparent,\n    'column-link--optional': optional,\n  });\n  const badgeElement =\n    typeof badge !== 'undefined' ? (\n      <span className='column-link__badge'>{badge}</span>\n    ) : null;\n  const iconElement = iconComponent ? (\n    <Icon\n      id={typeof icon === 'string' ? icon : ''}\n      icon={iconComponent}\n      className='column-link__icon'\n    />\n  ) : (\n    icon\n  );\n  const activeIconElement =\n    activeIcon ??\n    (activeIconComponent ? (\n      <Icon\n        id={typeof icon === 'string' ? icon : ''}\n        icon={activeIconComponent}\n        className='column-link__icon'\n      />\n    ) : (\n      iconElement\n    ));\n  const active = !!match;\n\n  if (href) {\n    return (\n      <a href={href} className={className} data-method={method} {...other}>\n        {active ? activeIconElement : iconElement}\n        <span>{text}</span>\n        {badgeElement}\n      </a>\n    );\n  } else if (to) {\n    return (\n      <NavLink to={to} className={className} {...other}>\n        {active ? activeIconElement : iconElement}\n        <span>{text}</span>\n        {badgeElement}\n      </NavLink>\n    );\n  } else {\n    return null;\n  }\n};\n","import { useEffect } from 'react';\n\nimport { FormattedMessage } from 'react-intl';\n\nimport { Link } from 'react-router-dom';\n\nimport type { List as ImmutableList, Map as ImmutableMap } from 'immutable';\n\nimport { fetchTrendingHashtags } from 'mastodon/actions/trends';\nimport { ImmutableHashtag as Hashtag } from 'mastodon/components/hashtag';\nimport { showTrends } from 'mastodon/initial_state';\nimport { useAppSelector, useAppDispatch } from 'mastodon/store';\n\nexport const Trends: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const trends = useAppSelector(\n    (state) =>\n      state.trends.getIn(['tags', 'items']) as ImmutableList<\n        ImmutableMap<string, unknown>\n      >,\n  );\n\n  useEffect(() => {\n    dispatch(fetchTrendingHashtags());\n\n    const refreshInterval = setInterval(() => {\n      dispatch(fetchTrendingHashtags());\n    }, 900 * 1000);\n\n    return () => {\n      clearInterval(refreshInterval);\n    };\n  }, [dispatch]);\n\n  if (!showTrends || trends.isEmpty()) {\n    return null;\n  }\n\n  return (\n    <div className='navigation-panel__portal'>\n      <div className='getting-started__trends'>\n        <h4>\n          <Link to={'/explore/tags'}>\n            <FormattedMessage\n              id='trends.trending_now'\n              defaultMessage='Trending now'\n            />\n          </Link>\n        </h4>\n\n        {trends.take(4).map((hashtag) => (\n          <Hashtag key={hashtag.get('name') as string} hashtag={hashtag} />\n        ))}\n      </div>\n    </div>\n  );\n};\n"],"names":["ColumnLink","icon","activeIcon","iconComponent","activeIconComponent","text","to","href","method","badge","transparent","optional","other","match","useRouteMatch","className","classNames","badgeElement","this","iconElement","jsxDEV","Icon","activeIconElement","active","NavLink","Trends","dispatch","useAppDispatch","trends","useAppSelector","state","getIn","useEffect","fetchTrendingHashtags","refreshInterval","setInterval","clearInterval","showTrends","isEmpty","Link","FormattedMessage","take","map","hashtag","Hashtag","get"],"mappings":"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"}